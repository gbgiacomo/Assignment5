
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	200032a0 	.word	0x200032a0
   4:	000030f1 	.word	0x000030f1
   8:	00009a95 	.word	0x00009a95
   c:	000030dd 	.word	0x000030dd
  10:	000030dd 	.word	0x000030dd
  14:	000030dd 	.word	0x000030dd
  18:	000030dd 	.word	0x000030dd
	...
  2c:	00002ef9 	.word	0x00002ef9
  30:	000030dd 	.word	0x000030dd
  34:	00000000 	.word	0x00000000
  38:	00002ea5 	.word	0x00002ea5
  3c:	000030dd 	.word	0x000030dd

00000040 <_irq_vector_table>:
  40:	00002e5d 00002e5d 00002e5d 00002e5d     ]...]...]...]...
  50:	00002e5d 00002e5d 00002e5d 00002e5d     ]...]...]...]...
  60:	00002e5d 00002e5d 00002e5d 00002e5d     ]...]...]...]...
  70:	00002e5d 00002e5d 00002e5d 00002e5d     ]...]...]...]...
  80:	00002e5d 00002e5d 00002e5d 00002e5d     ]...]...]...]...
  90:	00002e5d 00002e5d 00002e5d 00002e5d     ]...]...]...]...
  a0:	00002e5d 00002e5d 00002e5d 00002e5d     ]...]...]...]...
  b0:	00002e5d 00002e5d 00002e5d 00002e5d     ]...]...]...]...
  c0:	00002e5d 00002e5d 00002e5d 00002e5d     ]...]...]...]...
  d0:	00002e5d 00002e5d 00002e5d 00002e5d     ]...]...]...]...
  e0:	00002e5d 00002e5d 00002e5d 00002e5d     ]...]...]...]...
  f0:	00002e5d 00002e5d 00002e5d 00002e5d     ]...]...]...]...

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <__data_size+0xd7>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <__data_size+0xc3>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <__data_size+0xd>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0x18>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <__data_size+0x129>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_CONSOLE_PUTCHAR_BUFSIZE+0x18>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <__data_size+0x57>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <__data_size+0x53>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <__data_size+0x6d>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <__data_size+0xbb>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <__data_size+0xa3>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <__data_size+0x137>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <__data_size+0xfb>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <__data_size+0x119>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <__data_size+0x21>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <__data_size+0x21>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <__data_size+0x21>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_d2uiz>:
     89c:	004a      	lsls	r2, r1, #1
     89e:	d211      	bcs.n	8c4 <__aeabi_d2uiz+0x28>
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d211      	bcs.n	8ca <__aeabi_d2uiz+0x2e>
     8a6:	d50d      	bpl.n	8c4 <__aeabi_d2uiz+0x28>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d40e      	bmi.n	8d0 <__aeabi_d2uiz+0x34>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	fa23 f002 	lsr.w	r0, r3, r2
     8c2:	4770      	bx	lr
     8c4:	f04f 0000 	mov.w	r0, #0
     8c8:	4770      	bx	lr
     8ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8ce:	d102      	bne.n	8d6 <__aeabi_d2uiz+0x3a>
     8d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     8d4:	4770      	bx	lr
     8d6:	f04f 0000 	mov.w	r0, #0
     8da:	4770      	bx	lr

000008dc <__aeabi_ldivmod>:
     8dc:	b97b      	cbnz	r3, 8fe <__aeabi_ldivmod+0x22>
     8de:	b972      	cbnz	r2, 8fe <__aeabi_ldivmod+0x22>
     8e0:	2900      	cmp	r1, #0
     8e2:	bfbe      	ittt	lt
     8e4:	2000      	movlt	r0, #0
     8e6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     8ea:	e006      	blt.n	8fa <__aeabi_ldivmod+0x1e>
     8ec:	bf08      	it	eq
     8ee:	2800      	cmpeq	r0, #0
     8f0:	bf1c      	itt	ne
     8f2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     8f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     8fa:	f000 b9b7 	b.w	c6c <__aeabi_idiv0>
     8fe:	f1ad 0c08 	sub.w	ip, sp, #8
     902:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     906:	2900      	cmp	r1, #0
     908:	db09      	blt.n	91e <__aeabi_ldivmod+0x42>
     90a:	2b00      	cmp	r3, #0
     90c:	db1a      	blt.n	944 <__aeabi_ldivmod+0x68>
     90e:	f000 f84d 	bl	9ac <__udivmoddi4>
     912:	f8dd e004 	ldr.w	lr, [sp, #4]
     916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     91a:	b004      	add	sp, #16
     91c:	4770      	bx	lr
     91e:	4240      	negs	r0, r0
     920:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     924:	2b00      	cmp	r3, #0
     926:	db1b      	blt.n	960 <__aeabi_ldivmod+0x84>
     928:	f000 f840 	bl	9ac <__udivmoddi4>
     92c:	f8dd e004 	ldr.w	lr, [sp, #4]
     930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     934:	b004      	add	sp, #16
     936:	4240      	negs	r0, r0
     938:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     93c:	4252      	negs	r2, r2
     93e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     942:	4770      	bx	lr
     944:	4252      	negs	r2, r2
     946:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     94a:	f000 f82f 	bl	9ac <__udivmoddi4>
     94e:	f8dd e004 	ldr.w	lr, [sp, #4]
     952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     956:	b004      	add	sp, #16
     958:	4240      	negs	r0, r0
     95a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     95e:	4770      	bx	lr
     960:	4252      	negs	r2, r2
     962:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     966:	f000 f821 	bl	9ac <__udivmoddi4>
     96a:	f8dd e004 	ldr.w	lr, [sp, #4]
     96e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     972:	b004      	add	sp, #16
     974:	4252      	negs	r2, r2
     976:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     97a:	4770      	bx	lr

0000097c <__aeabi_uldivmod>:
     97c:	b953      	cbnz	r3, 994 <__aeabi_uldivmod+0x18>
     97e:	b94a      	cbnz	r2, 994 <__aeabi_uldivmod+0x18>
     980:	2900      	cmp	r1, #0
     982:	bf08      	it	eq
     984:	2800      	cmpeq	r0, #0
     986:	bf1c      	itt	ne
     988:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     98c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     990:	f000 b96c 	b.w	c6c <__aeabi_idiv0>
     994:	f1ad 0c08 	sub.w	ip, sp, #8
     998:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     99c:	f000 f806 	bl	9ac <__udivmoddi4>
     9a0:	f8dd e004 	ldr.w	lr, [sp, #4]
     9a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9a8:	b004      	add	sp, #16
     9aa:	4770      	bx	lr

000009ac <__udivmoddi4>:
     9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     9b0:	9e08      	ldr	r6, [sp, #32]
     9b2:	460d      	mov	r5, r1
     9b4:	4604      	mov	r4, r0
     9b6:	468e      	mov	lr, r1
     9b8:	2b00      	cmp	r3, #0
     9ba:	f040 8082 	bne.w	ac2 <__udivmoddi4+0x116>
     9be:	428a      	cmp	r2, r1
     9c0:	4617      	mov	r7, r2
     9c2:	d946      	bls.n	a52 <__udivmoddi4+0xa6>
     9c4:	fab2 f282 	clz	r2, r2
     9c8:	b14a      	cbz	r2, 9de <__udivmoddi4+0x32>
     9ca:	f1c2 0120 	rsb	r1, r2, #32
     9ce:	fa05 f302 	lsl.w	r3, r5, r2
     9d2:	fa20 f101 	lsr.w	r1, r0, r1
     9d6:	4097      	lsls	r7, r2
     9d8:	ea41 0e03 	orr.w	lr, r1, r3
     9dc:	4094      	lsls	r4, r2
     9de:	ea4f 4817 	mov.w	r8, r7, lsr #16
     9e2:	0c23      	lsrs	r3, r4, #16
     9e4:	fbbe fcf8 	udiv	ip, lr, r8
     9e8:	b2b9      	uxth	r1, r7
     9ea:	fb08 ee1c 	mls	lr, r8, ip, lr
     9ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     9f2:	fb0c f001 	mul.w	r0, ip, r1
     9f6:	4298      	cmp	r0, r3
     9f8:	d90a      	bls.n	a10 <__udivmoddi4+0x64>
     9fa:	18fb      	adds	r3, r7, r3
     9fc:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     a00:	f080 8116 	bcs.w	c30 <__udivmoddi4+0x284>
     a04:	4298      	cmp	r0, r3
     a06:	f240 8113 	bls.w	c30 <__udivmoddi4+0x284>
     a0a:	f1ac 0c02 	sub.w	ip, ip, #2
     a0e:	443b      	add	r3, r7
     a10:	1a1b      	subs	r3, r3, r0
     a12:	b2a4      	uxth	r4, r4
     a14:	fbb3 f0f8 	udiv	r0, r3, r8
     a18:	fb08 3310 	mls	r3, r8, r0, r3
     a1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     a20:	fb00 f101 	mul.w	r1, r0, r1
     a24:	42a1      	cmp	r1, r4
     a26:	d909      	bls.n	a3c <__udivmoddi4+0x90>
     a28:	193c      	adds	r4, r7, r4
     a2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     a2e:	f080 8101 	bcs.w	c34 <__udivmoddi4+0x288>
     a32:	42a1      	cmp	r1, r4
     a34:	f240 80fe 	bls.w	c34 <__udivmoddi4+0x288>
     a38:	3802      	subs	r0, #2
     a3a:	443c      	add	r4, r7
     a3c:	1a64      	subs	r4, r4, r1
     a3e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a42:	2100      	movs	r1, #0
     a44:	b11e      	cbz	r6, a4e <__udivmoddi4+0xa2>
     a46:	40d4      	lsrs	r4, r2
     a48:	2300      	movs	r3, #0
     a4a:	e9c6 4300 	strd	r4, r3, [r6]
     a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a52:	b902      	cbnz	r2, a56 <__udivmoddi4+0xaa>
     a54:	deff      	udf	#255	; 0xff
     a56:	fab2 f282 	clz	r2, r2
     a5a:	2a00      	cmp	r2, #0
     a5c:	d14f      	bne.n	afe <__udivmoddi4+0x152>
     a5e:	1bcb      	subs	r3, r1, r7
     a60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a64:	fa1f f887 	uxth.w	r8, r7
     a68:	2101      	movs	r1, #1
     a6a:	fbb3 fcfe 	udiv	ip, r3, lr
     a6e:	0c25      	lsrs	r5, r4, #16
     a70:	fb0e 331c 	mls	r3, lr, ip, r3
     a74:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     a78:	fb08 f30c 	mul.w	r3, r8, ip
     a7c:	42ab      	cmp	r3, r5
     a7e:	d907      	bls.n	a90 <__udivmoddi4+0xe4>
     a80:	197d      	adds	r5, r7, r5
     a82:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     a86:	d202      	bcs.n	a8e <__udivmoddi4+0xe2>
     a88:	42ab      	cmp	r3, r5
     a8a:	f200 80e7 	bhi.w	c5c <__udivmoddi4+0x2b0>
     a8e:	4684      	mov	ip, r0
     a90:	1aed      	subs	r5, r5, r3
     a92:	b2a3      	uxth	r3, r4
     a94:	fbb5 f0fe 	udiv	r0, r5, lr
     a98:	fb0e 5510 	mls	r5, lr, r0, r5
     a9c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     aa0:	fb08 f800 	mul.w	r8, r8, r0
     aa4:	45a0      	cmp	r8, r4
     aa6:	d907      	bls.n	ab8 <__udivmoddi4+0x10c>
     aa8:	193c      	adds	r4, r7, r4
     aaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     aae:	d202      	bcs.n	ab6 <__udivmoddi4+0x10a>
     ab0:	45a0      	cmp	r8, r4
     ab2:	f200 80d7 	bhi.w	c64 <__udivmoddi4+0x2b8>
     ab6:	4618      	mov	r0, r3
     ab8:	eba4 0408 	sub.w	r4, r4, r8
     abc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     ac0:	e7c0      	b.n	a44 <__udivmoddi4+0x98>
     ac2:	428b      	cmp	r3, r1
     ac4:	d908      	bls.n	ad8 <__udivmoddi4+0x12c>
     ac6:	2e00      	cmp	r6, #0
     ac8:	f000 80af 	beq.w	c2a <__udivmoddi4+0x27e>
     acc:	2100      	movs	r1, #0
     ace:	e9c6 0500 	strd	r0, r5, [r6]
     ad2:	4608      	mov	r0, r1
     ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ad8:	fab3 f183 	clz	r1, r3
     adc:	2900      	cmp	r1, #0
     ade:	d14b      	bne.n	b78 <__udivmoddi4+0x1cc>
     ae0:	42ab      	cmp	r3, r5
     ae2:	d302      	bcc.n	aea <__udivmoddi4+0x13e>
     ae4:	4282      	cmp	r2, r0
     ae6:	f200 80b7 	bhi.w	c58 <__udivmoddi4+0x2ac>
     aea:	1a84      	subs	r4, r0, r2
     aec:	eb65 0303 	sbc.w	r3, r5, r3
     af0:	2001      	movs	r0, #1
     af2:	469e      	mov	lr, r3
     af4:	2e00      	cmp	r6, #0
     af6:	d0aa      	beq.n	a4e <__udivmoddi4+0xa2>
     af8:	e9c6 4e00 	strd	r4, lr, [r6]
     afc:	e7a7      	b.n	a4e <__udivmoddi4+0xa2>
     afe:	f1c2 0c20 	rsb	ip, r2, #32
     b02:	fa01 f302 	lsl.w	r3, r1, r2
     b06:	4097      	lsls	r7, r2
     b08:	fa20 f00c 	lsr.w	r0, r0, ip
     b0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b10:	fa21 fc0c 	lsr.w	ip, r1, ip
     b14:	4318      	orrs	r0, r3
     b16:	fbbc f1fe 	udiv	r1, ip, lr
     b1a:	0c05      	lsrs	r5, r0, #16
     b1c:	fb0e cc11 	mls	ip, lr, r1, ip
     b20:	fa1f f887 	uxth.w	r8, r7
     b24:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     b28:	fb01 f308 	mul.w	r3, r1, r8
     b2c:	42ab      	cmp	r3, r5
     b2e:	fa04 f402 	lsl.w	r4, r4, r2
     b32:	d909      	bls.n	b48 <__udivmoddi4+0x19c>
     b34:	197d      	adds	r5, r7, r5
     b36:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     b3a:	f080 808b 	bcs.w	c54 <__udivmoddi4+0x2a8>
     b3e:	42ab      	cmp	r3, r5
     b40:	f240 8088 	bls.w	c54 <__udivmoddi4+0x2a8>
     b44:	3902      	subs	r1, #2
     b46:	443d      	add	r5, r7
     b48:	1aeb      	subs	r3, r5, r3
     b4a:	b285      	uxth	r5, r0
     b4c:	fbb3 f0fe 	udiv	r0, r3, lr
     b50:	fb0e 3310 	mls	r3, lr, r0, r3
     b54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     b58:	fb00 f308 	mul.w	r3, r0, r8
     b5c:	42ab      	cmp	r3, r5
     b5e:	d907      	bls.n	b70 <__udivmoddi4+0x1c4>
     b60:	197d      	adds	r5, r7, r5
     b62:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     b66:	d271      	bcs.n	c4c <__udivmoddi4+0x2a0>
     b68:	42ab      	cmp	r3, r5
     b6a:	d96f      	bls.n	c4c <__udivmoddi4+0x2a0>
     b6c:	3802      	subs	r0, #2
     b6e:	443d      	add	r5, r7
     b70:	1aeb      	subs	r3, r5, r3
     b72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     b76:	e778      	b.n	a6a <__udivmoddi4+0xbe>
     b78:	f1c1 0c20 	rsb	ip, r1, #32
     b7c:	408b      	lsls	r3, r1
     b7e:	fa22 f70c 	lsr.w	r7, r2, ip
     b82:	431f      	orrs	r7, r3
     b84:	fa20 f40c 	lsr.w	r4, r0, ip
     b88:	fa05 f301 	lsl.w	r3, r5, r1
     b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b90:	fa25 f50c 	lsr.w	r5, r5, ip
     b94:	431c      	orrs	r4, r3
     b96:	0c23      	lsrs	r3, r4, #16
     b98:	fbb5 f9fe 	udiv	r9, r5, lr
     b9c:	fa1f f887 	uxth.w	r8, r7
     ba0:	fb0e 5519 	mls	r5, lr, r9, r5
     ba4:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     ba8:	fb09 fa08 	mul.w	sl, r9, r8
     bac:	45aa      	cmp	sl, r5
     bae:	fa02 f201 	lsl.w	r2, r2, r1
     bb2:	fa00 f301 	lsl.w	r3, r0, r1
     bb6:	d908      	bls.n	bca <__udivmoddi4+0x21e>
     bb8:	197d      	adds	r5, r7, r5
     bba:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     bbe:	d247      	bcs.n	c50 <__udivmoddi4+0x2a4>
     bc0:	45aa      	cmp	sl, r5
     bc2:	d945      	bls.n	c50 <__udivmoddi4+0x2a4>
     bc4:	f1a9 0902 	sub.w	r9, r9, #2
     bc8:	443d      	add	r5, r7
     bca:	eba5 050a 	sub.w	r5, r5, sl
     bce:	b2a4      	uxth	r4, r4
     bd0:	fbb5 f0fe 	udiv	r0, r5, lr
     bd4:	fb0e 5510 	mls	r5, lr, r0, r5
     bd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     bdc:	fb00 f808 	mul.w	r8, r0, r8
     be0:	45a0      	cmp	r8, r4
     be2:	d907      	bls.n	bf4 <__udivmoddi4+0x248>
     be4:	193c      	adds	r4, r7, r4
     be6:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     bea:	d22d      	bcs.n	c48 <__udivmoddi4+0x29c>
     bec:	45a0      	cmp	r8, r4
     bee:	d92b      	bls.n	c48 <__udivmoddi4+0x29c>
     bf0:	3802      	subs	r0, #2
     bf2:	443c      	add	r4, r7
     bf4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     bf8:	eba4 0408 	sub.w	r4, r4, r8
     bfc:	fba0 8902 	umull	r8, r9, r0, r2
     c00:	454c      	cmp	r4, r9
     c02:	46c6      	mov	lr, r8
     c04:	464d      	mov	r5, r9
     c06:	d319      	bcc.n	c3c <__udivmoddi4+0x290>
     c08:	d016      	beq.n	c38 <__udivmoddi4+0x28c>
     c0a:	b15e      	cbz	r6, c24 <__udivmoddi4+0x278>
     c0c:	ebb3 020e 	subs.w	r2, r3, lr
     c10:	eb64 0405 	sbc.w	r4, r4, r5
     c14:	fa04 fc0c 	lsl.w	ip, r4, ip
     c18:	40ca      	lsrs	r2, r1
     c1a:	ea4c 0202 	orr.w	r2, ip, r2
     c1e:	40cc      	lsrs	r4, r1
     c20:	e9c6 2400 	strd	r2, r4, [r6]
     c24:	2100      	movs	r1, #0
     c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c2a:	4631      	mov	r1, r6
     c2c:	4630      	mov	r0, r6
     c2e:	e70e      	b.n	a4e <__udivmoddi4+0xa2>
     c30:	46ac      	mov	ip, r5
     c32:	e6ed      	b.n	a10 <__udivmoddi4+0x64>
     c34:	4618      	mov	r0, r3
     c36:	e701      	b.n	a3c <__udivmoddi4+0x90>
     c38:	4543      	cmp	r3, r8
     c3a:	d2e6      	bcs.n	c0a <__udivmoddi4+0x25e>
     c3c:	ebb8 0e02 	subs.w	lr, r8, r2
     c40:	eb69 0507 	sbc.w	r5, r9, r7
     c44:	3801      	subs	r0, #1
     c46:	e7e0      	b.n	c0a <__udivmoddi4+0x25e>
     c48:	4628      	mov	r0, r5
     c4a:	e7d3      	b.n	bf4 <__udivmoddi4+0x248>
     c4c:	4660      	mov	r0, ip
     c4e:	e78f      	b.n	b70 <__udivmoddi4+0x1c4>
     c50:	4681      	mov	r9, r0
     c52:	e7ba      	b.n	bca <__udivmoddi4+0x21e>
     c54:	4661      	mov	r1, ip
     c56:	e777      	b.n	b48 <__udivmoddi4+0x19c>
     c58:	4608      	mov	r0, r1
     c5a:	e74b      	b.n	af4 <__udivmoddi4+0x148>
     c5c:	f1ac 0c02 	sub.w	ip, ip, #2
     c60:	443d      	add	r5, r7
     c62:	e715      	b.n	a90 <__udivmoddi4+0xe4>
     c64:	3802      	subs	r0, #2
     c66:	443c      	add	r4, r7
     c68:	e726      	b.n	ab8 <__udivmoddi4+0x10c>
     c6a:	bf00      	nop

00000c6c <__aeabi_idiv0>:
     c6c:	4770      	bx	lr
     c6e:	bf00      	nop

00000c70 <thread_FILTER_code>:
    }
}


void thread_FILTER_code(void *argA,void *argB,void *argC)
{
     c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    printk("Thread FILTER init\n");
     c74:	4848      	ldr	r0, [pc, #288]	; (d98 <thread_FILTER_code+0x128>)
     c76:	f008 fd4c 	bl	9712 <printk>
        }
        average=sum/10;
	
        /* Samples value limits */
        upperLevel=average*1.05;
        lowerLevel=average*0.95;
     c7a:	f20f 190c 	addw	r9, pc, #268	; 0x10c
     c7e:	e9d9 8900 	ldrd	r8, r9, [r9]
        samples[index]=sample;
     c82:	f04f 0b0a 	mov.w	fp, #10
        k_sem_take(&sem_auto2filter,  K_FOREVER);
     c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     c8e:	4843      	ldr	r0, [pc, #268]	; (d9c <thread_FILTER_code+0x12c>)
        samples[index]=sample;
     c90:	4d43      	ldr	r5, [pc, #268]	; (da0 <thread_FILTER_code+0x130>)
        k_sem_take(&sem_auto2filter,  K_FOREVER);
     c92:	f008 fc33 	bl	94fc <k_sem_take.constprop.0>
        printk("Task FILTER at time: %lld ms\t",k_uptime_get());
     c96:	f008 fc0e 	bl	94b6 <k_uptime_get>
     c9a:	4602      	mov	r2, r0
     c9c:	460b      	mov	r3, r1
     c9e:	4841      	ldr	r0, [pc, #260]	; (da4 <thread_FILTER_code+0x134>)
     ca0:	f008 fd37 	bl	9712 <printk>
        if(index<SIZE-1){
     ca4:	4a40      	ldr	r2, [pc, #256]	; (da8 <thread_FILTER_code+0x138>)
     ca6:	f992 3000 	ldrsb.w	r3, [r2]
     caa:	2b08      	cmp	r3, #8
            index++;
     cac:	bfda      	itte	le
     cae:	3301      	addle	r3, #1
     cb0:	b25b      	sxtble	r3, r3
          index=0;
     cb2:	2300      	movgt	r3, #0
     cb4:	7013      	strb	r3, [r2, #0]
        samples[index]=sample;
     cb6:	4a3d      	ldr	r2, [pc, #244]	; (dac <thread_FILTER_code+0x13c>)
     cb8:	8812      	ldrh	r2, [r2, #0]
     cba:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
     cbe:	240a      	movs	r4, #10
     cc0:	462b      	mov	r3, r5
        int32_t sum=0;
     cc2:	2000      	movs	r0, #0
    	 sum+=samples[i];
     cc4:	f833 2b02 	ldrh.w	r2, [r3], #2
     cc8:	3c01      	subs	r4, #1
        for(int8_t i=0;i<10;i++){
     cca:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    	 sum+=samples[i];
     cce:	4410      	add	r0, r2
        for(int8_t i=0;i<10;i++){
     cd0:	d1f8      	bne.n	cc4 <thread_FILTER_code+0x54>
        average=sum/10;
     cd2:	fb90 f0fb 	sdiv	r0, r0, fp
     cd6:	4b36      	ldr	r3, [pc, #216]	; (db0 <thread_FILTER_code+0x140>)
     cd8:	8018      	strh	r0, [r3, #0]
        upperLevel=average*1.05;
     cda:	b280      	uxth	r0, r0
     cdc:	f7ff fb62 	bl	3a4 <__aeabi_i2d>
     ce0:	a32b      	add	r3, pc, #172	; (adr r3, d90 <thread_FILTER_code+0x120>)
     ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
     ce6:	4606      	mov	r6, r0
     ce8:	460f      	mov	r7, r1
     cea:	f7ff fbc5 	bl	478 <__aeabi_dmul>
     cee:	f7ff fdd5 	bl	89c <__aeabi_d2uiz>
     cf2:	4b30      	ldr	r3, [pc, #192]	; (db4 <thread_FILTER_code+0x144>)
     cf4:	fa1f fa80 	uxth.w	sl, r0
     cf8:	f8a3 a000 	strh.w	sl, [r3]
        lowerLevel=average*0.95;
     cfc:	4642      	mov	r2, r8
     cfe:	464b      	mov	r3, r9
     d00:	4630      	mov	r0, r6
     d02:	4639      	mov	r1, r7
     d04:	f7ff fbb8 	bl	478 <__aeabi_dmul>
     d08:	f7ff fdc8 	bl	89c <__aeabi_d2uiz>
     d0c:	4b2a      	ldr	r3, [pc, #168]	; (db8 <thread_FILTER_code+0x148>)

        uint16_t j=0;
	
        for(uint8_t i=0;i<10;i++){
            if(samples[i]>=lowerLevel && samples[i]<=upperLevel){
                filteredSamples[j]=samples[i];
     d0e:	492b      	ldr	r1, [pc, #172]	; (dbc <thread_FILTER_code+0x14c>)
        lowerLevel=average*0.95;
     d10:	b280      	uxth	r0, r0
     d12:	8018      	strh	r0, [r3, #0]
     d14:	230a      	movs	r3, #10
            if(samples[i]>=lowerLevel && samples[i]<=upperLevel){
     d16:	f835 2b02 	ldrh.w	r2, [r5], #2
     d1a:	4290      	cmp	r0, r2
     d1c:	d805      	bhi.n	d2a <thread_FILTER_code+0xba>
     d1e:	4592      	cmp	sl, r2
                filteredSamples[j]=samples[i];
     d20:	bf22      	ittt	cs
     d22:	f821 2014 	strhcs.w	r2, [r1, r4, lsl #1]
                j++;
     d26:	3401      	addcs	r4, #1
     d28:	b2a4      	uxthcs	r4, r4
        for(uint8_t i=0;i<10;i++){
     d2a:	3b01      	subs	r3, #1
     d2c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
     d30:	d1f1      	bne.n	d16 <thread_FILTER_code+0xa6>
            }
        }
         
        /* Print the vector samples filtered */
        printk("Vector filtered: ");
     d32:	4823      	ldr	r0, [pc, #140]	; (dc0 <thread_FILTER_code+0x150>)
     d34:	4e21      	ldr	r6, [pc, #132]	; (dbc <thread_FILTER_code+0x14c>)
        for(uint8_t i=0;i<10;i++){
            printk("\t %d",filteredSamples[i]);
     d36:	f8df a098 	ldr.w	sl, [pc, #152]	; dd0 <thread_FILTER_code+0x160>
        printk("Vector filtered: ");
     d3a:	f008 fcea 	bl	9712 <printk>
     d3e:	4637      	mov	r7, r6
     d40:	250a      	movs	r5, #10
            printk("\t %d",filteredSamples[i]);
     d42:	f837 1b02 	ldrh.w	r1, [r7], #2
     d46:	4650      	mov	r0, sl
     d48:	f008 fce3 	bl	9712 <printk>
        for(uint8_t i=0;i<10;i++){
     d4c:	1e6b      	subs	r3, r5, #1
     d4e:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
     d52:	d1f6      	bne.n	d42 <thread_FILTER_code+0xd2>
        }
        printk("\n");
     d54:	481b      	ldr	r0, [pc, #108]	; (dc4 <thread_FILTER_code+0x154>)
     d56:	f008 fcdc 	bl	9712 <printk>
          

        uint16_t sum2=0;
	
        for(uint16_t a=0;a<j;a++){
     d5a:	462b      	mov	r3, r5
        uint16_t sum2=0;
     d5c:	462a      	mov	r2, r5
        for(uint16_t a=0;a<j;a++){
     d5e:	b299      	uxth	r1, r3
     d60:	428c      	cmp	r4, r1
     d62:	d808      	bhi.n	d76 <thread_FILTER_code+0x106>
            sum2+=filteredSamples[a];
        }
         
        //condition to avoid a zero denominator
        if(j>0){
     d64:	b11c      	cbz	r4, d6e <thread_FILTER_code+0xfe>
            output=sum2/j;
     d66:	fbb2 f4f4 	udiv	r4, r2, r4
     d6a:	4b17      	ldr	r3, [pc, #92]	; (dc8 <thread_FILTER_code+0x158>)
     d6c:	801c      	strh	r4, [r3, #0]
        }
    
        /*semaphore*/
        k_sem_give(&sem_filter2control);
     d6e:	4817      	ldr	r0, [pc, #92]	; (dcc <thread_FILTER_code+0x15c>)
     d70:	f008 fb9f 	bl	94b2 <k_sem_give>
    while(1){
     d74:	e787      	b.n	c86 <thread_FILTER_code+0x16>
            sum2+=filteredSamples[a];
     d76:	f836 1b02 	ldrh.w	r1, [r6], #2
     d7a:	440a      	add	r2, r1
     d7c:	b292      	uxth	r2, r2
        for(uint16_t a=0;a<j;a++){
     d7e:	3301      	adds	r3, #1
     d80:	e7ed      	b.n	d5e <thread_FILTER_code+0xee>
     d82:	bf00      	nop
     d84:	f3af 8000 	nop.w
     d88:	66666666 	.word	0x66666666
     d8c:	3fee6666 	.word	0x3fee6666
     d90:	cccccccd 	.word	0xcccccccd
     d94:	3ff0cccc 	.word	0x3ff0cccc
     d98:	0000aa42 	.word	0x0000aa42
     d9c:	200007bc 	.word	0x200007bc
     da0:	20000fd6 	.word	0x20000fd6
     da4:	0000aa56 	.word	0x0000aa56
     da8:	20000222 	.word	0x20000222
     dac:	20000fd4 	.word	0x20000fd4
     db0:	20000eee 	.word	0x20000eee
     db4:	2000117a 	.word	0x2000117a
     db8:	20000fce 	.word	0x20000fce
     dbc:	20000ef0 	.word	0x20000ef0
     dc0:	0000aa74 	.word	0x0000aa74
     dc4:	0000bd21 	.word	0x0000bd21
     dc8:	20000fd0 	.word	0x20000fd0
     dcc:	200007d4 	.word	0x200007d4
     dd0:	0000aa86 	.word	0x0000aa86

00000dd4 <but1press_cbfunction>:
    up=1;
     dd4:	4b01      	ldr	r3, [pc, #4]	; (ddc <but1press_cbfunction+0x8>)
     dd6:	2201      	movs	r2, #1
     dd8:	701a      	strb	r2, [r3, #0]
}
     dda:	4770      	bx	lr
     ddc:	20001185 	.word	0x20001185

00000de0 <but2press_cbfunction>:
    down=1;
     de0:	4b01      	ldr	r3, [pc, #4]	; (de8 <but2press_cbfunction+0x8>)
     de2:	2201      	movs	r2, #1
     de4:	701a      	strb	r2, [r3, #0]
}
     de6:	4770      	bx	lr
     de8:	2000117f 	.word	0x2000117f

00000dec <but3press_cbfunction>:
    mode=1;
     dec:	4b01      	ldr	r3, [pc, #4]	; (df4 <but3press_cbfunction+0x8>)
     dee:	2201      	movs	r2, #1
     df0:	701a      	strb	r2, [r3, #0]
}
     df2:	4770      	bx	lr
     df4:	20001182 	.word	0x20001182

00000df8 <but4press_cbfunction>:
    dark=1;
     df8:	4a02      	ldr	r2, [pc, #8]	; (e04 <but4press_cbfunction+0xc>)
     dfa:	2301      	movs	r3, #1
     dfc:	7013      	strb	r3, [r2, #0]
    cons=1;
     dfe:	4a02      	ldr	r2, [pc, #8]	; (e08 <but4press_cbfunction+0x10>)
     e00:	7013      	strb	r3, [r2, #0]
}
     e02:	4770      	bx	lr
     e04:	2000117d 	.word	0x2000117d
     e08:	2000117c 	.word	0x2000117c

00000e0c <z_impl_gpio_pin_configure.constprop.0>:
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e0c:	6843      	ldr	r3, [r0, #4]
static inline int z_impl_gpio_pin_configure(const struct device *port,
     e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e12:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
     e14:	f8d0 8008 	ldr.w	r8, [r0, #8]
	struct gpio_driver_data *data =
     e18:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e1a:	2601      	movs	r6, #1
     e1c:	408e      	lsls	r6, r1
     e1e:	421e      	tst	r6, r3
static inline int z_impl_gpio_pin_configure(const struct device *port,
     e20:	4604      	mov	r4, r0
     e22:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e24:	d10e      	bne.n	e44 <z_impl_gpio_pin_configure.constprop.0+0x38>
     e26:	490e      	ldr	r1, [pc, #56]	; (e60 <z_impl_gpio_pin_configure.constprop.0+0x54>)
     e28:	4a0e      	ldr	r2, [pc, #56]	; (e64 <z_impl_gpio_pin_configure.constprop.0+0x58>)
     e2a:	480f      	ldr	r0, [pc, #60]	; (e68 <z_impl_gpio_pin_configure.constprop.0+0x5c>)
     e2c:	f240 23fd 	movw	r3, #765	; 0x2fd
     e30:	f008 fc6f 	bl	9712 <printk>
     e34:	480d      	ldr	r0, [pc, #52]	; (e6c <z_impl_gpio_pin_configure.constprop.0+0x60>)
     e36:	f008 fc6c 	bl	9712 <printk>
     e3a:	480a      	ldr	r0, [pc, #40]	; (e64 <z_impl_gpio_pin_configure.constprop.0+0x58>)
     e3c:	f240 21fd 	movw	r1, #765	; 0x2fd
     e40:	f008 fb64 	bl	950c <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     e44:	683b      	ldr	r3, [r7, #0]
     e46:	ea23 0606 	bic.w	r6, r3, r6
     e4a:	603e      	str	r6, [r7, #0]
	}

	return api->pin_configure(port, pin, flags);
     e4c:	f8d8 3000 	ldr.w	r3, [r8]
     e50:	4629      	mov	r1, r5
     e52:	4620      	mov	r0, r4
     e54:	f44f 7288 	mov.w	r2, #272	; 0x110
}
     e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
     e5c:	4718      	bx	r3
     e5e:	bf00      	nop
     e60:	0000a966 	.word	0x0000a966
     e64:	0000a93c 	.word	0x0000a93c
     e68:	0000a9a4 	.word	0x0000a9a4
     e6c:	0000a9c1 	.word	0x0000a9c1

00000e70 <z_impl_gpio_pin_interrupt_configure.constprop.0>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e70:	6843      	ldr	r3, [r0, #4]
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
     e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e76:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
     e78:	6887      	ldr	r7, [r0, #8]
	const struct gpio_driver_data *const data =
     e7a:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e7e:	2601      	movs	r6, #1
     e80:	408e      	lsls	r6, r1
     e82:	421e      	tst	r6, r3
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
     e84:	4604      	mov	r4, r0
     e86:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e88:	d10e      	bne.n	ea8 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x38>
     e8a:	4910      	ldr	r1, [pc, #64]	; (ecc <z_impl_gpio_pin_interrupt_configure.constprop.0+0x5c>)
     e8c:	4a10      	ldr	r2, [pc, #64]	; (ed0 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x60>)
     e8e:	4811      	ldr	r0, [pc, #68]	; (ed4 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x64>)
     e90:	f240 239d 	movw	r3, #669	; 0x29d
     e94:	f008 fc3d 	bl	9712 <printk>
     e98:	480f      	ldr	r0, [pc, #60]	; (ed8 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x68>)
     e9a:	f008 fc3a 	bl	9712 <printk>
     e9e:	480c      	ldr	r0, [pc, #48]	; (ed0 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x60>)
     ea0:	f240 219d 	movw	r1, #669	; 0x29d
     ea4:	f008 fb32 	bl	950c <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     ea8:	f8d8 3000 	ldr.w	r3, [r8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     eac:	421e      	tst	r6, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
     eae:	69be      	ldr	r6, [r7, #24]
     eb0:	4629      	mov	r1, r5
     eb2:	4620      	mov	r0, r4
     eb4:	46b4      	mov	ip, r6
     eb6:	bf18      	it	ne
     eb8:	f44f 3300 	movne.w	r3, #131072	; 0x20000
}
     ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
     ec0:	bf08      	it	eq
     ec2:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
     ec6:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
     eca:	4760      	bx	ip
     ecc:	0000a966 	.word	0x0000a966
     ed0:	0000a93c 	.word	0x0000a93c
     ed4:	0000a9a4 	.word	0x0000a9a4
     ed8:	0000a9c1 	.word	0x0000a9c1

00000edc <thread_CONTROL_code>:

    }
}

void thread_CONTROL_code(void *argA,void *argB,void *argC)
{
     edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t diff=0;
    uint32_t actualTime=0;
    int currentPeriod=0;

    printk("Thread CONTROL init\n");
     ee0:	483c      	ldr	r0, [pc, #240]	; (fd4 <thread_CONTROL_code+0xf8>)

    while(1){
        k_sem_take(&sem_filter2control, K_FOREVER);
     ee2:	4e3d      	ldr	r6, [pc, #244]	; (fd8 <thread_CONTROL_code+0xfc>)
        actualTime=days*10000+hours*100+minutes;
        
        int currentPeriod=-1;

        for(int j=0;j<period_n;j++){
            if(actualTime>=start_time[j] && actualTime<stop_time[j]){
     ee4:	4d3d      	ldr	r5, [pc, #244]	; (fdc <thread_CONTROL_code+0x100>)
    printk("Thread CONTROL init\n");
     ee6:	f008 fc14 	bl	9712 <printk>
    uint16_t diff=0;
     eea:	2400      	movs	r4, #0
        k_sem_take(&sem_filter2control, K_FOREVER);
     eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     ef4:	4630      	mov	r0, r6
     ef6:	f008 fb01 	bl	94fc <k_sem_take.constprop.0>
        printk("Task CONTROL at time: %lld ms\t",k_uptime_get());
     efa:	f008 fadc 	bl	94b6 <k_uptime_get>
     efe:	4602      	mov	r2, r0
     f00:	460b      	mov	r3, r1
     f02:	4837      	ldr	r0, [pc, #220]	; (fe0 <thread_CONTROL_code+0x104>)
     f04:	f008 fc05 	bl	9712 <printk>
        actualTime=days*10000+hours*100+minutes;
     f08:	4b36      	ldr	r3, [pc, #216]	; (fe4 <thread_CONTROL_code+0x108>)
            if(actualTime>=start_time[j] && actualTime<stop_time[j]){
     f0a:	4837      	ldr	r0, [pc, #220]	; (fe8 <thread_CONTROL_code+0x10c>)
        actualTime=days*10000+hours*100+minutes;
     f0c:	781a      	ldrb	r2, [r3, #0]
     f0e:	4b37      	ldr	r3, [pc, #220]	; (fec <thread_CONTROL_code+0x110>)
     f10:	781b      	ldrb	r3, [r3, #0]
     f12:	2164      	movs	r1, #100	; 0x64
     f14:	fb13 f301 	smulbb	r3, r3, r1
     f18:	f242 7110 	movw	r1, #10000	; 0x2710
     f1c:	fb01 3202 	mla	r2, r1, r2, r3
     f20:	4b33      	ldr	r3, [pc, #204]	; (ff0 <thread_CONTROL_code+0x114>)
     f22:	781b      	ldrb	r3, [r3, #0]
     f24:	441a      	add	r2, r3
        for(int j=0;j<period_n;j++){
     f26:	4b33      	ldr	r3, [pc, #204]	; (ff4 <thread_CONTROL_code+0x118>)
        int currentPeriod=-1;
     f28:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
        for(int j=0;j<period_n;j++){
     f2c:	8819      	ldrh	r1, [r3, #0]
     f2e:	2300      	movs	r3, #0
     f30:	4299      	cmp	r1, r3
     f32:	dc3b      	bgt.n	fac <thread_CONTROL_code+0xd0>
                currentPeriod=j;
                j=period_n;
            }
        }

        printk("CurrentPeriod: %d\t",currentPeriod);
     f34:	4830      	ldr	r0, [pc, #192]	; (ff8 <thread_CONTROL_code+0x11c>)
     f36:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
     f3a:	4f30      	ldr	r7, [pc, #192]	; (ffc <thread_CONTROL_code+0x120>)
     f3c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
     f40:	4651      	mov	r1, sl
     f42:	f008 fbe6 	bl	9712 <printk>

        if(currentPeriod!=-1){
     f46:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
     f4a:	d040      	beq.n	fce <thread_CONTROL_code+0xf2>
            printk("Intensity: %d %\t",intensity[currentPeriod]);
     f4c:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
     f50:	482b      	ldr	r0, [pc, #172]	; (1000 <CONFIG_FPROTECT_BLOCK_SIZE>)
     f52:	f83b 101a 	ldrh.w	r1, [fp, sl, lsl #1]
     f56:	f008 fbdc 	bl	9712 <printk>

            /* Set the intensity value of the LED */
            if(output-(intensity[currentPeriod]*1023/100)>=2 && diff>0){
     f5a:	f8b8 2000 	ldrh.w	r2, [r8]
     f5e:	f83b 301a 	ldrh.w	r3, [fp, sl, lsl #1]
     f62:	f06f 0163 	mvn.w	r1, #99	; 0x63
     f66:	ebc3 2383 	rsb	r3, r3, r3, lsl #10
     f6a:	fb93 f3f1 	sdiv	r3, r3, r1
     f6e:	4413      	add	r3, r2
     f70:	2b01      	cmp	r3, #1
     f72:	dd27      	ble.n	fc4 <thread_CONTROL_code+0xe8>
     f74:	b10c      	cbz	r4, f7a <thread_CONTROL_code+0x9e>
                diff--;
     f76:	3c01      	subs	r4, #1
            }
            else if(output-(intensity[currentPeriod]*1023/100)<2 && diff<1024){
                diff++;
     f78:	b2a4      	uxth	r4, r4
            }

            if(output>0){
     f7a:	b13a      	cbz	r2, f8c <thread_CONTROL_code+0xb0>
                highLevel_us=pwmPeriod_us*(diff)/1023;
     f7c:	f8b9 3000 	ldrh.w	r3, [r9]
     f80:	f240 32ff 	movw	r2, #1023	; 0x3ff
     f84:	4363      	muls	r3, r4
     f86:	fb93 f3f2 	sdiv	r3, r3, r2
            }
        }
        else{
            highLevel_us=0;
     f8a:	803b      	strh	r3, [r7, #0]
        }
        
        
        /* Safety value of PWM */
        if(highLevel_us>pwmPeriod_us){
     f8c:	883a      	ldrh	r2, [r7, #0]
     f8e:	f8b9 3000 	ldrh.w	r3, [r9]
        }
        else if(highLevel_us<0){
            highLevel_us=0;
        }
        
        printk("Output= %d \t diff= %d\n",output,diff);
     f92:	f8b8 1000 	ldrh.w	r1, [r8]
     f96:	481b      	ldr	r0, [pc, #108]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
        if(highLevel_us>pwmPeriod_us){
     f98:	429a      	cmp	r2, r3
        printk("Output= %d \t diff= %d\n",output,diff);
     f9a:	4622      	mov	r2, r4
            highLevel_us=pwmPeriod_us;
     f9c:	bf88      	it	hi
     f9e:	803b      	strhhi	r3, [r7, #0]
        printk("Output= %d \t diff= %d\n",output,diff);
     fa0:	f008 fbb7 	bl	9712 <printk>

        k_sem_give(&sem_manControl2pwm);
     fa4:	4818      	ldr	r0, [pc, #96]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     fa6:	f008 fa84 	bl	94b2 <k_sem_give>
    while(1){
     faa:	e79f      	b.n	eec <thread_CONTROL_code+0x10>
            if(actualTime>=start_time[j] && actualTime<stop_time[j]){
     fac:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
     fb0:	4297      	cmp	r7, r2
     fb2:	d805      	bhi.n	fc0 <thread_CONTROL_code+0xe4>
     fb4:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
     fb8:	4297      	cmp	r7, r2
     fba:	bf84      	itt	hi
     fbc:	469a      	movhi	sl, r3
     fbe:	460b      	movhi	r3, r1
        for(int j=0;j<period_n;j++){
     fc0:	3301      	adds	r3, #1
     fc2:	e7b5      	b.n	f30 <thread_CONTROL_code+0x54>
            else if(output-(intensity[currentPeriod]*1023/100)<2 && diff<1024){
     fc4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
     fc8:	d2d7      	bcs.n	f7a <thread_CONTROL_code+0x9e>
                diff++;
     fca:	3401      	adds	r4, #1
     fcc:	e7d4      	b.n	f78 <thread_CONTROL_code+0x9c>
            highLevel_us=0;
     fce:	2300      	movs	r3, #0
     fd0:	e7db      	b.n	f8a <thread_CONTROL_code+0xae>
     fd2:	bf00      	nop
     fd4:	0000a9d3 	.word	0x0000a9d3
     fd8:	200007d4 	.word	0x200007d4
     fdc:	20000fea 	.word	0x20000fea
     fe0:	0000a9e8 	.word	0x0000a9e8
     fe4:	2000117e 	.word	0x2000117e
     fe8:	200010b2 	.word	0x200010b2
     fec:	20001180 	.word	0x20001180
     ff0:	20001181 	.word	0x20001181
     ff4:	20000fd2 	.word	0x20000fd2
     ff8:	0000aa07 	.word	0x0000aa07
     ffc:	20000f04 	.word	0x20000f04
    1000:	0000aa1a 	.word	0x0000aa1a
    1004:	0000aa2b 	.word	0x0000aa2b
    1008:	200007ec 	.word	0x200007ec
    100c:	20000fd0 	.word	0x20000fd0
    1010:	20000220 	.word	0x20000220
    1014:	20000f06 	.word	0x20000f06

00001018 <thread_AUTOMATIC_code>:
{
    1018:	b5f0      	push	{r4, r5, r6, r7, lr}
    printk("Thread AUTOMATIC init\n");
    101a:	4827      	ldr	r0, [pc, #156]	; (10b8 <thread_AUTOMATIC_code+0xa0>)
        k_sem_take(&sem_a2automatic,  K_FOREVER);
    101c:	4e27      	ldr	r6, [pc, #156]	; (10bc <thread_AUTOMATIC_code+0xa4>)
        printk("Task AUTOMATIC at time: %lld ms\t",k_uptime_get());
    101e:	4f28      	ldr	r7, [pc, #160]	; (10c0 <thread_AUTOMATIC_code+0xa8>)
	const struct adc_sequence sequence = {
    1020:	4d28      	ldr	r5, [pc, #160]	; (10c4 <thread_AUTOMATIC_code+0xac>)
{
    1022:	b087      	sub	sp, #28
    printk("Thread AUTOMATIC init\n");
    1024:	f008 fb75 	bl	9712 <printk>
        k_sem_take(&sem_a2automatic,  K_FOREVER);
    1028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    102c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1030:	4630      	mov	r0, r6
    1032:	f008 fa63 	bl	94fc <k_sem_take.constprop.0>
        printk("Task AUTOMATIC at time: %lld ms\t",k_uptime_get());
    1036:	f008 fa3e 	bl	94b6 <k_uptime_get>
    103a:	460b      	mov	r3, r1
    103c:	4602      	mov	r2, r0
    103e:	4638      	mov	r0, r7
    1040:	f008 fb67 	bl	9712 <printk>
	const struct adc_sequence sequence = {
    1044:	2214      	movs	r2, #20
    1046:	2100      	movs	r1, #0
    1048:	a801      	add	r0, sp, #4
    104a:	f008 fd54 	bl	9af6 <memset>
    104e:	2302      	movs	r3, #2
    1050:	e9cd 3502 	strd	r3, r5, [sp, #8]
    1054:	9304      	str	r3, [sp, #16]
    1056:	230a      	movs	r3, #10
    1058:	f88d 3014 	strb.w	r3, [sp, #20]
	if (adc_dev == NULL) {
    105c:	4b1a      	ldr	r3, [pc, #104]	; (10c8 <thread_AUTOMATIC_code+0xb0>)
    105e:	6818      	ldr	r0, [r3, #0]
    1060:	b948      	cbnz	r0, 1076 <thread_AUTOMATIC_code+0x5e>
            printk("adc_sample(): error, must bind to adc first \n\r");
    1062:	481a      	ldr	r0, [pc, #104]	; (10cc <thread_AUTOMATIC_code+0xb4>)
    1064:	f008 fb55 	bl	9712 <printk>
            return -1;
    1068:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            printk("adc_sample() failed with error code %d\n\r",err);
    106c:	4818      	ldr	r0, [pc, #96]	; (10d0 <thread_AUTOMATIC_code+0xb8>)
    106e:	4621      	mov	r1, r4
                printk("Sample: %4u\n",sample);
    1070:	f008 fb4f 	bl	9712 <printk>
    1074:	e00f      	b.n	1096 <thread_AUTOMATIC_code+0x7e>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
    1076:	6883      	ldr	r3, [r0, #8]
    1078:	a901      	add	r1, sp, #4
    107a:	685b      	ldr	r3, [r3, #4]
    107c:	4798      	blx	r3
	if (ret) {
    107e:	4604      	mov	r4, r0
    1080:	b168      	cbz	r0, 109e <thread_AUTOMATIC_code+0x86>
            printk("adc_read() failed with code %d\n", ret);
    1082:	4601      	mov	r1, r0
    1084:	4813      	ldr	r0, [pc, #76]	; (10d4 <thread_AUTOMATIC_code+0xbc>)
    1086:	f008 fb44 	bl	9712 <printk>
        if(err) {
    108a:	e7ef      	b.n	106c <thread_AUTOMATIC_code+0x54>
                printk("adc reading out of range\n\r");
    108c:	4812      	ldr	r0, [pc, #72]	; (10d8 <thread_AUTOMATIC_code+0xc0>)
    108e:	f008 fb40 	bl	9712 <printk>
                sample=0;  /* Safety value */
    1092:	4b12      	ldr	r3, [pc, #72]	; (10dc <thread_AUTOMATIC_code+0xc4>)
    1094:	801c      	strh	r4, [r3, #0]
        k_sem_give(&sem_auto2filter);
    1096:	4812      	ldr	r0, [pc, #72]	; (10e0 <thread_AUTOMATIC_code+0xc8>)
    1098:	f008 fa0b 	bl	94b2 <k_sem_give>
    while(1){
    109c:	e7c4      	b.n	1028 <thread_AUTOMATIC_code+0x10>
            if(adc_sample_buffer[0] > 1023) {
    109e:	882b      	ldrh	r3, [r5, #0]
    10a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    10a4:	d2f2      	bcs.n	108c <thread_AUTOMATIC_code+0x74>
                sample=1023-adc_sample_buffer[0];
    10a6:	f5c3 717f 	rsb	r1, r3, #1020	; 0x3fc
    10aa:	3103      	adds	r1, #3
    10ac:	4b0b      	ldr	r3, [pc, #44]	; (10dc <thread_AUTOMATIC_code+0xc4>)
                printk("Sample: %4u\n",sample);
    10ae:	480d      	ldr	r0, [pc, #52]	; (10e4 <thread_AUTOMATIC_code+0xcc>)
                sample=1023-adc_sample_buffer[0];
    10b0:	b209      	sxth	r1, r1
    10b2:	8019      	strh	r1, [r3, #0]
                printk("Sample: %4u\n",sample);
    10b4:	e7dc      	b.n	1070 <thread_AUTOMATIC_code+0x58>
    10b6:	bf00      	nop
    10b8:	0000aa8b 	.word	0x0000aa8b
    10bc:	2000078c 	.word	0x2000078c
    10c0:	0000aaa2 	.word	0x0000aaa2
    10c4:	20000eec 	.word	0x20000eec
    10c8:	20000758 	.word	0x20000758
    10cc:	0000aac3 	.word	0x0000aac3
    10d0:	0000ab12 	.word	0x0000ab12
    10d4:	0000aaf2 	.word	0x0000aaf2
    10d8:	0000ab3b 	.word	0x0000ab3b
    10dc:	20000fd4 	.word	0x20000fd4
    10e0:	200007bc 	.word	0x200007bc
    10e4:	0000ab56 	.word	0x0000ab56

000010e8 <thread_MANUAL_code>:
{
    10e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t step=pwmPeriod_us/20;
    10ec:	4e1e      	ldr	r6, [pc, #120]	; (1168 <thread_MANUAL_code+0x80>)
    printk("Thread MANUAL init\n");
    10ee:	481f      	ldr	r0, [pc, #124]	; (116c <thread_MANUAL_code+0x84>)
    uint16_t step=pwmPeriod_us/20;
    10f0:	8835      	ldrh	r5, [r6, #0]
        if(up==1){
    10f2:	4f1f      	ldr	r7, [pc, #124]	; (1170 <thread_MANUAL_code+0x88>)
        k_sem_take(&sem_a2manual,  K_FOREVER);
    10f4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1188 <thread_MANUAL_code+0xa0>
    uint16_t step=pwmPeriod_us/20;
    10f8:	2314      	movs	r3, #20
    10fa:	fbb5 f5f3 	udiv	r5, r5, r3
    printk("Thread MANUAL init\n");
    10fe:	f008 fb08 	bl	9712 <printk>
    1102:	46b8      	mov	r8, r7
        k_sem_take(&sem_a2manual,  K_FOREVER);
    1104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    110c:	4648      	mov	r0, r9
    110e:	f008 f9f5 	bl	94fc <k_sem_take.constprop.0>
        printk("Task MANUAL at time: %lld ms\t\t",k_uptime_get());
    1112:	f008 f9d0 	bl	94b6 <k_uptime_get>
    1116:	4602      	mov	r2, r0
    1118:	460b      	mov	r3, r1
    111a:	4816      	ldr	r0, [pc, #88]	; (1174 <thread_MANUAL_code+0x8c>)
    111c:	4c16      	ldr	r4, [pc, #88]	; (1178 <thread_MANUAL_code+0x90>)
    111e:	f008 faf8 	bl	9712 <printk>
        if(up==1){
    1122:	783b      	ldrb	r3, [r7, #0]
    1124:	b1a3      	cbz	r3, 1150 <thread_MANUAL_code+0x68>
              if(highLevel_us<=pwmPeriod_us-step){
    1126:	8832      	ldrh	r2, [r6, #0]
    1128:	8823      	ldrh	r3, [r4, #0]
    112a:	1b52      	subs	r2, r2, r5
    112c:	4293      	cmp	r3, r2
                  highLevel_us+=step;
    112e:	bfdc      	itt	le
    1130:	195b      	addle	r3, r3, r5
    1132:	8023      	strhle	r3, [r4, #0]
              up=0;
    1134:	2300      	movs	r3, #0
    1136:	f888 3000 	strb.w	r3, [r8]
              k_msleep(5);
    113a:	2005      	movs	r0, #5
    113c:	f008 f9c9 	bl	94d2 <k_msleep>
          printk("High level period is: %d us \n",highLevel_us);
    1140:	8821      	ldrh	r1, [r4, #0]
    1142:	480e      	ldr	r0, [pc, #56]	; (117c <thread_MANUAL_code+0x94>)
    1144:	f008 fae5 	bl	9712 <printk>
         k_sem_give(&sem_manControl2pwm);
    1148:	480d      	ldr	r0, [pc, #52]	; (1180 <thread_MANUAL_code+0x98>)
    114a:	f008 f9b2 	bl	94b2 <k_sem_give>
    while(1){
    114e:	e7d9      	b.n	1104 <thread_MANUAL_code+0x1c>
          else if(down==1){
    1150:	4a0c      	ldr	r2, [pc, #48]	; (1184 <thread_MANUAL_code+0x9c>)
    1152:	7813      	ldrb	r3, [r2, #0]
    1154:	2b00      	cmp	r3, #0
    1156:	d0f3      	beq.n	1140 <thread_MANUAL_code+0x58>
    1158:	8823      	ldrh	r3, [r4, #0]
              if(highLevel_us>0){  
    115a:	b10b      	cbz	r3, 1160 <thread_MANUAL_code+0x78>
                  highLevel_us-=step;
    115c:	1b5b      	subs	r3, r3, r5
    115e:	8023      	strh	r3, [r4, #0]
              down=0;
    1160:	2300      	movs	r3, #0
    1162:	7013      	strb	r3, [r2, #0]
    1164:	e7e9      	b.n	113a <thread_MANUAL_code+0x52>
    1166:	bf00      	nop
    1168:	20000220 	.word	0x20000220
    116c:	0000ab63 	.word	0x0000ab63
    1170:	20001185 	.word	0x20001185
    1174:	0000ab77 	.word	0x0000ab77
    1178:	20000f04 	.word	0x20000f04
    117c:	0000ab96 	.word	0x0000ab96
    1180:	200007ec 	.word	0x200007ec
    1184:	2000117f 	.word	0x2000117f
    1188:	200007a4 	.word	0x200007a4

0000118c <thread_PWM_code>:
    }

}

void thread_PWM_code(void *argA,void *argB,void *argC)
{
    118c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1190:	b087      	sub	sp, #28
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1192:	4836      	ldr	r0, [pc, #216]	; (126c <thread_PWM_code+0xe0>)
    1194:	f004 ff54 	bl	6040 <z_impl_device_get_binding>
    
    int ret=0;                              /* Generic return value variable */

    /* Return pointer to device structure with the given name */
    pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
    if (pwm0_dev == NULL) {
    1198:	4604      	mov	r4, r0
    119a:	b928      	cbnz	r0, 11a8 <thread_PWM_code+0x1c>
        printk("Error: Failed to bind to PWM0 r\n");
    119c:	4834      	ldr	r0, [pc, #208]	; (1270 <thread_PWM_code+0xe4>)
    119e:	f008 fab8 	bl	9712 <printk>
        if(dark){
            dark=false;
        }

    }
}
    11a2:	b007      	add	sp, #28
    11a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    printk("Thread PWM init\n\n");
    11a8:	4832      	ldr	r0, [pc, #200]	; (1274 <thread_PWM_code+0xe8>)
    11aa:	f008 fab2 	bl	9712 <printk>
        k_sem_take(&sem_manControl2pwm,  K_FOREVER);
    11ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    11b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    11b6:	4830      	ldr	r0, [pc, #192]	; (1278 <thread_PWM_code+0xec>)
    11b8:	f008 f9a0 	bl	94fc <k_sem_take.constprop.0>
        printk("Task PWM at time: %lld ms\n\n",k_uptime_get());
    11bc:	f008 f97b 	bl	94b6 <k_uptime_get>
    11c0:	4602      	mov	r2, r0
    11c2:	460b      	mov	r3, r1
    11c4:	482d      	ldr	r0, [pc, #180]	; (127c <thread_PWM_code+0xf0>)
    11c6:	f008 faa4 	bl	9712 <printk>
        ret = pwm_pin_set_usec(pwm0_dev, BOARDLED_PIN,
    11ca:	4b2d      	ldr	r3, [pc, #180]	; (1280 <thread_PWM_code+0xf4>)
    11cc:	881f      	ldrh	r7, [r3, #0]
		      pwmPeriod_us,(unsigned int)(pwmPeriod_us-highLevel_us), PWM_POLARITY_NORMAL);
    11ce:	4b2d      	ldr	r3, [pc, #180]	; (1284 <thread_PWM_code+0xf8>)
    11d0:	f8b3 8000 	ldrh.w	r8, [r3]
    11d4:	eba7 0808 	sub.w	r8, r7, r8
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
    11d8:	68a3      	ldr	r3, [r4, #8]
    11da:	aa04      	add	r2, sp, #16
    11dc:	685b      	ldr	r3, [r3, #4]
    11de:	210d      	movs	r1, #13
    11e0:	4620      	mov	r0, r4
    11e2:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
    11e4:	4605      	mov	r5, r0
    11e6:	b128      	cbz	r0, 11f4 <thread_PWM_code+0x68>
		return -EIO;
    11e8:	f06f 0104 	mvn.w	r1, #4
            printk("Error %d: failed to set pulse width\n", ret);
    11ec:	4826      	ldr	r0, [pc, #152]	; (1288 <thread_PWM_code+0xfc>)
    11ee:	f008 fa90 	bl	9712 <printk>
            return;
    11f2:	e7d6      	b.n	11a2 <thread_PWM_code+0x16>
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    11f4:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
    11f8:	fba7 ab06 	umull	sl, fp, r7, r6
    11fc:	fb07 bb03 	mla	fp, r7, r3, fp
    1200:	4a22      	ldr	r2, [pc, #136]	; (128c <thread_PWM_code+0x100>)
    1202:	9303      	str	r3, [sp, #12]
    1204:	4650      	mov	r0, sl
    1206:	2300      	movs	r3, #0
    1208:	4659      	mov	r1, fp
    120a:	f7ff fbb7 	bl	97c <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
    120e:	4b20      	ldr	r3, [pc, #128]	; (1290 <thread_PWM_code+0x104>)
    1210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1214:	455b      	cmp	r3, fp
    1216:	bf08      	it	eq
    1218:	4552      	cmpeq	r2, sl
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    121a:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
    121c:	d202      	bcs.n	1224 <thread_PWM_code+0x98>
		return -ENOTSUP;
    121e:	f06f 0185 	mvn.w	r1, #133	; 0x85
    1222:	e7e3      	b.n	11ec <thread_PWM_code+0x60>
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
    1224:	9b03      	ldr	r3, [sp, #12]
    1226:	4a19      	ldr	r2, [pc, #100]	; (128c <thread_PWM_code+0x100>)
    1228:	fba8 6706 	umull	r6, r7, r8, r6
    122c:	fb08 7703 	mla	r7, r8, r3, r7
    1230:	4630      	mov	r0, r6
    1232:	2300      	movs	r3, #0
    1234:	4639      	mov	r1, r7
    1236:	f7ff fba1 	bl	97c <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
    123a:	4a15      	ldr	r2, [pc, #84]	; (1290 <thread_PWM_code+0x104>)
    123c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1240:	42ba      	cmp	r2, r7
    1242:	bf08      	it	eq
    1244:	42b1      	cmpeq	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
    1246:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
    1248:	d3e9      	bcc.n	121e <thread_PWM_code+0x92>
	return api->pin_set(dev, pwm, period, pulse, flags);
    124a:	68a2      	ldr	r2, [r4, #8]
    124c:	9500      	str	r5, [sp, #0]
    124e:	6815      	ldr	r5, [r2, #0]
    1250:	210d      	movs	r1, #13
    1252:	464a      	mov	r2, r9
    1254:	4620      	mov	r0, r4
    1256:	47a8      	blx	r5
        if (ret) {
    1258:	4601      	mov	r1, r0
    125a:	2800      	cmp	r0, #0
    125c:	d1c6      	bne.n	11ec <thread_PWM_code+0x60>
        if(dark){
    125e:	4b0d      	ldr	r3, [pc, #52]	; (1294 <thread_PWM_code+0x108>)
    1260:	781a      	ldrb	r2, [r3, #0]
    1262:	2a00      	cmp	r2, #0
    1264:	d0a3      	beq.n	11ae <thread_PWM_code+0x22>
            dark=false;
    1266:	7018      	strb	r0, [r3, #0]
    while(1){
    1268:	e7a1      	b.n	11ae <thread_PWM_code+0x22>
    126a:	bf00      	nop
    126c:	0000abb4 	.word	0x0000abb4
    1270:	0000abba 	.word	0x0000abba
    1274:	0000abdb 	.word	0x0000abdb
    1278:	200007ec 	.word	0x200007ec
    127c:	0000abed 	.word	0x0000abed
    1280:	20000220 	.word	0x20000220
    1284:	20000f04 	.word	0x20000f04
    1288:	0000ac09 	.word	0x0000ac09
    128c:	000f4240 	.word	0x000f4240
    1290:	000f423f 	.word	0x000f423f
    1294:	2000117d 	.word	0x2000117d

00001298 <printDays>:
    switch(day){
    1298:	2806      	cmp	r0, #6
    129a:	d814      	bhi.n	12c6 <printDays+0x2e>
    129c:	e8df f000 	tbb	[pc, r0]
    12a0:	0b090704 	.word	0x0b090704
    12a4:	0f0d      	.short	0x0f0d
    12a6:	11          	.byte	0x11
    12a7:	00          	.byte	0x00
		printk("DAY: SUNDAY\t");
    12a8:	4807      	ldr	r0, [pc, #28]	; (12c8 <printDays+0x30>)
		printk("DAY: SATURDAY\t");
    12aa:	f008 ba32 	b.w	9712 <printk>
		printk("DAY: MONDEY\t");
    12ae:	4807      	ldr	r0, [pc, #28]	; (12cc <printDays+0x34>)
    12b0:	e7fb      	b.n	12aa <printDays+0x12>
		printk("DAY: TUESDAY\t");
    12b2:	4807      	ldr	r0, [pc, #28]	; (12d0 <printDays+0x38>)
    12b4:	e7f9      	b.n	12aa <printDays+0x12>
		printk("DAY: WEDNESDAY\t");
    12b6:	4807      	ldr	r0, [pc, #28]	; (12d4 <printDays+0x3c>)
    12b8:	e7f7      	b.n	12aa <printDays+0x12>
		printk("DAY: THURSDAY\t");
    12ba:	4807      	ldr	r0, [pc, #28]	; (12d8 <printDays+0x40>)
    12bc:	e7f5      	b.n	12aa <printDays+0x12>
		printk("DAY: FRIDAY\t");
    12be:	4807      	ldr	r0, [pc, #28]	; (12dc <printDays+0x44>)
    12c0:	e7f3      	b.n	12aa <printDays+0x12>
		printk("DAY: SATURDAY\t");
    12c2:	4807      	ldr	r0, [pc, #28]	; (12e0 <printDays+0x48>)
    12c4:	e7f1      	b.n	12aa <printDays+0x12>
}
    12c6:	4770      	bx	lr
    12c8:	0000ac2e 	.word	0x0000ac2e
    12cc:	0000ac3b 	.word	0x0000ac3b
    12d0:	0000ac48 	.word	0x0000ac48
    12d4:	0000ac56 	.word	0x0000ac56
    12d8:	0000ac66 	.word	0x0000ac66
    12dc:	0000ac75 	.word	0x0000ac75
    12e0:	0000ac82 	.word	0x0000ac82

000012e4 <thread_A_code>:
{
    12e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12e8:	b087      	sub	sp, #28
    release_time = k_uptime_get() + thread_A_period;
    12ea:	f008 f8e4 	bl	94b6 <k_uptime_get>
    12ee:	f110 0364 	adds.w	r3, r0, #100	; 0x64
    12f2:	9300      	str	r3, [sp, #0]
    12f4:	f141 0300 	adc.w	r3, r1, #0
    12f8:	9301      	str	r3, [sp, #4]
    char command[15]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    12fa:	4b4f      	ldr	r3, [pc, #316]	; (1438 <thread_A_code+0x154>)
    12fc:	aa02      	add	r2, sp, #8
    12fe:	f103 0508 	add.w	r5, r3, #8
    1302:	6818      	ldr	r0, [r3, #0]
    1304:	6859      	ldr	r1, [r3, #4]
    1306:	4614      	mov	r4, r2
    1308:	c403      	stmia	r4!, {r0, r1}
    130a:	3308      	adds	r3, #8
    130c:	42ab      	cmp	r3, r5
    130e:	4622      	mov	r2, r4
    1310:	d1f7      	bne.n	1302 <thread_A_code+0x1e>
    1312:	6818      	ldr	r0, [r3, #0]
    1314:	8899      	ldrh	r1, [r3, #4]
    1316:	799b      	ldrb	r3, [r3, #6]
    1318:	6020      	str	r0, [r4, #0]
    131a:	80a1      	strh	r1, [r4, #4]
    printk("Thread A init (periodic)\n");
    131c:	4847      	ldr	r0, [pc, #284]	; (143c <thread_A_code+0x158>)
    char command[15]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    131e:	71a3      	strb	r3, [r4, #6]
    printk("Thread A init (periodic)\n");
    1320:	f008 f9f7 	bl	9712 <printk>
        seconds++;
    1324:	f8df b138 	ldr.w	fp, [pc, #312]	; 1460 <thread_A_code+0x17c>
    1328:	f8df a154 	ldr.w	sl, [pc, #340]	; 1480 <thread_A_code+0x19c>
        printk("Task A at time: %lld ms\t\t",k_uptime_get());        
    132c:	4c44      	ldr	r4, [pc, #272]	; (1440 <thread_A_code+0x15c>)
    132e:	4f45      	ldr	r7, [pc, #276]	; (1444 <thread_A_code+0x160>)
    1330:	f008 f8c1 	bl	94b6 <k_uptime_get>
    1334:	4602      	mov	r2, r0
    1336:	460b      	mov	r3, r1
    1338:	4843      	ldr	r0, [pc, #268]	; (1448 <thread_A_code+0x164>)
    133a:	f008 f9ea 	bl	9712 <printk>
        seconds++;
    133e:	f89b 3000 	ldrb.w	r3, [fp]
    1342:	3301      	adds	r3, #1
    1344:	b2db      	uxtb	r3, r3
        if(seconds==60){
    1346:	2b3c      	cmp	r3, #60	; 0x3c
            seconds=0;
    1348:	bf03      	ittte	eq
    134a:	2300      	moveq	r3, #0
    134c:	f88b 3000 	strbeq.w	r3, [fp]
            minutes+=1;
    1350:	7823      	ldrbeq	r3, [r4, #0]
        seconds++;
    1352:	f88b 3000 	strbne.w	r3, [fp]
            minutes+=1;
    1356:	bf04      	itt	eq
    1358:	3301      	addeq	r3, #1
    135a:	7023      	strbeq	r3, [r4, #0]
        if(minutes==60){
    135c:	7823      	ldrb	r3, [r4, #0]
    135e:	2b3c      	cmp	r3, #60	; 0x3c
    1360:	d104      	bne.n	136c <thread_A_code+0x88>
    1362:	783b      	ldrb	r3, [r7, #0]
            minutes=0;
    1364:	2200      	movs	r2, #0
            hours+=1;
    1366:	3301      	adds	r3, #1
            minutes=0;
    1368:	7022      	strb	r2, [r4, #0]
            hours+=1;
    136a:	703b      	strb	r3, [r7, #0]
        if(hours==24){
    136c:	783b      	ldrb	r3, [r7, #0]
    136e:	2b18      	cmp	r3, #24
    1370:	d106      	bne.n	1380 <thread_A_code+0x9c>
    1372:	f89a 3000 	ldrb.w	r3, [sl]
            hours=0;
    1376:	2200      	movs	r2, #0
            days+=1;
    1378:	3301      	adds	r3, #1
            hours=0;
    137a:	703a      	strb	r2, [r7, #0]
            days+=1;
    137c:	f88a 3000 	strb.w	r3, [sl]
        days=days%7;
    1380:	f89a 2000 	ldrb.w	r2, [sl]
    1384:	2307      	movs	r3, #7
    1386:	fbb2 f3f3 	udiv	r3, r2, r3
    138a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    138e:	1ad3      	subs	r3, r2, r3
        if(cons && dark){
    1390:	4a2e      	ldr	r2, [pc, #184]	; (144c <thread_A_code+0x168>)
        days=days%7;
    1392:	f88a 3000 	strb.w	r3, [sl]
        if(cons && dark){
    1396:	7813      	ldrb	r3, [r2, #0]
    1398:	2b00      	cmp	r3, #0
    139a:	d073      	beq.n	1484 <thread_A_code+0x1a0>
    139c:	4b2c      	ldr	r3, [pc, #176]	; (1450 <thread_A_code+0x16c>)
    139e:	781b      	ldrb	r3, [r3, #0]
    13a0:	2b00      	cmp	r3, #0
    13a2:	d06f      	beq.n	1484 <thread_A_code+0x1a0>
            highLevel_us=0;
    13a4:	4b2b      	ldr	r3, [pc, #172]	; (1454 <thread_A_code+0x170>)
            k_sem_give(&sem_manControl2pwm);
    13a6:	482c      	ldr	r0, [pc, #176]	; (1458 <thread_A_code+0x174>)
            highLevel_us=0;
    13a8:	2200      	movs	r2, #0
    13aa:	801a      	strh	r2, [r3, #0]
            k_sem_give(&sem_manControl2pwm);
    13ac:	f008 f881 	bl	94b2 <k_sem_give>
        printDays(days);
    13b0:	f89a 0000 	ldrb.w	r0, [sl]
        if(mode==1 && state==0){
    13b4:	4d29      	ldr	r5, [pc, #164]	; (145c <thread_A_code+0x178>)
        printDays(days);
    13b6:	f7ff ff6f 	bl	1298 <printDays>
        printk("TIME: %d:%d:%d\n",hours,minutes,seconds);
    13ba:	4b29      	ldr	r3, [pc, #164]	; (1460 <thread_A_code+0x17c>)
    13bc:	7822      	ldrb	r2, [r4, #0]
    13be:	781b      	ldrb	r3, [r3, #0]
    13c0:	7839      	ldrb	r1, [r7, #0]
    13c2:	4828      	ldr	r0, [pc, #160]	; (1464 <thread_A_code+0x180>)
    13c4:	4c28      	ldr	r4, [pc, #160]	; (1468 <thread_A_code+0x184>)
    13c6:	f008 f9a4 	bl	9712 <printk>
        if(mode==1 && state==0){
    13ca:	782b      	ldrb	r3, [r5, #0]
    13cc:	2b00      	cmp	r3, #0
    13ce:	f000 819a 	beq.w	1706 <thread_A_code+0x422>
    13d2:	7826      	ldrb	r6, [r4, #0]
    13d4:	2e00      	cmp	r6, #0
    13d6:	f040 8196 	bne.w	1706 <thread_A_code+0x422>
            printk("Switch to MANUAL MODE\n");
    13da:	4824      	ldr	r0, [pc, #144]	; (146c <thread_A_code+0x188>)
    13dc:	f008 f999 	bl	9712 <printk>
            highLevel_us=pwmPeriod_us/4;
    13e0:	4b23      	ldr	r3, [pc, #140]	; (1470 <thread_A_code+0x18c>)
    13e2:	4a1c      	ldr	r2, [pc, #112]	; (1454 <thread_A_code+0x170>)
    13e4:	881b      	ldrh	r3, [r3, #0]
    13e6:	089b      	lsrs	r3, r3, #2
    13e8:	8013      	strh	r3, [r2, #0]
            up=0;
    13ea:	4b22      	ldr	r3, [pc, #136]	; (1474 <thread_A_code+0x190>)
    13ec:	701e      	strb	r6, [r3, #0]
            down=0;
    13ee:	4b22      	ldr	r3, [pc, #136]	; (1478 <thread_A_code+0x194>)
    13f0:	701e      	strb	r6, [r3, #0]
            state=1;
    13f2:	2301      	movs	r3, #1
    13f4:	7023      	strb	r3, [r4, #0]
            mode=0;
    13f6:	702e      	strb	r6, [r5, #0]
        k_msleep(5);
    13f8:	2005      	movs	r0, #5
    13fa:	f008 f86a 	bl	94d2 <k_msleep>
        if(state==0){
    13fe:	7823      	ldrb	r3, [r4, #0]
    1400:	2b00      	cmp	r3, #0
    1402:	f040 8191 	bne.w	1728 <thread_A_code+0x444>
            k_sem_give(&sem_a2automatic);
    1406:	481d      	ldr	r0, [pc, #116]	; (147c <thread_A_code+0x198>)
            k_sem_give(&sem_a2manual);
    1408:	f008 f853 	bl	94b2 <k_sem_give>
        fin_time = k_uptime_get();
    140c:	f008 f853 	bl	94b6 <k_uptime_get>
    1410:	4602      	mov	r2, r0
    1412:	460b      	mov	r3, r1
        if( fin_time < release_time) {
    1414:	e9dd 0100 	ldrd	r0, r1, [sp]
    1418:	4282      	cmp	r2, r0
    141a:	eb73 0101 	sbcs.w	r1, r3, r1
    141e:	da85      	bge.n	132c <thread_A_code+0x48>
            k_msleep(release_time - fin_time);
    1420:	9900      	ldr	r1, [sp, #0]
    1422:	1a88      	subs	r0, r1, r2
    1424:	f008 f855 	bl	94d2 <k_msleep>
            release_time += thread_A_period;
    1428:	9b00      	ldr	r3, [sp, #0]
    142a:	3364      	adds	r3, #100	; 0x64
    142c:	9300      	str	r3, [sp, #0]
    142e:	9b01      	ldr	r3, [sp, #4]
    1430:	f143 0300 	adc.w	r3, r3, #0
    1434:	9301      	str	r3, [sp, #4]
    1436:	e779      	b.n	132c <thread_A_code+0x48>
    1438:	0000a6e0 	.word	0x0000a6e0
    143c:	0000ac91 	.word	0x0000ac91
    1440:	20001181 	.word	0x20001181
    1444:	20001180 	.word	0x20001180
    1448:	0000acab 	.word	0x0000acab
    144c:	2000117c 	.word	0x2000117c
    1450:	2000117d 	.word	0x2000117d
    1454:	20000f04 	.word	0x20000f04
    1458:	200007ec 	.word	0x200007ec
    145c:	20001182 	.word	0x20001182
    1460:	20001183 	.word	0x20001183
    1464:	0000aeec 	.word	0x0000aeec
    1468:	20001184 	.word	0x20001184
    146c:	0000aefc 	.word	0x0000aefc
    1470:	20000220 	.word	0x20000220
    1474:	20001185 	.word	0x20001185
    1478:	2000117f 	.word	0x2000117f
    147c:	2000078c 	.word	0x2000078c
    1480:	2000117e 	.word	0x2000117e
        else if(cons && !dark){
    1484:	7813      	ldrb	r3, [r2, #0]
    1486:	2b00      	cmp	r3, #0
    1488:	d092      	beq.n	13b0 <thread_A_code+0xcc>
    148a:	4ba8      	ldr	r3, [pc, #672]	; (172c <thread_A_code+0x448>)
    148c:	7819      	ldrb	r1, [r3, #0]
    148e:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    1492:	2900      	cmp	r1, #0
    1494:	d18c      	bne.n	13b0 <thread_A_code+0xcc>
            cons=0;
    1496:	7013      	strb	r3, [r2, #0]
                command[l]=0;
    1498:	4619      	mov	r1, r3
    149a:	aa02      	add	r2, sp, #8
            for(int l=0;l<sizeof(command);l++){
    149c:	3301      	adds	r3, #1
    149e:	2b0f      	cmp	r3, #15
                command[l]=0;
    14a0:	f802 1b01 	strb.w	r1, [r2], #1
            for(int l=0;l<sizeof(command);l++){
    14a4:	d1fa      	bne.n	149c <thread_A_code+0x1b8>
            printk("\n\n\n\nDigit a string to set calendar and clock time: \n");
    14a6:	48a2      	ldr	r0, [pc, #648]	; (1730 <thread_A_code+0x44c>)
    14a8:	f008 f933 	bl	9712 <printk>
            printk("TDHHMM!\n");
    14ac:	48a1      	ldr	r0, [pc, #644]	; (1734 <thread_A_code+0x450>)
    14ae:	f008 f930 	bl	9712 <printk>
            printk("T= setting the clock time\nD= day of the week (from 0= SUN to 6= SAT)\nHH= hour of the day (0-24)\nMM= minute\n != end of the command\n");
    14b2:	48a1      	ldr	r0, [pc, #644]	; (1738 <thread_A_code+0x454>)
    14b4:	f008 f92d 	bl	9712 <printk>
            printk("Example: T51035! ---> Set the timer on friday at 10:35\n\n");
    14b8:	48a0      	ldr	r0, [pc, #640]	; (173c <thread_A_code+0x458>)
    14ba:	f008 f92a 	bl	9712 <printk>
            printk("\n\nDigit a string to set the ON/OFF periods: \n");
    14be:	48a0      	ldr	r0, [pc, #640]	; (1740 <thread_A_code+0x45c>)
    14c0:	f008 f927 	bl	9712 <printk>
            printk("SDHHMMHHMM!\n");
    14c4:	489f      	ldr	r0, [pc, #636]	; (1744 <thread_A_code+0x460>)
    14c6:	f008 f924 	bl	9712 <printk>
            printk("S= setting the ON/OFF period\nD= day of the period (from 0= SUN to 6= SAT)\nHH= hour of the day (0-24)\nMM= minute\n!= end of the command\n");
    14ca:	489f      	ldr	r0, [pc, #636]	; (1748 <thread_A_code+0x464>)
    14cc:	f008 f921 	bl	9712 <printk>
            printk("Example: S5220060500080 ---> Set the timer on friday at 10:35\n\n");
    14d0:	489e      	ldr	r0, [pc, #632]	; (174c <thread_A_code+0x468>)
    14d2:	f008 f91e 	bl	9712 <printk>
            printk("Digit the string:\t");
    14d6:	489e      	ldr	r0, [pc, #632]	; (1750 <thread_A_code+0x46c>)
    14d8:	f008 f91b 	bl	9712 <printk>
            currentTime=k_uptime_get(); /* Save the current time */
    14dc:	f007 ffeb 	bl	94b6 <k_uptime_get>
    14e0:	f04f 0800 	mov.w	r8, #0
    14e4:	4605      	mov	r5, r0
    14e6:	4689      	mov	r9, r1
                c = console_getchar();
    14e8:	f000 fe78 	bl	21dc <console_getchar>
    14ec:	b2c6      	uxtb	r6, r0
                console_putchar(c);
    14ee:	4630      	mov	r0, r6
    14f0:	f000 fe66 	bl	21c0 <console_putchar>
		command[i]=c;
    14f4:	ab06      	add	r3, sp, #24
    14f6:	fa13 f388 	uxtah	r3, r3, r8
            while(c!='!'){
    14fa:	2e21      	cmp	r6, #33	; 0x21
		command[i]=c;
    14fc:	f803 6c10 	strb.w	r6, [r3, #-16]
            while(c!='!'){
    1500:	f108 0801 	add.w	r8, r8, #1
    1504:	d1f0      	bne.n	14e8 <thread_A_code+0x204>
            if(command[0]=='S'){
    1506:	f89d 3008 	ldrb.w	r3, [sp, #8]
    150a:	2b53      	cmp	r3, #83	; 0x53
    150c:	f040 80d2 	bne.w	16b4 <thread_A_code+0x3d0>
                start_time[period_n]= char2int(command[1])*10000 + char2int(command[2])*1000 + char2int(command[3])*100 + char2int(command[4])*10+ char2int(command[5]);
    1510:	f89d 0009 	ldrb.w	r0, [sp, #9]
    1514:	4e8f      	ldr	r6, [pc, #572]	; (1754 <thread_A_code+0x470>)
    1516:	f007 fff7 	bl	9508 <char2int>
    151a:	4603      	mov	r3, r0
    151c:	f89d 000a 	ldrb.w	r0, [sp, #10]
    1520:	f007 fff2 	bl	9508 <char2int>
    1524:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    1528:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    152c:	ebc0 1240 	rsb	r2, r0, r0, lsl #5
    1530:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    1534:	00c0      	lsls	r0, r0, #3
    1536:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    153a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    153e:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1542:	b21b      	sxth	r3, r3
    1544:	f007 ffe0 	bl	9508 <char2int>
    1548:	4680      	mov	r8, r0
    154a:	f89d 000b 	ldrb.w	r0, [sp, #11]
    154e:	f007 ffdb 	bl	9508 <char2int>
    1552:	4602      	mov	r2, r0
    1554:	f89d 000d 	ldrb.w	r0, [sp, #13]
    1558:	f007 ffd6 	bl	9508 <char2int>
    155c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    1560:	4403      	add	r3, r0
    1562:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1566:	eb03 0348 	add.w	r3, r3, r8, lsl #1
    156a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    156e:	8831      	ldrh	r1, [r6, #0]
		stop_time[period_n]= char2int(command[6])*10000 + char2int(command[7])*1000 + char2int(command[8])*100 + char2int(command[9])*10+ char2int(command[10]);
    1570:	f89d 000e 	ldrb.w	r0, [sp, #14]
                start_time[period_n]= char2int(command[1])*10000 + char2int(command[2])*1000 + char2int(command[3])*100 + char2int(command[4])*10+ char2int(command[5]);
    1574:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    1578:	4b77      	ldr	r3, [pc, #476]	; (1758 <thread_A_code+0x474>)
    157a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		stop_time[period_n]= char2int(command[6])*10000 + char2int(command[7])*1000 + char2int(command[8])*100 + char2int(command[9])*10+ char2int(command[10]);
    157e:	f007 ffc3 	bl	9508 <char2int>
    1582:	4603      	mov	r3, r0
    1584:	f89d 000f 	ldrb.w	r0, [sp, #15]
    1588:	f007 ffbe 	bl	9508 <char2int>
    158c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    1590:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1594:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1598:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
    159c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    15a0:	00c3      	lsls	r3, r0, #3
    15a2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    15a6:	f89d 0011 	ldrb.w	r0, [sp, #17]
    15aa:	b21b      	sxth	r3, r3
    15ac:	f007 ffac 	bl	9508 <char2int>
    15b0:	4680      	mov	r8, r0
    15b2:	f89d 0010 	ldrb.w	r0, [sp, #16]
    15b6:	f007 ffa7 	bl	9508 <char2int>
    15ba:	4602      	mov	r2, r0
    15bc:	f89d 0012 	ldrb.w	r0, [sp, #18]
    15c0:	f007 ffa2 	bl	9508 <char2int>
    15c4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    15c8:	4403      	add	r3, r0
    15ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    15ce:	eb03 0348 	add.w	r3, r3, r8, lsl #1
    15d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    15d6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    15da:	4b60      	ldr	r3, [pc, #384]	; (175c <thread_A_code+0x478>)
		intensity[period_n]= char2int(command[11])*100 + char2int(command[12])*10 + char2int(command[13]);
    15dc:	f89d 0013 	ldrb.w	r0, [sp, #19]
		stop_time[period_n]= char2int(command[6])*10000 + char2int(command[7])*1000 + char2int(command[8])*100 + char2int(command[9])*10+ char2int(command[10]);
    15e0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		intensity[period_n]= char2int(command[11])*100 + char2int(command[12])*10 + char2int(command[13]);
    15e4:	f007 ff90 	bl	9508 <char2int>
    15e8:	4603      	mov	r3, r0
    15ea:	f89d 0014 	ldrb.w	r0, [sp, #20]
    15ee:	f007 ff8b 	bl	9508 <char2int>
    15f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    15f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    15fa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    15fe:	0043      	lsls	r3, r0, #1
    1600:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1604:	f89d 0015 	ldrb.w	r0, [sp, #21]
    1608:	b21b      	sxth	r3, r3
    160a:	f007 ff7d 	bl	9508 <char2int>
    160e:	4a54      	ldr	r2, [pc, #336]	; (1760 <thread_A_code+0x47c>)
    1610:	4403      	add	r3, r0
    1612:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		period_n++;
    1616:	3101      	adds	r1, #1
    1618:	8031      	strh	r1, [r6, #0]
                currentTime=k_uptime_get()-currentTime;
    161a:	f007 ff4c 	bl	94b6 <k_uptime_get>
                seconds=(seconds+currentTime/1000)%60;
    161e:	4b51      	ldr	r3, [pc, #324]	; (1764 <thread_A_code+0x480>)
                currentTime=k_uptime_get()-currentTime;
    1620:	1b45      	subs	r5, r0, r5
    1622:	eb61 0609 	sbc.w	r6, r1, r9
                seconds=(seconds+currentTime/1000)%60;
    1626:	f893 8000 	ldrb.w	r8, [r3]
    162a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    162e:	2300      	movs	r3, #0
    1630:	4628      	mov	r0, r5
    1632:	4631      	mov	r1, r6
    1634:	f7ff f952 	bl	8dc <__aeabi_ldivmod>
    1638:	f04f 0900 	mov.w	r9, #0
    163c:	eb18 0000 	adds.w	r0, r8, r0
    1640:	eb49 0101 	adc.w	r1, r9, r1
    1644:	223c      	movs	r2, #60	; 0x3c
    1646:	2300      	movs	r3, #0
    1648:	f7ff f948 	bl	8dc <__aeabi_ldivmod>
    164c:	4b45      	ldr	r3, [pc, #276]	; (1764 <thread_A_code+0x480>)
                minutes=(minutes+currentTime/(1000*60))%60;
    164e:	f894 8000 	ldrb.w	r8, [r4]
                seconds=(seconds+currentTime/1000)%60;
    1652:	701a      	strb	r2, [r3, #0]
                minutes=(minutes+currentTime/(1000*60))%60;
    1654:	4628      	mov	r0, r5
    1656:	f64e 2260 	movw	r2, #60000	; 0xea60
    165a:	2300      	movs	r3, #0
    165c:	4631      	mov	r1, r6
    165e:	f7ff f93d 	bl	8dc <__aeabi_ldivmod>
    1662:	f04f 0900 	mov.w	r9, #0
    1666:	eb18 0000 	adds.w	r0, r8, r0
    166a:	eb49 0101 	adc.w	r1, r9, r1
    166e:	223c      	movs	r2, #60	; 0x3c
    1670:	2300      	movs	r3, #0
    1672:	f7ff f933 	bl	8dc <__aeabi_ldivmod>
                hours=(hours+currentTime/(1000*60*60))%60;
    1676:	2300      	movs	r3, #0
                minutes=(minutes+currentTime/(1000*60))%60;
    1678:	7022      	strb	r2, [r4, #0]
                hours=(hours+currentTime/(1000*60*60))%60;
    167a:	4628      	mov	r0, r5
    167c:	4a3a      	ldr	r2, [pc, #232]	; (1768 <thread_A_code+0x484>)
    167e:	f897 8000 	ldrb.w	r8, [r7]
    1682:	4631      	mov	r1, r6
    1684:	f7ff f92a 	bl	8dc <__aeabi_ldivmod>
    1688:	f04f 0900 	mov.w	r9, #0
    168c:	eb18 0000 	adds.w	r0, r8, r0
    1690:	f04f 023c 	mov.w	r2, #60	; 0x3c
    1694:	f04f 0300 	mov.w	r3, #0
    1698:	eb49 0101 	adc.w	r1, r9, r1
    169c:	f7ff f91e 	bl	8dc <__aeabi_ldivmod>
    16a0:	703a      	strb	r2, [r7, #0]
            release_time = k_uptime_get() + thread_A_period;            
    16a2:	f007 ff08 	bl	94b6 <k_uptime_get>
    16a6:	f110 0364 	adds.w	r3, r0, #100	; 0x64
    16aa:	9300      	str	r3, [sp, #0]
    16ac:	f141 0300 	adc.w	r3, r1, #0
    16b0:	9301      	str	r3, [sp, #4]
    16b2:	e67d      	b.n	13b0 <thread_A_code+0xcc>
            else if(command[0]=='T'){
    16b4:	2b54      	cmp	r3, #84	; 0x54
    16b6:	d122      	bne.n	16fe <thread_A_code+0x41a>
		days=char2int(command[1]);
    16b8:	f89d 0009 	ldrb.w	r0, [sp, #9]
    16bc:	f007 ff24 	bl	9508 <char2int>
    16c0:	f88a 0000 	strb.w	r0, [sl]
		hours=char2int(command[2])*10+char2int(command[3]);
    16c4:	f89d 000a 	ldrb.w	r0, [sp, #10]
    16c8:	f007 ff1e 	bl	9508 <char2int>
    16cc:	4603      	mov	r3, r0
    16ce:	f89d 000b 	ldrb.w	r0, [sp, #11]
    16d2:	f007 ff19 	bl	9508 <char2int>
    16d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    16da:	eb00 0343 	add.w	r3, r0, r3, lsl #1
		minutes=char2int(command[4])*10+char2int(command[5]);
    16de:	f89d 000c 	ldrb.w	r0, [sp, #12]
		hours=char2int(command[2])*10+char2int(command[3]);
    16e2:	703b      	strb	r3, [r7, #0]
		minutes=char2int(command[4])*10+char2int(command[5]);
    16e4:	f007 ff10 	bl	9508 <char2int>
    16e8:	4603      	mov	r3, r0
    16ea:	f89d 000d 	ldrb.w	r0, [sp, #13]
    16ee:	f007 ff0b 	bl	9508 <char2int>
    16f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    16f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    16fa:	7023      	strb	r3, [r4, #0]
    16fc:	e7d1      	b.n	16a2 <thread_A_code+0x3be>
                printk("\nScrivi ben loamaro!!!\n");
    16fe:	481b      	ldr	r0, [pc, #108]	; (176c <thread_A_code+0x488>)
    1700:	f008 f807 	bl	9712 <printk>
    1704:	e7cd      	b.n	16a2 <thread_A_code+0x3be>
        else if(mode==1 && state==1){
    1706:	782b      	ldrb	r3, [r5, #0]
    1708:	2b00      	cmp	r3, #0
    170a:	f43f ae75 	beq.w	13f8 <thread_A_code+0x114>
    170e:	7823      	ldrb	r3, [r4, #0]
    1710:	2b00      	cmp	r3, #0
    1712:	f43f ae71 	beq.w	13f8 <thread_A_code+0x114>
            printk("Switch to AUTOMATIC MODE\n");
    1716:	4816      	ldr	r0, [pc, #88]	; (1770 <thread_A_code+0x48c>)
    1718:	f007 fffb 	bl	9712 <printk>
            highLevel_us=0;
    171c:	4a15      	ldr	r2, [pc, #84]	; (1774 <thread_A_code+0x490>)
    171e:	2300      	movs	r3, #0
    1720:	8013      	strh	r3, [r2, #0]
            state=0;
    1722:	7023      	strb	r3, [r4, #0]
            mode=0;
    1724:	702b      	strb	r3, [r5, #0]
    1726:	e667      	b.n	13f8 <thread_A_code+0x114>
            k_sem_give(&sem_a2manual);
    1728:	4813      	ldr	r0, [pc, #76]	; (1778 <thread_A_code+0x494>)
    172a:	e66d      	b.n	1408 <thread_A_code+0x124>
    172c:	2000117d 	.word	0x2000117d
    1730:	0000acc5 	.word	0x0000acc5
    1734:	0000acfa 	.word	0x0000acfa
    1738:	0000ad03 	.word	0x0000ad03
    173c:	0000ad86 	.word	0x0000ad86
    1740:	0000adbf 	.word	0x0000adbf
    1744:	0000aded 	.word	0x0000aded
    1748:	0000adfa 	.word	0x0000adfa
    174c:	0000ae81 	.word	0x0000ae81
    1750:	0000aec1 	.word	0x0000aec1
    1754:	20000fd2 	.word	0x20000fd2
    1758:	20000fea 	.word	0x20000fea
    175c:	200010b2 	.word	0x200010b2
    1760:	20000f06 	.word	0x20000f06
    1764:	20001183 	.word	0x20001183
    1768:	0036ee80 	.word	0x0036ee80
    176c:	0000aed4 	.word	0x0000aed4
    1770:	0000af13 	.word	0x0000af13
    1774:	20000f04 	.word	0x20000f04
    1778:	200007a4 	.word	0x200007a4

0000177c <main>:
void main(void) {
    177c:	b5f0      	push	{r4, r5, r6, r7, lr}
    177e:	b089      	sub	sp, #36	; 0x24
    1780:	487a      	ldr	r0, [pc, #488]	; (196c <main+0x1f0>)
    1782:	f004 fc5d 	bl	6040 <z_impl_device_get_binding>
    if (gpio0_dev == NULL) {
    1786:	4604      	mov	r4, r0
    1788:	b928      	cbnz	r0, 1796 <main+0x1a>
        printk("Error: Failed to bind to GPIO0\n\r");        
    178a:	4879      	ldr	r0, [pc, #484]	; (1970 <main+0x1f4>)
} 
    178c:	b009      	add	sp, #36	; 0x24
    178e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        printk("Error: Failed to bind to GPIO0\n\r");        
    1792:	f007 bfbe 	b.w	9712 <printk>
        printk("Bind to GPIO0 successfull \n\r");        
    1796:	4877      	ldr	r0, [pc, #476]	; (1974 <main+0x1f8>)
    1798:	f007 ffbb 	bl	9712 <printk>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    179c:	210b      	movs	r1, #11
    179e:	4620      	mov	r0, r4
    17a0:	f7ff fb34 	bl	e0c <z_impl_gpio_pin_configure.constprop.0>
    if (ret < 0) {
    17a4:	1e01      	subs	r1, r0, #0
    17a6:	da05      	bge.n	17b4 <main+0x38>
        printk("Error %d: Failed to configure BUT 1 \n\r", ret);
    17a8:	4873      	ldr	r0, [pc, #460]	; (1978 <main+0x1fc>)
} 
    17aa:	b009      	add	sp, #36	; 0x24
    17ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        printk("Error %d: Failed to configure BUT 4 \n\r", ret);
    17b0:	f007 bfaf 	b.w	9712 <printk>
    17b4:	210c      	movs	r1, #12
    17b6:	4620      	mov	r0, r4
    17b8:	f7ff fb28 	bl	e0c <z_impl_gpio_pin_configure.constprop.0>
    if (ret < 0) {
    17bc:	1e01      	subs	r1, r0, #0
    17be:	da01      	bge.n	17c4 <main+0x48>
        printk("Error %d: Failed to configure BUT 2 \n\r", ret);
    17c0:	486e      	ldr	r0, [pc, #440]	; (197c <main+0x200>)
    17c2:	e7f2      	b.n	17aa <main+0x2e>
    17c4:	2118      	movs	r1, #24
    17c6:	4620      	mov	r0, r4
    17c8:	f7ff fb20 	bl	e0c <z_impl_gpio_pin_configure.constprop.0>
    if (ret < 0) {
    17cc:	1e01      	subs	r1, r0, #0
    17ce:	da01      	bge.n	17d4 <main+0x58>
        printk("Error %d: Failed to configure BUT 3 \n\r", ret);
    17d0:	486b      	ldr	r0, [pc, #428]	; (1980 <main+0x204>)
    17d2:	e7ea      	b.n	17aa <main+0x2e>
    17d4:	2119      	movs	r1, #25
    17d6:	4620      	mov	r0, r4
    17d8:	f7ff fb18 	bl	e0c <z_impl_gpio_pin_configure.constprop.0>
    if (ret < 0) {
    17dc:	1e01      	subs	r1, r0, #0
    17de:	da01      	bge.n	17e4 <main+0x68>
        printk("Error %d: Failed to configure BUT 4 \n\r", ret);
    17e0:	4868      	ldr	r0, [pc, #416]	; (1984 <main+0x208>)
    17e2:	e7e2      	b.n	17aa <main+0x2e>
    17e4:	4868      	ldr	r0, [pc, #416]	; (1988 <main+0x20c>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NID));
    17e6:	4d69      	ldr	r5, [pc, #420]	; (198c <main+0x210>)
    17e8:	f004 fc2a 	bl	6040 <z_impl_device_get_binding>
    17ec:	6028      	str	r0, [r5, #0]
    if (!adc_dev) {
    17ee:	b910      	cbnz	r0, 17f6 <main+0x7a>
        printk("ADC device_get_binding() failed\n");
    17f0:	4867      	ldr	r0, [pc, #412]	; (1990 <main+0x214>)
    17f2:	f007 ff8e 	bl	9712 <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
    17f6:	6828      	ldr	r0, [r5, #0]
	return api->channel_setup(dev, channel_cfg);
    17f8:	6883      	ldr	r3, [r0, #8]
    17fa:	4966      	ldr	r1, [pc, #408]	; (1994 <main+0x218>)
    17fc:	681b      	ldr	r3, [r3, #0]
    17fe:	4798      	blx	r3
    if (err) {
    1800:	4601      	mov	r1, r0
    1802:	b110      	cbz	r0, 180a <main+0x8e>
        printk("adc_channel_setup() failed with error code %d\n", err);
    1804:	4864      	ldr	r0, [pc, #400]	; (1998 <main+0x21c>)
    1806:	f007 ff84 	bl	9712 <printk>
    console_init();
    180a:	f000 fcf7 	bl	21fc <console_init>
    console_write(NULL, prompt, sizeof(prompt) - 1);
    180e:	4963      	ldr	r1, [pc, #396]	; (199c <main+0x220>)
    1810:	2209      	movs	r2, #9
    1812:	2000      	movs	r0, #0
    1814:	f000 fcce 	bl	21b4 <console_write>
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    1818:	210b      	movs	r1, #11
    181a:	4620      	mov	r0, r4
    181c:	f7ff fb28 	bl	e70 <z_impl_gpio_pin_interrupt_configure.constprop.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    1820:	495f      	ldr	r1, [pc, #380]	; (19a0 <main+0x224>)
    1822:	4b60      	ldr	r3, [pc, #384]	; (19a4 <main+0x228>)
    1824:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but1_cb_data);
    1826:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    1828:	f44f 6300 	mov.w	r3, #2048	; 0x800
    182c:	608b      	str	r3, [r1, #8]
    182e:	f007 fe38 	bl	94a2 <gpio_add_callback>
    1832:	210c      	movs	r1, #12
    1834:	4620      	mov	r0, r4
    1836:	f7ff fb1b 	bl	e70 <z_impl_gpio_pin_interrupt_configure.constprop.0>
	callback->handler = handler;
    183a:	495b      	ldr	r1, [pc, #364]	; (19a8 <main+0x22c>)
    183c:	4b5b      	ldr	r3, [pc, #364]	; (19ac <main+0x230>)
    183e:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but2_cb_data);
    1840:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    1842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1846:	608b      	str	r3, [r1, #8]
    1848:	f007 fe2b 	bl	94a2 <gpio_add_callback>
    184c:	2118      	movs	r1, #24
    184e:	4620      	mov	r0, r4
    1850:	f7ff fb0e 	bl	e70 <z_impl_gpio_pin_interrupt_configure.constprop.0>
	callback->handler = handler;
    1854:	4956      	ldr	r1, [pc, #344]	; (19b0 <main+0x234>)
    1856:	4b57      	ldr	r3, [pc, #348]	; (19b4 <main+0x238>)
    1858:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but3_cb_data);
    185a:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    185c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1860:	608b      	str	r3, [r1, #8]
    1862:	f007 fe1e 	bl	94a2 <gpio_add_callback>
    1866:	2119      	movs	r1, #25
    1868:	4620      	mov	r0, r4
    186a:	f7ff fb01 	bl	e70 <z_impl_gpio_pin_interrupt_configure.constprop.0>
	callback->handler = handler;
    186e:	4952      	ldr	r1, [pc, #328]	; (19b8 <main+0x23c>)
    1870:	4b52      	ldr	r3, [pc, #328]	; (19bc <main+0x240>)
    1872:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but4_cb_data);
    1874:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    1876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    187a:	608b      	str	r3, [r1, #8]
    187c:	f007 fe11 	bl	94a2 <gpio_add_callback>
    k_sem_init(&sem_a2manual, 0, 1);
    1880:	484f      	ldr	r0, [pc, #316]	; (19c0 <main+0x244>)
    1882:	f007 fe3d 	bl	9500 <k_sem_init.constprop.0>
    k_sem_init(&sem_a2automatic, 0, 1);
    1886:	484f      	ldr	r0, [pc, #316]	; (19c4 <main+0x248>)
    1888:	f007 fe3a 	bl	9500 <k_sem_init.constprop.0>
    k_sem_init(&sem_auto2filter, 0, 1);
    188c:	484e      	ldr	r0, [pc, #312]	; (19c8 <main+0x24c>)
    188e:	f007 fe37 	bl	9500 <k_sem_init.constprop.0>
    k_sem_init(&sem_filter2control, 0, 1);
    1892:	484e      	ldr	r0, [pc, #312]	; (19cc <main+0x250>)
    1894:	f007 fe34 	bl	9500 <k_sem_init.constprop.0>
    k_sem_init(&sem_manControl2pwm, 0, 1);
    1898:	484d      	ldr	r0, [pc, #308]	; (19d0 <main+0x254>)
    189a:	f007 fe31 	bl	9500 <k_sem_init.constprop.0>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
    189e:	2600      	movs	r6, #0
    18a0:	2700      	movs	r7, #0
		/* coverity[OVERRUN] */
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    18a2:	2400      	movs	r4, #0
    18a4:	2501      	movs	r5, #1
    18a6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    18aa:	e9cd 5403 	strd	r5, r4, [sp, #12]
    18ae:	e9cd 4401 	strd	r4, r4, [sp, #4]
    18b2:	4b48      	ldr	r3, [pc, #288]	; (19d4 <main+0x258>)
    18b4:	4948      	ldr	r1, [pc, #288]	; (19d8 <main+0x25c>)
    18b6:	9400      	str	r4, [sp, #0]
    18b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    18bc:	4847      	ldr	r0, [pc, #284]	; (19dc <main+0x260>)
    18be:	f006 fc31 	bl	8124 <z_impl_k_thread_create>
    18c2:	4b47      	ldr	r3, [pc, #284]	; (19e0 <main+0x264>)
    18c4:	6018      	str	r0, [r3, #0]
    18c6:	4b47      	ldr	r3, [pc, #284]	; (19e4 <main+0x268>)
    18c8:	4947      	ldr	r1, [pc, #284]	; (19e8 <main+0x26c>)
    18ca:	9400      	str	r4, [sp, #0]
    18cc:	e9cd 6706 	strd	r6, r7, [sp, #24]
    18d0:	e9cd 5403 	strd	r5, r4, [sp, #12]
    18d4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    18d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    18dc:	4843      	ldr	r0, [pc, #268]	; (19ec <main+0x270>)
    18de:	f006 fc21 	bl	8124 <z_impl_k_thread_create>
    thread_MANUAL_tid = k_thread_create(&thread_MANUAL_data, thread_MANUAL_stack,
    18e2:	4b43      	ldr	r3, [pc, #268]	; (19f0 <main+0x274>)
    18e4:	6018      	str	r0, [r3, #0]
    18e6:	4b43      	ldr	r3, [pc, #268]	; (19f4 <main+0x278>)
    18e8:	4943      	ldr	r1, [pc, #268]	; (19f8 <main+0x27c>)
    18ea:	9400      	str	r4, [sp, #0]
    18ec:	e9cd 6706 	strd	r6, r7, [sp, #24]
    18f0:	e9cd 5403 	strd	r5, r4, [sp, #12]
    18f4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    18f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    18fc:	483f      	ldr	r0, [pc, #252]	; (19fc <main+0x280>)
    18fe:	f006 fc11 	bl	8124 <z_impl_k_thread_create>
    thread_AUTOMATIC_tid = k_thread_create(&thread_AUTOMATIC_data, thread_AUTOMATIC_stack,
    1902:	4b3f      	ldr	r3, [pc, #252]	; (1a00 <main+0x284>)
    1904:	6018      	str	r0, [r3, #0]
    1906:	4b3f      	ldr	r3, [pc, #252]	; (1a04 <main+0x288>)
    1908:	493f      	ldr	r1, [pc, #252]	; (1a08 <main+0x28c>)
    190a:	9400      	str	r4, [sp, #0]
    190c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1910:	e9cd 5403 	strd	r5, r4, [sp, #12]
    1914:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1918:	f44f 6280 	mov.w	r2, #1024	; 0x400
    191c:	483b      	ldr	r0, [pc, #236]	; (1a0c <main+0x290>)
    191e:	f006 fc01 	bl	8124 <z_impl_k_thread_create>
    thread_FILTER_tid = k_thread_create(&thread_FILTER_data, thread_FILTER_stack,
    1922:	4b3b      	ldr	r3, [pc, #236]	; (1a10 <main+0x294>)
    1924:	6018      	str	r0, [r3, #0]
    1926:	4b3b      	ldr	r3, [pc, #236]	; (1a14 <main+0x298>)
    1928:	493b      	ldr	r1, [pc, #236]	; (1a18 <main+0x29c>)
    192a:	9400      	str	r4, [sp, #0]
    192c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1930:	e9cd 5403 	strd	r5, r4, [sp, #12]
    1934:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1938:	f44f 6280 	mov.w	r2, #1024	; 0x400
    193c:	4837      	ldr	r0, [pc, #220]	; (1a1c <main+0x2a0>)
    193e:	f006 fbf1 	bl	8124 <z_impl_k_thread_create>
    thread_CONTROL_tid = k_thread_create(&thread_CONTROL_data, thread_CONTROL_stack,
    1942:	4b37      	ldr	r3, [pc, #220]	; (1a20 <main+0x2a4>)
    1944:	6018      	str	r0, [r3, #0]
    1946:	4b37      	ldr	r3, [pc, #220]	; (1a24 <main+0x2a8>)
    1948:	4937      	ldr	r1, [pc, #220]	; (1a28 <main+0x2ac>)
    194a:	9400      	str	r4, [sp, #0]
    194c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1950:	e9cd 5403 	strd	r5, r4, [sp, #12]
    1954:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1958:	f44f 6280 	mov.w	r2, #1024	; 0x400
    195c:	4833      	ldr	r0, [pc, #204]	; (1a2c <main+0x2b0>)
    195e:	f006 fbe1 	bl	8124 <z_impl_k_thread_create>
    thread_PWM_tid = k_thread_create(&thread_PWM_data, thread_PWM_stack,
    1962:	4b33      	ldr	r3, [pc, #204]	; (1a30 <main+0x2b4>)
    1964:	6018      	str	r0, [r3, #0]
} 
    1966:	b009      	add	sp, #36	; 0x24
    1968:	bdf0      	pop	{r4, r5, r6, r7, pc}
    196a:	bf00      	nop
    196c:	0000af2d 	.word	0x0000af2d
    1970:	0000af34 	.word	0x0000af34
    1974:	0000af55 	.word	0x0000af55
    1978:	0000af72 	.word	0x0000af72
    197c:	0000af99 	.word	0x0000af99
    1980:	0000afc0 	.word	0x0000afc0
    1984:	0000afe7 	.word	0x0000afe7
    1988:	0000b00e 	.word	0x0000b00e
    198c:	20000758 	.word	0x20000758
    1990:	0000b014 	.word	0x0000b014
    1994:	0000a934 	.word	0x0000a934
    1998:	0000b035 	.word	0x0000b035
    199c:	0000b064 	.word	0x0000b064
    19a0:	2000075c 	.word	0x2000075c
    19a4:	00000dd5 	.word	0x00000dd5
    19a8:	20000768 	.word	0x20000768
    19ac:	00000de1 	.word	0x00000de1
    19b0:	20000774 	.word	0x20000774
    19b4:	00000ded 	.word	0x00000ded
    19b8:	20000780 	.word	0x20000780
    19bc:	00000df9 	.word	0x00000df9
    19c0:	200007a4 	.word	0x200007a4
    19c4:	2000078c 	.word	0x2000078c
    19c8:	200007bc 	.word	0x200007bc
    19cc:	200007d4 	.word	0x200007d4
    19d0:	200007ec 	.word	0x200007ec
    19d4:	000012e5 	.word	0x000012e5
    19d8:	200015e0 	.word	0x200015e0
    19dc:	20000310 	.word	0x20000310
    19e0:	20000808 	.word	0x20000808
    19e4:	000010e9 	.word	0x000010e9
    19e8:	20001a00 	.word	0x20001a00
    19ec:	20000490 	.word	0x20000490
    19f0:	20000814 	.word	0x20000814
    19f4:	00001019 	.word	0x00001019
    19f8:	20001e20 	.word	0x20001e20
    19fc:	20000290 	.word	0x20000290
    1a00:	20000804 	.word	0x20000804
    1a04:	00000c71 	.word	0x00000c71
    1a08:	20002240 	.word	0x20002240
    1a0c:	20000410 	.word	0x20000410
    1a10:	20000810 	.word	0x20000810
    1a14:	00000edd 	.word	0x00000edd
    1a18:	20002660 	.word	0x20002660
    1a1c:	20000390 	.word	0x20000390
    1a20:	2000080c 	.word	0x2000080c
    1a24:	0000118d 	.word	0x0000118d
    1a28:	20002a80 	.word	0x20002a80
    1a2c:	20000510 	.word	0x20000510
    1a30:	20000818 	.word	0x20000818

00001a34 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a38:	b091      	sub	sp, #68	; 0x44
    1a3a:	468b      	mov	fp, r1
    1a3c:	9002      	str	r0, [sp, #8]
    1a3e:	4692      	mov	sl, r2
    1a40:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1a42:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1a44:	f89a 0000 	ldrb.w	r0, [sl]
    1a48:	b908      	cbnz	r0, 1a4e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1a4a:	4628      	mov	r0, r5
    1a4c:	e35e      	b.n	210c <cbvprintf+0x6d8>
		if (*fp != '%') {
    1a4e:	2825      	cmp	r0, #37	; 0x25
    1a50:	f10a 0701 	add.w	r7, sl, #1
    1a54:	d007      	beq.n	1a66 <cbvprintf+0x32>
			OUTC('%');
    1a56:	9b02      	ldr	r3, [sp, #8]
    1a58:	4659      	mov	r1, fp
    1a5a:	4798      	blx	r3
    1a5c:	2800      	cmp	r0, #0
    1a5e:	f2c0 8355 	blt.w	210c <cbvprintf+0x6d8>
    1a62:	3501      	adds	r5, #1
			break;
    1a64:	e210      	b.n	1e88 <cbvprintf+0x454>
		} state = {
    1a66:	2218      	movs	r2, #24
    1a68:	2100      	movs	r1, #0
    1a6a:	a80a      	add	r0, sp, #40	; 0x28
    1a6c:	f008 f843 	bl	9af6 <memset>
	if (*sp == '%') {
    1a70:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1a74:	2b25      	cmp	r3, #37	; 0x25
    1a76:	d078      	beq.n	1b6a <cbvprintf+0x136>
    1a78:	2200      	movs	r2, #0
    1a7a:	4694      	mov	ip, r2
    1a7c:	4616      	mov	r6, r2
    1a7e:	4696      	mov	lr, r2
    1a80:	4610      	mov	r0, r2
    1a82:	4639      	mov	r1, r7
		switch (*sp) {
    1a84:	f817 3b01 	ldrb.w	r3, [r7], #1
    1a88:	2b2b      	cmp	r3, #43	; 0x2b
    1a8a:	f000 809d 	beq.w	1bc8 <cbvprintf+0x194>
    1a8e:	f200 8094 	bhi.w	1bba <cbvprintf+0x186>
    1a92:	2b20      	cmp	r3, #32
    1a94:	f000 809b 	beq.w	1bce <cbvprintf+0x19a>
    1a98:	2b23      	cmp	r3, #35	; 0x23
    1a9a:	f000 809a 	beq.w	1bd2 <cbvprintf+0x19e>
    1a9e:	b128      	cbz	r0, 1aac <cbvprintf+0x78>
    1aa0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1aa4:	f040 0004 	orr.w	r0, r0, #4
    1aa8:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1aac:	f1be 0f00 	cmp.w	lr, #0
    1ab0:	d005      	beq.n	1abe <cbvprintf+0x8a>
    1ab2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1ab6:	f040 0008 	orr.w	r0, r0, #8
    1aba:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1abe:	b12e      	cbz	r6, 1acc <cbvprintf+0x98>
    1ac0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1ac4:	f040 0010 	orr.w	r0, r0, #16
    1ac8:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1acc:	f1bc 0f00 	cmp.w	ip, #0
    1ad0:	d005      	beq.n	1ade <cbvprintf+0xaa>
    1ad2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1ad6:	f040 0020 	orr.w	r0, r0, #32
    1ada:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1ade:	b12a      	cbz	r2, 1aec <cbvprintf+0xb8>
    1ae0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1ae8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1aec:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1af0:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1af4:	2844      	cmp	r0, #68	; 0x44
    1af6:	d103      	bne.n	1b00 <cbvprintf+0xcc>
		conv->flag_zero = false;
    1af8:	f36f 1286 	bfc	r2, #6, #1
    1afc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1b00:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1b04:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1b06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1b0a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1b0e:	d17b      	bne.n	1c08 <cbvprintf+0x1d4>
		conv->width_star = true;
    1b10:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1b14:	f042 0201 	orr.w	r2, r2, #1
    1b18:	1c4b      	adds	r3, r1, #1
    1b1a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1b1e:	781a      	ldrb	r2, [r3, #0]
    1b20:	2a2e      	cmp	r2, #46	; 0x2e
    1b22:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1b26:	bf0c      	ite	eq
    1b28:	2101      	moveq	r1, #1
    1b2a:	2100      	movne	r1, #0
    1b2c:	f361 0241 	bfi	r2, r1, #1, #1
    1b30:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1b34:	d174      	bne.n	1c20 <cbvprintf+0x1ec>
	if (*sp == '*') {
    1b36:	785a      	ldrb	r2, [r3, #1]
    1b38:	2a2a      	cmp	r2, #42	; 0x2a
    1b3a:	d06a      	beq.n	1c12 <cbvprintf+0x1de>
    1b3c:	3301      	adds	r3, #1
	size_t val = 0;
    1b3e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1b40:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1b42:	4618      	mov	r0, r3
    1b44:	f810 2b01 	ldrb.w	r2, [r0], #1
    1b48:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1b4c:	2f09      	cmp	r7, #9
    1b4e:	f240 808e 	bls.w	1c6e <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    1b52:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1b56:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1b58:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1b5c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1b60:	f361 0241 	bfi	r2, r1, #1, #1
    1b64:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1b68:	e05a      	b.n	1c20 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    1b6a:	f10a 0702 	add.w	r7, sl, #2
    1b6e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1b72:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1b76:	07d9      	lsls	r1, r3, #31
    1b78:	f140 8149 	bpl.w	1e0e <cbvprintf+0x3da>
			width = va_arg(ap, int);
    1b7c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1b80:	f1b9 0f00 	cmp.w	r9, #0
    1b84:	da07      	bge.n	1b96 <cbvprintf+0x162>
				conv->flag_dash = true;
    1b86:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1b8a:	f042 0204 	orr.w	r2, r2, #4
    1b8e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1b92:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1b96:	075a      	lsls	r2, r3, #29
    1b98:	f140 8142 	bpl.w	1e20 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    1b9c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1ba0:	f1b8 0f00 	cmp.w	r8, #0
    1ba4:	f280 8141 	bge.w	1e2a <cbvprintf+0x3f6>
				conv->prec_present = false;
    1ba8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1bac:	f36f 0341 	bfc	r3, #1, #1
    1bb0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1bb4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1bb8:	e137      	b.n	1e2a <cbvprintf+0x3f6>
		switch (*sp) {
    1bba:	2b2d      	cmp	r3, #45	; 0x2d
    1bbc:	d00c      	beq.n	1bd8 <cbvprintf+0x1a4>
    1bbe:	2b30      	cmp	r3, #48	; 0x30
    1bc0:	f47f af6d 	bne.w	1a9e <cbvprintf+0x6a>
			conv->flag_zero = true;
    1bc4:	2201      	movs	r2, #1
	} while (loop);
    1bc6:	e75c      	b.n	1a82 <cbvprintf+0x4e>
			conv->flag_plus = true;
    1bc8:	f04f 0e01 	mov.w	lr, #1
    1bcc:	e759      	b.n	1a82 <cbvprintf+0x4e>
			conv->flag_space = true;
    1bce:	2601      	movs	r6, #1
    1bd0:	e757      	b.n	1a82 <cbvprintf+0x4e>
			conv->flag_hash = true;
    1bd2:	f04f 0c01 	mov.w	ip, #1
    1bd6:	e754      	b.n	1a82 <cbvprintf+0x4e>
		switch (*sp) {
    1bd8:	2001      	movs	r0, #1
    1bda:	e752      	b.n	1a82 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1bdc:	fb0c 0202 	mla	r2, ip, r2, r0
    1be0:	3a30      	subs	r2, #48	; 0x30
    1be2:	4633      	mov	r3, r6
    1be4:	461e      	mov	r6, r3
    1be6:	f816 0b01 	ldrb.w	r0, [r6], #1
    1bea:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1bee:	2f09      	cmp	r7, #9
    1bf0:	d9f4      	bls.n	1bdc <cbvprintf+0x1a8>
	if (sp != wp) {
    1bf2:	4299      	cmp	r1, r3
    1bf4:	d093      	beq.n	1b1e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1bf6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1bfa:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1bfc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1bfe:	f362 0141 	bfi	r1, r2, #1, #1
    1c02:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1c06:	e78a      	b.n	1b1e <cbvprintf+0xea>
    1c08:	460b      	mov	r3, r1
	size_t val = 0;
    1c0a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1c0c:	f04f 0c0a 	mov.w	ip, #10
    1c10:	e7e8      	b.n	1be4 <cbvprintf+0x1b0>
		conv->prec_star = true;
    1c12:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1c16:	f042 0204 	orr.w	r2, r2, #4
    1c1a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1c1e:	3302      	adds	r3, #2
	switch (*sp) {
    1c20:	461f      	mov	r7, r3
    1c22:	f817 2b01 	ldrb.w	r2, [r7], #1
    1c26:	2a6c      	cmp	r2, #108	; 0x6c
    1c28:	d041      	beq.n	1cae <cbvprintf+0x27a>
    1c2a:	d825      	bhi.n	1c78 <cbvprintf+0x244>
    1c2c:	2a68      	cmp	r2, #104	; 0x68
    1c2e:	d02b      	beq.n	1c88 <cbvprintf+0x254>
    1c30:	2a6a      	cmp	r2, #106	; 0x6a
    1c32:	d046      	beq.n	1cc2 <cbvprintf+0x28e>
    1c34:	2a4c      	cmp	r2, #76	; 0x4c
    1c36:	d04c      	beq.n	1cd2 <cbvprintf+0x29e>
    1c38:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1c3a:	f817 2b01 	ldrb.w	r2, [r7], #1
    1c3e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1c42:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1c46:	2a78      	cmp	r2, #120	; 0x78
    1c48:	f200 80d9 	bhi.w	1dfe <cbvprintf+0x3ca>
    1c4c:	2a57      	cmp	r2, #87	; 0x57
    1c4e:	d84d      	bhi.n	1cec <cbvprintf+0x2b8>
    1c50:	2a41      	cmp	r2, #65	; 0x41
    1c52:	d003      	beq.n	1c5c <cbvprintf+0x228>
    1c54:	3a45      	subs	r2, #69	; 0x45
    1c56:	2a02      	cmp	r2, #2
    1c58:	f200 80d1 	bhi.w	1dfe <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1c5c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1c60:	2204      	movs	r2, #4
    1c62:	f362 0302 	bfi	r3, r2, #0, #3
    1c66:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1c6a:	2301      	movs	r3, #1
			break;
    1c6c:	e09e      	b.n	1dac <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    1c6e:	fb06 2101 	mla	r1, r6, r1, r2
    1c72:	3930      	subs	r1, #48	; 0x30
    1c74:	4603      	mov	r3, r0
    1c76:	e764      	b.n	1b42 <cbvprintf+0x10e>
	switch (*sp) {
    1c78:	2a74      	cmp	r2, #116	; 0x74
    1c7a:	d026      	beq.n	1cca <cbvprintf+0x296>
    1c7c:	2a7a      	cmp	r2, #122	; 0x7a
    1c7e:	d1db      	bne.n	1c38 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1c80:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1c84:	2206      	movs	r2, #6
    1c86:	e00d      	b.n	1ca4 <cbvprintf+0x270>
		if (*++sp == 'h') {
    1c88:	785a      	ldrb	r2, [r3, #1]
    1c8a:	2a68      	cmp	r2, #104	; 0x68
    1c8c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1c90:	d106      	bne.n	1ca0 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    1c92:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1c94:	f361 02c6 	bfi	r2, r1, #3, #4
    1c98:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1c9c:	1c9f      	adds	r7, r3, #2
    1c9e:	e7cc      	b.n	1c3a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1ca0:	4613      	mov	r3, r2
    1ca2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1ca4:	f362 03c6 	bfi	r3, r2, #3, #4
    1ca8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1cac:	e7c5      	b.n	1c3a <cbvprintf+0x206>
		if (*++sp == 'l') {
    1cae:	785a      	ldrb	r2, [r3, #1]
    1cb0:	2a6c      	cmp	r2, #108	; 0x6c
    1cb2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1cb6:	d101      	bne.n	1cbc <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1cb8:	2104      	movs	r1, #4
    1cba:	e7eb      	b.n	1c94 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    1cbc:	4613      	mov	r3, r2
    1cbe:	2203      	movs	r2, #3
    1cc0:	e7f0      	b.n	1ca4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1cc2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1cc6:	2205      	movs	r2, #5
    1cc8:	e7ec      	b.n	1ca4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    1cca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1cce:	2207      	movs	r2, #7
    1cd0:	e7e8      	b.n	1ca4 <cbvprintf+0x270>
		conv->unsupported = true;
    1cd2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1cd6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1cda:	f023 0302 	bic.w	r3, r3, #2
    1cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1ce2:	f043 0302 	orr.w	r3, r3, #2
    1ce6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1cea:	e7a6      	b.n	1c3a <cbvprintf+0x206>
    1cec:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1cf0:	2920      	cmp	r1, #32
    1cf2:	f200 8084 	bhi.w	1dfe <cbvprintf+0x3ca>
    1cf6:	a001      	add	r0, pc, #4	; (adr r0, 1cfc <cbvprintf+0x2c8>)
    1cf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1cfc:	00001dc1 	.word	0x00001dc1
    1d00:	00001dff 	.word	0x00001dff
    1d04:	00001dff 	.word	0x00001dff
    1d08:	00001dff 	.word	0x00001dff
    1d0c:	00001dff 	.word	0x00001dff
    1d10:	00001dff 	.word	0x00001dff
    1d14:	00001dff 	.word	0x00001dff
    1d18:	00001dff 	.word	0x00001dff
    1d1c:	00001dff 	.word	0x00001dff
    1d20:	00001c5d 	.word	0x00001c5d
    1d24:	00001dff 	.word	0x00001dff
    1d28:	00001dc1 	.word	0x00001dc1
    1d2c:	00001d81 	.word	0x00001d81
    1d30:	00001c5d 	.word	0x00001c5d
    1d34:	00001c5d 	.word	0x00001c5d
    1d38:	00001c5d 	.word	0x00001c5d
    1d3c:	00001dff 	.word	0x00001dff
    1d40:	00001d81 	.word	0x00001d81
    1d44:	00001dff 	.word	0x00001dff
    1d48:	00001dff 	.word	0x00001dff
    1d4c:	00001dff 	.word	0x00001dff
    1d50:	00001dff 	.word	0x00001dff
    1d54:	00001dc9 	.word	0x00001dc9
    1d58:	00001dc1 	.word	0x00001dc1
    1d5c:	00001de5 	.word	0x00001de5
    1d60:	00001dff 	.word	0x00001dff
    1d64:	00001dff 	.word	0x00001dff
    1d68:	00001de5 	.word	0x00001de5
    1d6c:	00001dff 	.word	0x00001dff
    1d70:	00001dc1 	.word	0x00001dc1
    1d74:	00001dff 	.word	0x00001dff
    1d78:	00001dff 	.word	0x00001dff
    1d7c:	00001dc1 	.word	0x00001dc1
		conv->specifier_cat = SPECIFIER_SINT;
    1d80:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1d84:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1d86:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1d8a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1d8e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1d90:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1d94:	bf02      	ittt	eq
    1d96:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1d9a:	f041 0101 	orreq.w	r1, r1, #1
    1d9e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1da2:	2a63      	cmp	r2, #99	; 0x63
    1da4:	d131      	bne.n	1e0a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1da6:	3b00      	subs	r3, #0
    1da8:	bf18      	it	ne
    1daa:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1dac:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1db0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1db4:	430b      	orrs	r3, r1
    1db6:	f363 0241 	bfi	r2, r3, #1, #1
    1dba:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1dbe:	e6d8      	b.n	1b72 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1dc0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1dc4:	2002      	movs	r0, #2
    1dc6:	e7de      	b.n	1d86 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1dc8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1dcc:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1dd0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1dd4:	2103      	movs	r1, #3
    1dd6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1dda:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1ddc:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1de0:	4143      	adcs	r3, r0
    1de2:	e7e3      	b.n	1dac <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1de4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1de8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1dea:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1dee:	f361 0202 	bfi	r2, r1, #0, #3
    1df2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1df6:	bf14      	ite	ne
    1df8:	2301      	movne	r3, #1
    1dfa:	2300      	moveq	r3, #0
    1dfc:	e7d6      	b.n	1dac <cbvprintf+0x378>
		conv->invalid = true;
    1dfe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1e02:	f043 0301 	orr.w	r3, r3, #1
    1e06:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1e0a:	2300      	movs	r3, #0
    1e0c:	e7ce      	b.n	1dac <cbvprintf+0x378>
		} else if (conv->width_present) {
    1e0e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1e12:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1e14:	bfb4      	ite	lt
    1e16:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1e1a:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    1e1e:	e6ba      	b.n	1b96 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1e20:	079b      	lsls	r3, r3, #30
    1e22:	f57f aec7 	bpl.w	1bb4 <cbvprintf+0x180>
			precision = conv->prec_value;
    1e26:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1e2a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1e2e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1e30:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1e34:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1e38:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1e3c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1e3e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1e42:	d136      	bne.n	1eb2 <cbvprintf+0x47e>
			switch (length_mod) {
    1e44:	1ed3      	subs	r3, r2, #3
    1e46:	2b04      	cmp	r3, #4
    1e48:	d820      	bhi.n	1e8c <cbvprintf+0x458>
    1e4a:	e8df f003 	tbb	[pc, r3]
    1e4e:	0703      	.short	0x0703
    1e50:	1f07      	.short	0x1f07
    1e52:	1f          	.byte	0x1f
    1e53:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1e54:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    1e58:	17c1      	asrs	r1, r0, #31
    1e5a:	e004      	b.n	1e66 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    1e5c:	3407      	adds	r4, #7
    1e5e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1e62:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    1e66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1e6a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1e6e:	f013 0603 	ands.w	r6, r3, #3
    1e72:	d054      	beq.n	1f1e <cbvprintf+0x4ea>
			OUTS(sp, fp);
    1e74:	9802      	ldr	r0, [sp, #8]
    1e76:	463b      	mov	r3, r7
    1e78:	4652      	mov	r2, sl
    1e7a:	4659      	mov	r1, fp
    1e7c:	f007 fb98 	bl	95b0 <outs>
    1e80:	2800      	cmp	r0, #0
    1e82:	f2c0 8143 	blt.w	210c <cbvprintf+0x6d8>
    1e86:	4405      	add	r5, r0
			continue;
    1e88:	46ba      	mov	sl, r7
    1e8a:	e5db      	b.n	1a44 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1e8c:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    1e90:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1e92:	ea4f 71e0 	mov.w	r1, r0, asr #31
    1e96:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1e9a:	d105      	bne.n	1ea8 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    1e9c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1ea0:	930a      	str	r3, [sp, #40]	; 0x28
    1ea2:	2300      	movs	r3, #0
    1ea4:	930b      	str	r3, [sp, #44]	; 0x2c
    1ea6:	e7e0      	b.n	1e6a <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    1ea8:	2a02      	cmp	r2, #2
    1eaa:	d1de      	bne.n	1e6a <cbvprintf+0x436>
				value->sint = (short)value->sint;
    1eac:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    1eb0:	e7d2      	b.n	1e58 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1eb2:	2b02      	cmp	r3, #2
    1eb4:	d123      	bne.n	1efe <cbvprintf+0x4ca>
			switch (length_mod) {
    1eb6:	1ed3      	subs	r3, r2, #3
    1eb8:	2b04      	cmp	r3, #4
    1eba:	d813      	bhi.n	1ee4 <cbvprintf+0x4b0>
    1ebc:	e8df f003 	tbb	[pc, r3]
    1ec0:	120a0a03 	.word	0x120a0a03
    1ec4:	12          	.byte	0x12
    1ec5:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1ec6:	6820      	ldr	r0, [r4, #0]
    1ec8:	900a      	str	r0, [sp, #40]	; 0x28
    1eca:	2100      	movs	r1, #0
    1ecc:	1d23      	adds	r3, r4, #4
    1ece:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1ed0:	461c      	mov	r4, r3
    1ed2:	e7ca      	b.n	1e6a <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    1ed4:	3407      	adds	r4, #7
    1ed6:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    1eda:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    1ede:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    1ee2:	e7f5      	b.n	1ed0 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    1ee4:	f854 3b04 	ldr.w	r3, [r4], #4
    1ee8:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1eea:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    1eec:	f04f 0300 	mov.w	r3, #0
    1ef0:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1ef2:	d0d3      	beq.n	1e9c <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    1ef4:	2a02      	cmp	r2, #2
    1ef6:	d1b8      	bne.n	1e6a <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    1ef8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1efc:	e7d0      	b.n	1ea0 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    1efe:	2b04      	cmp	r3, #4
    1f00:	d107      	bne.n	1f12 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    1f02:	3407      	adds	r4, #7
    1f04:	f024 0407 	bic.w	r4, r4, #7
    1f08:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    1f0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    1f10:	e7ab      	b.n	1e6a <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1f12:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1f14:	bf04      	itt	eq
    1f16:	f854 3b04 	ldreq.w	r3, [r4], #4
    1f1a:	930a      	streq	r3, [sp, #40]	; 0x28
    1f1c:	e7a5      	b.n	1e6a <cbvprintf+0x436>
		switch (conv->specifier) {
    1f1e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1f22:	2878      	cmp	r0, #120	; 0x78
    1f24:	d8b0      	bhi.n	1e88 <cbvprintf+0x454>
    1f26:	2862      	cmp	r0, #98	; 0x62
    1f28:	d822      	bhi.n	1f70 <cbvprintf+0x53c>
    1f2a:	2825      	cmp	r0, #37	; 0x25
    1f2c:	f43f ad93 	beq.w	1a56 <cbvprintf+0x22>
    1f30:	2858      	cmp	r0, #88	; 0x58
    1f32:	d1a9      	bne.n	1e88 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1f34:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1f38:	9300      	str	r3, [sp, #0]
    1f3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1f3e:	ab04      	add	r3, sp, #16
    1f40:	aa0c      	add	r2, sp, #48	; 0x30
    1f42:	f007 faea 	bl	951a <encode_uint>
    1f46:	4682      	mov	sl, r0
			if (precision >= 0) {
    1f48:	f1b8 0f00 	cmp.w	r8, #0
    1f4c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1f50:	db0c      	blt.n	1f6c <cbvprintf+0x538>
				conv->flag_zero = false;
    1f52:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1f56:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1f5a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1f5e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1f60:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1f64:	d902      	bls.n	1f6c <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    1f66:	eba8 0303 	sub.w	r3, r8, r3
    1f6a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1f6c:	4680      	mov	r8, r0
    1f6e:	e03d      	b.n	1fec <cbvprintf+0x5b8>
    1f70:	3863      	subs	r0, #99	; 0x63
    1f72:	2815      	cmp	r0, #21
    1f74:	d888      	bhi.n	1e88 <cbvprintf+0x454>
    1f76:	a101      	add	r1, pc, #4	; (adr r1, 1f7c <cbvprintf+0x548>)
    1f78:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    1f7c:	00001ffd 	.word	0x00001ffd
    1f80:	00002061 	.word	0x00002061
    1f84:	00001e89 	.word	0x00001e89
    1f88:	00001e89 	.word	0x00001e89
    1f8c:	00001e89 	.word	0x00001e89
    1f90:	00001e89 	.word	0x00001e89
    1f94:	00002061 	.word	0x00002061
    1f98:	00001e89 	.word	0x00001e89
    1f9c:	00001e89 	.word	0x00001e89
    1fa0:	00001e89 	.word	0x00001e89
    1fa4:	00001e89 	.word	0x00001e89
    1fa8:	000020bf 	.word	0x000020bf
    1fac:	0000208d 	.word	0x0000208d
    1fb0:	00002091 	.word	0x00002091
    1fb4:	00001e89 	.word	0x00001e89
    1fb8:	00001e89 	.word	0x00001e89
    1fbc:	00001fd5 	.word	0x00001fd5
    1fc0:	00001e89 	.word	0x00001e89
    1fc4:	0000208d 	.word	0x0000208d
    1fc8:	00001e89 	.word	0x00001e89
    1fcc:	00001e89 	.word	0x00001e89
    1fd0:	0000208d 	.word	0x0000208d
			if (precision >= 0) {
    1fd4:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1fd8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1fdc:	db0a      	blt.n	1ff4 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    1fde:	4641      	mov	r1, r8
    1fe0:	4650      	mov	r0, sl
    1fe2:	f007 fd68 	bl	9ab6 <strnlen>
			bpe = bps + len;
    1fe6:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1fea:	2600      	movs	r6, #0
		if (bps == NULL) {
    1fec:	f1ba 0f00 	cmp.w	sl, #0
    1ff0:	d10c      	bne.n	200c <cbvprintf+0x5d8>
    1ff2:	e749      	b.n	1e88 <cbvprintf+0x454>
				len = strlen(bps);
    1ff4:	4650      	mov	r0, sl
    1ff6:	f007 fd57 	bl	9aa8 <strlen>
    1ffa:	e7f4      	b.n	1fe6 <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ffe:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    2002:	2600      	movs	r6, #0
			bpe = buf + 1;
    2004:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    2008:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    200c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    2010:	b106      	cbz	r6, 2014 <cbvprintf+0x5e0>
			nj_len += 1U;
    2012:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    2014:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    2018:	06d0      	lsls	r0, r2, #27
    201a:	d56b      	bpl.n	20f4 <cbvprintf+0x6c0>
			nj_len += 2U;
    201c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    201e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    2020:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    2022:	bf48      	it	mi
    2024:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    2026:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    2028:	bf48      	it	mi
    202a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    202c:	f1b9 0f00 	cmp.w	r9, #0
    2030:	dd79      	ble.n	2126 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    2032:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    2036:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    203a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    203e:	9303      	str	r3, [sp, #12]
    2040:	0753      	lsls	r3, r2, #29
    2042:	d470      	bmi.n	2126 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    2044:	0650      	lsls	r0, r2, #25
    2046:	d564      	bpl.n	2112 <cbvprintf+0x6de>
					if (sign != 0) {
    2048:	b146      	cbz	r6, 205c <cbvprintf+0x628>
						OUTC(sign);
    204a:	9b02      	ldr	r3, [sp, #8]
    204c:	4659      	mov	r1, fp
    204e:	4630      	mov	r0, r6
    2050:	4798      	blx	r3
    2052:	2800      	cmp	r0, #0
    2054:	db5a      	blt.n	210c <cbvprintf+0x6d8>
						sign = 0;
    2056:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    2058:	3501      	adds	r5, #1
						sign = 0;
    205a:	461e      	mov	r6, r3
					pad = '0';
    205c:	2330      	movs	r3, #48	; 0x30
    205e:	e059      	b.n	2114 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    2060:	071e      	lsls	r6, r3, #28
    2062:	d411      	bmi.n	2088 <cbvprintf+0x654>
				sign = ' ';
    2064:	f013 0610 	ands.w	r6, r3, #16
    2068:	bf18      	it	ne
    206a:	2620      	movne	r6, #32
			sint = value->sint;
    206c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    2070:	2a00      	cmp	r2, #0
    2072:	f173 0100 	sbcs.w	r1, r3, #0
    2076:	f6bf af5d 	bge.w	1f34 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    207a:	4252      	negs	r2, r2
    207c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2080:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    2084:	262d      	movs	r6, #45	; 0x2d
    2086:	e755      	b.n	1f34 <cbvprintf+0x500>
				sign = '+';
    2088:	262b      	movs	r6, #43	; 0x2b
    208a:	e7ef      	b.n	206c <cbvprintf+0x638>
		switch (conv->specifier) {
    208c:	2600      	movs	r6, #0
    208e:	e751      	b.n	1f34 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    2090:	980a      	ldr	r0, [sp, #40]	; 0x28
    2092:	b348      	cbz	r0, 20e8 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2094:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    2098:	9300      	str	r3, [sp, #0]
    209a:	aa0c      	add	r2, sp, #48	; 0x30
    209c:	ab04      	add	r3, sp, #16
    209e:	2100      	movs	r1, #0
    20a0:	f007 fa3b 	bl	951a <encode_uint>
				conv->altform_0c = true;
    20a4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    20a8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    20ac:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    20b0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    20b4:	4682      	mov	sl, r0
				conv->altform_0c = true;
    20b6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    20ba:	2600      	movs	r6, #0
				goto prec_int_pad0;
    20bc:	e744      	b.n	1f48 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    20be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    20c0:	2a07      	cmp	r2, #7
    20c2:	f63f aee1 	bhi.w	1e88 <cbvprintf+0x454>
    20c6:	e8df f002 	tbb	[pc, r2]
    20ca:	040d      	.short	0x040d
    20cc:	08080d06 	.word	0x08080d06
    20d0:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    20d2:	701d      	strb	r5, [r3, #0]
		break;
    20d4:	e6d8      	b.n	1e88 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    20d6:	801d      	strh	r5, [r3, #0]
		break;
    20d8:	e6d6      	b.n	1e88 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    20da:	4628      	mov	r0, r5
    20dc:	17e9      	asrs	r1, r5, #31
    20de:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    20e2:	e6d1      	b.n	1e88 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    20e4:	601d      	str	r5, [r3, #0]
		break;
    20e6:	e6cf      	b.n	1e88 <cbvprintf+0x454>
			bpe = bps + 5;
    20e8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 21b0 <cbvprintf+0x77c>
    20ec:	4606      	mov	r6, r0
			bps = "(nil)";
    20ee:	f1a8 0a05 	sub.w	sl, r8, #5
    20f2:	e78b      	b.n	200c <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    20f4:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    20f6:	bf48      	it	mi
    20f8:	3301      	addmi	r3, #1
    20fa:	e790      	b.n	201e <cbvprintf+0x5ea>
					OUTC(pad);
    20fc:	4618      	mov	r0, r3
    20fe:	9303      	str	r3, [sp, #12]
    2100:	4659      	mov	r1, fp
    2102:	9b02      	ldr	r3, [sp, #8]
    2104:	4798      	blx	r3
    2106:	2800      	cmp	r0, #0
    2108:	9b03      	ldr	r3, [sp, #12]
    210a:	da04      	bge.n	2116 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    210c:	b011      	add	sp, #68	; 0x44
    210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2112:	2320      	movs	r3, #32
    2114:	444d      	add	r5, r9
    2116:	464a      	mov	r2, r9
				while (width-- > 0) {
    2118:	2a00      	cmp	r2, #0
    211a:	eba5 0109 	sub.w	r1, r5, r9
    211e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    2122:	dceb      	bgt.n	20fc <cbvprintf+0x6c8>
    2124:	460d      	mov	r5, r1
		if (sign != 0) {
    2126:	b136      	cbz	r6, 2136 <cbvprintf+0x702>
			OUTC(sign);
    2128:	9b02      	ldr	r3, [sp, #8]
    212a:	4659      	mov	r1, fp
    212c:	4630      	mov	r0, r6
    212e:	4798      	blx	r3
    2130:	2800      	cmp	r0, #0
    2132:	dbeb      	blt.n	210c <cbvprintf+0x6d8>
    2134:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2136:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    213a:	06d9      	lsls	r1, r3, #27
    213c:	d401      	bmi.n	2142 <cbvprintf+0x70e>
    213e:	071a      	lsls	r2, r3, #28
    2140:	d506      	bpl.n	2150 <cbvprintf+0x71c>
				OUTC('0');
    2142:	9b02      	ldr	r3, [sp, #8]
    2144:	4659      	mov	r1, fp
    2146:	2030      	movs	r0, #48	; 0x30
    2148:	4798      	blx	r3
    214a:	2800      	cmp	r0, #0
    214c:	dbde      	blt.n	210c <cbvprintf+0x6d8>
    214e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2150:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    2154:	06db      	lsls	r3, r3, #27
    2156:	d507      	bpl.n	2168 <cbvprintf+0x734>
				OUTC(conv->specifier);
    2158:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    215c:	9b02      	ldr	r3, [sp, #8]
    215e:	4659      	mov	r1, fp
    2160:	4798      	blx	r3
    2162:	2800      	cmp	r0, #0
    2164:	dbd2      	blt.n	210c <cbvprintf+0x6d8>
    2166:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2168:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    216a:	442e      	add	r6, r5
    216c:	1b73      	subs	r3, r6, r5
    216e:	2b00      	cmp	r3, #0
    2170:	dc16      	bgt.n	21a0 <cbvprintf+0x76c>
			OUTS(bps, bpe);
    2172:	9802      	ldr	r0, [sp, #8]
    2174:	4643      	mov	r3, r8
    2176:	4652      	mov	r2, sl
    2178:	4659      	mov	r1, fp
    217a:	f007 fa19 	bl	95b0 <outs>
    217e:	2800      	cmp	r0, #0
    2180:	dbc4      	blt.n	210c <cbvprintf+0x6d8>
    2182:	4405      	add	r5, r0
		while (width > 0) {
    2184:	44a9      	add	r9, r5
    2186:	eba9 0305 	sub.w	r3, r9, r5
    218a:	2b00      	cmp	r3, #0
    218c:	f77f ae7c 	ble.w	1e88 <cbvprintf+0x454>
			OUTC(' ');
    2190:	9b02      	ldr	r3, [sp, #8]
    2192:	4659      	mov	r1, fp
    2194:	2020      	movs	r0, #32
    2196:	4798      	blx	r3
    2198:	2800      	cmp	r0, #0
    219a:	dbb7      	blt.n	210c <cbvprintf+0x6d8>
    219c:	3501      	adds	r5, #1
			--width;
    219e:	e7f2      	b.n	2186 <cbvprintf+0x752>
				OUTC('0');
    21a0:	9b02      	ldr	r3, [sp, #8]
    21a2:	4659      	mov	r1, fp
    21a4:	2030      	movs	r0, #48	; 0x30
    21a6:	4798      	blx	r3
    21a8:	2800      	cmp	r0, #0
    21aa:	dbaf      	blt.n	210c <cbvprintf+0x6d8>
    21ac:	3501      	adds	r5, #1
    21ae:	e7dd      	b.n	216c <cbvprintf+0x738>
    21b0:	0000b073 	.word	0x0000b073

000021b4 <console_write>:

ssize_t console_write(void *dummy, const void *buf, size_t size)
{
	ARG_UNUSED(dummy);

	return tty_write(&console_serial, buf, size);
    21b4:	4801      	ldr	r0, [pc, #4]	; (21bc <console_write+0x8>)
    21b6:	f007 bb7f 	b.w	98b8 <tty_write>
    21ba:	bf00      	nop
    21bc:	2000081c 	.word	0x2000081c

000021c0 <console_putchar>:

	return tty_read(&console_serial, buf, size);
}

int console_putchar(char c)
{
    21c0:	b507      	push	{r0, r1, r2, lr}
	return tty_write(&console_serial, &c, 1);
    21c2:	2201      	movs	r2, #1
{
    21c4:	f88d 0007 	strb.w	r0, [sp, #7]
	return tty_write(&console_serial, &c, 1);
    21c8:	f10d 0107 	add.w	r1, sp, #7
    21cc:	4802      	ldr	r0, [pc, #8]	; (21d8 <console_putchar+0x18>)
    21ce:	f007 fb73 	bl	98b8 <tty_write>
}
    21d2:	b003      	add	sp, #12
    21d4:	f85d fb04 	ldr.w	pc, [sp], #4
    21d8:	2000081c 	.word	0x2000081c

000021dc <console_getchar>:

int console_getchar(void)
{
    21dc:	b507      	push	{r0, r1, r2, lr}
	uint8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    21de:	2201      	movs	r2, #1
    21e0:	f10d 0107 	add.w	r1, sp, #7
    21e4:	4804      	ldr	r0, [pc, #16]	; (21f8 <console_getchar+0x1c>)
    21e6:	f007 fb90 	bl	990a <tty_read>
	if (res < 0) {
    21ea:	2800      	cmp	r0, #0
		return res;
	}

	return c;
    21ec:	bfa8      	it	ge
    21ee:	f89d 0007 	ldrbge.w	r0, [sp, #7]
}
    21f2:	b003      	add	sp, #12
    21f4:	f85d fb04 	ldr.w	pc, [sp], #4
    21f8:	2000081c 	.word	0x2000081c

000021fc <console_init>:

int console_init(void)
{
    21fc:	b538      	push	{r3, r4, r5, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    21fe:	4d10      	ldr	r5, [pc, #64]	; (2240 <console_init+0x44>)
    2200:	4628      	mov	r0, r5
    2202:	f008 f848 	bl	a296 <z_device_ready>
    2206:	b1a8      	cbz	r0, 2234 <console_init+0x38>
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (!device_is_ready(uart_dev)) {
		return -ENODEV;
	}

	ret = tty_init(&console_serial, uart_dev);
    2208:	480e      	ldr	r0, [pc, #56]	; (2244 <console_init+0x48>)
    220a:	4629      	mov	r1, r5
    220c:	f000 fde8 	bl	2de0 <tty_init>

	if (ret) {
    2210:	4604      	mov	r4, r0
    2212:	b968      	cbnz	r0, 2230 <console_init+0x34>

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    2214:	68ab      	ldr	r3, [r5, #8]
    2216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2218:	b17b      	cbz	r3, 223a <console_init+0x3e>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    221a:	490b      	ldr	r1, [pc, #44]	; (2248 <console_init+0x4c>)
    221c:	4809      	ldr	r0, [pc, #36]	; (2244 <console_init+0x48>)
    221e:	f44f 7200 	mov.w	r2, #512	; 0x200
    2222:	f007 fc1b 	bl	9a5c <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    2226:	4909      	ldr	r1, [pc, #36]	; (224c <console_init+0x50>)
    2228:	4806      	ldr	r0, [pc, #24]	; (2244 <console_init+0x48>)
    222a:	2240      	movs	r2, #64	; 0x40
    222c:	f007 fbfd 	bl	9a2a <tty_set_rx_buf>

	return 0;
}
    2230:	4620      	mov	r0, r4
    2232:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    2234:	f06f 0412 	mvn.w	r4, #18
    2238:	e7fa      	b.n	2230 <console_init+0x34>
			return -ENOTSUP;
    223a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    223e:	e7f7      	b.n	2230 <console_init+0x34>
    2240:	0000a4e0 	.word	0x0000a4e0
    2244:	2000081c 	.word	0x2000081c
    2248:	200011c6 	.word	0x200011c6
    224c:	20001186 	.word	0x20001186

00002250 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    2250:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    2254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2258:	4606      	mov	r6, r0
    225a:	460d      	mov	r5, r1
    225c:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    225e:	d369      	bcc.n	2334 <sys_heap_init+0xe4>
    2260:	493d      	ldr	r1, [pc, #244]	; (2358 <sys_heap_init+0x108>)
    2262:	4a3e      	ldr	r2, [pc, #248]	; (235c <sys_heap_init+0x10c>)
    2264:	483e      	ldr	r0, [pc, #248]	; (2360 <sys_heap_init+0x110>)
    2266:	f240 13a5 	movw	r3, #421	; 0x1a5
    226a:	f007 fa52 	bl	9712 <printk>
    226e:	483d      	ldr	r0, [pc, #244]	; (2364 <sys_heap_init+0x114>)
    2270:	f007 fa4f 	bl	9712 <printk>
    2274:	f240 11a5 	movw	r1, #421	; 0x1a5
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2278:	4838      	ldr	r0, [pc, #224]	; (235c <sys_heap_init+0x10c>)
    227a:	f007 f947 	bl	950c <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    227e:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2280:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2282:	443d      	add	r5, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2284:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2288:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    228c:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    228e:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    2290:	ea4f 07d5 	mov.w	r7, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    2294:	d80e      	bhi.n	22b4 <sys_heap_init+0x64>
    2296:	4934      	ldr	r1, [pc, #208]	; (2368 <sys_heap_init+0x118>)
    2298:	4a30      	ldr	r2, [pc, #192]	; (235c <sys_heap_init+0x10c>)
    229a:	4831      	ldr	r0, [pc, #196]	; (2360 <sys_heap_init+0x110>)
    229c:	f240 13b5 	movw	r3, #437	; 0x1b5
    22a0:	f007 fa37 	bl	9712 <printk>
    22a4:	4831      	ldr	r0, [pc, #196]	; (236c <sys_heap_init+0x11c>)
    22a6:	f007 fa34 	bl	9712 <printk>
    22aa:	482c      	ldr	r0, [pc, #176]	; (235c <sys_heap_init+0x10c>)
    22ac:	f240 11b5 	movw	r1, #437	; 0x1b5
    22b0:	f007 f92c 	bl	950c <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    22b4:	fab7 f887 	clz	r8, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    22b8:	f1c8 0824 	rsb	r8, r8, #36	; 0x24
    22bc:	ea4f 0888 	mov.w	r8, r8, lsl #2
	heap->heap = h;
    22c0:	6034      	str	r4, [r6, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    22c2:	f108 0607 	add.w	r6, r8, #7
	h->avail_buckets = 0;
    22c6:	2300      	movs	r3, #0
    22c8:	08f6      	lsrs	r6, r6, #3
    22ca:	60e3      	str	r3, [r4, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    22cc:	1c73      	adds	r3, r6, #1
    22ce:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    22d0:	60a7      	str	r7, [r4, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    22d2:	d90e      	bls.n	22f2 <sys_heap_init+0xa2>
    22d4:	4926      	ldr	r1, [pc, #152]	; (2370 <sys_heap_init+0x120>)
    22d6:	4a21      	ldr	r2, [pc, #132]	; (235c <sys_heap_init+0x10c>)
    22d8:	4821      	ldr	r0, [pc, #132]	; (2360 <sys_heap_init+0x110>)
    22da:	f240 13c5 	movw	r3, #453	; 0x1c5
    22de:	f007 fa18 	bl	9712 <printk>
    22e2:	4822      	ldr	r0, [pc, #136]	; (236c <sys_heap_init+0x11c>)
    22e4:	f007 fa15 	bl	9712 <printk>
    22e8:	481c      	ldr	r0, [pc, #112]	; (235c <sys_heap_init+0x10c>)
    22ea:	f240 11c5 	movw	r1, #453	; 0x1c5
    22ee:	f007 f90d 	bl	950c <assert_post_action>
    22f2:	f104 0210 	add.w	r2, r4, #16
    22f6:	44a0      	add	r8, r4
    22f8:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
    22fa:	4590      	cmp	r8, r2
    22fc:	d129      	bne.n	2352 <sys_heap_init+0x102>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    22fe:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2300:	f042 0201 	orr.w	r2, r2, #1
    2304:	8062      	strh	r2, [r4, #2]
		((uint16_t *)cmem)[f] = val;
    2306:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    230a:	1bba      	subs	r2, r7, r6
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    230c:	0050      	lsls	r0, r2, #1
		((uint16_t *)cmem)[f] = val;
    230e:	8023      	strh	r3, [r4, #0]
    2310:	8048      	strh	r0, [r1, #2]
    2312:	1961      	adds	r1, r4, r5
    2314:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
	void *cmem = &buf[c];
    2318:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		((uint16_t *)cmem)[f] = val;
    231c:	804b      	strh	r3, [r1, #2]
    231e:	5362      	strh	r2, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2320:	887b      	ldrh	r3, [r7, #2]
    2322:	f043 0301 	orr.w	r3, r3, #1
    2326:	807b      	strh	r3, [r7, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    2328:	4631      	mov	r1, r6
    232a:	4620      	mov	r0, r4
}
    232c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    2330:	f007 b95a 	b.w	95e8 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2334:	2a04      	cmp	r2, #4
    2336:	d8a2      	bhi.n	227e <sys_heap_init+0x2e>
    2338:	490e      	ldr	r1, [pc, #56]	; (2374 <sys_heap_init+0x124>)
    233a:	4a08      	ldr	r2, [pc, #32]	; (235c <sys_heap_init+0x10c>)
    233c:	4808      	ldr	r0, [pc, #32]	; (2360 <sys_heap_init+0x110>)
    233e:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
    2342:	f007 f9e6 	bl	9712 <printk>
    2346:	4809      	ldr	r0, [pc, #36]	; (236c <sys_heap_init+0x11c>)
    2348:	f007 f9e3 	bl	9712 <printk>
    234c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    2350:	e792      	b.n	2278 <sys_heap_init+0x28>
		h->buckets[i].next = 0;
    2352:	f842 3b04 	str.w	r3, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    2356:	e7d0      	b.n	22fa <sys_heap_init+0xaa>
    2358:	0000b140 	.word	0x0000b140
    235c:	0000b074 	.word	0x0000b074
    2360:	0000a9a4 	.word	0x0000a9a4
    2364:	0000b156 	.word	0x0000b156
    2368:	0000b1a7 	.word	0x0000b1a7
    236c:	0000b18e 	.word	0x0000b18e
    2370:	0000b1d0 	.word	0x0000b1d0
    2374:	0000b16d 	.word	0x0000b16d

00002378 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    2378:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    237a:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    237e:	2b02      	cmp	r3, #2
{
    2380:	b570      	push	{r4, r5, r6, lr}
    2382:	4604      	mov	r4, r0
    2384:	460e      	mov	r6, r1
	notify->result = res;
    2386:	6081      	str	r1, [r0, #8]
	switch (method) {
    2388:	d010      	beq.n	23ac <sys_notify_finalize+0x34>
    238a:	2b03      	cmp	r3, #3
    238c:	d004      	beq.n	2398 <sys_notify_finalize+0x20>
    238e:	2b01      	cmp	r3, #1
    2390:	d10f      	bne.n	23b2 <sys_notify_finalize+0x3a>
    2392:	2500      	movs	r5, #0
    2394:	4628      	mov	r0, r5
    2396:	e001      	b.n	239c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    2398:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    239a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    239c:	2300      	movs	r3, #0
    239e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    23a0:	b110      	cbz	r0, 23a8 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    23a2:	4631      	mov	r1, r6
    23a4:	f004 fae8 	bl	6978 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    23a8:	4628      	mov	r0, r5
    23aa:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    23ac:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    23ae:	2500      	movs	r5, #0
		break;
    23b0:	e7f4      	b.n	239c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    23b2:	4a06      	ldr	r2, [pc, #24]	; (23cc <sys_notify_finalize+0x54>)
    23b4:	4906      	ldr	r1, [pc, #24]	; (23d0 <sys_notify_finalize+0x58>)
    23b6:	4807      	ldr	r0, [pc, #28]	; (23d4 <sys_notify_finalize+0x5c>)
    23b8:	2345      	movs	r3, #69	; 0x45
    23ba:	f007 f9aa 	bl	9712 <printk>
    23be:	4803      	ldr	r0, [pc, #12]	; (23cc <sys_notify_finalize+0x54>)
    23c0:	2145      	movs	r1, #69	; 0x45
    23c2:	f007 f8a3 	bl	950c <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    23c6:	2500      	movs	r5, #0
    23c8:	e7e7      	b.n	239a <sys_notify_finalize+0x22>
    23ca:	bf00      	nop
    23cc:	0000b1fb 	.word	0x0000b1fb
    23d0:	0000b9e0 	.word	0x0000b9e0
    23d4:	0000a9a4 	.word	0x0000a9a4

000023d8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    23d8:	4801      	ldr	r0, [pc, #4]	; (23e0 <nrf_cc3xx_platform_abort_init+0x8>)
    23da:	f006 becf 	b.w	917c <nrf_cc3xx_platform_set_abort>
    23de:	bf00      	nop
    23e0:	0000a6f8 	.word	0x0000a6f8

000023e4 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    23e4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    23e6:	b1d0      	cbz	r0, 241e <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    23e8:	6843      	ldr	r3, [r0, #4]
    23ea:	2b04      	cmp	r3, #4
    23ec:	d111      	bne.n	2412 <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    23ee:	2200      	movs	r2, #0
    23f0:	6803      	ldr	r3, [r0, #0]
    23f2:	f3bf 8f5b 	dmb	ish
    23f6:	e853 1f00 	ldrex	r1, [r3]
    23fa:	2901      	cmp	r1, #1
    23fc:	d103      	bne.n	2406 <mutex_unlock_platform+0x22>
    23fe:	e843 2000 	strex	r0, r2, [r3]
    2402:	2800      	cmp	r0, #0
    2404:	d1f7      	bne.n	23f6 <mutex_unlock_platform+0x12>
    2406:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    240a:	4807      	ldr	r0, [pc, #28]	; (2428 <mutex_unlock_platform+0x44>)
    240c:	bf08      	it	eq
    240e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    2410:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2412:	b13b      	cbz	r3, 2424 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2414:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2416:	f004 f971 	bl	66fc <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    241a:	2000      	movs	r0, #0
    241c:	e7f8      	b.n	2410 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    241e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2422:	e7f5      	b.n	2410 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2424:	4801      	ldr	r0, [pc, #4]	; (242c <mutex_unlock_platform+0x48>)
    2426:	e7f3      	b.n	2410 <mutex_unlock_platform+0x2c>
    2428:	ffff8fe9 	.word	0xffff8fe9
    242c:	ffff8fea 	.word	0xffff8fea

00002430 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2430:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2432:	4604      	mov	r4, r0
    2434:	b918      	cbnz	r0, 243e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2436:	4b0d      	ldr	r3, [pc, #52]	; (246c <mutex_free_platform+0x3c>)
    2438:	480d      	ldr	r0, [pc, #52]	; (2470 <mutex_free_platform+0x40>)
    243a:	685b      	ldr	r3, [r3, #4]
    243c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    243e:	6861      	ldr	r1, [r4, #4]
    2440:	2908      	cmp	r1, #8
    2442:	d00d      	beq.n	2460 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2444:	f031 0304 	bics.w	r3, r1, #4
    2448:	d00a      	beq.n	2460 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    244a:	f011 0102 	ands.w	r1, r1, #2
    244e:	d008      	beq.n	2462 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2450:	4808      	ldr	r0, [pc, #32]	; (2474 <mutex_free_platform+0x44>)
    2452:	4621      	mov	r1, r4
    2454:	f003 ffee 	bl	6434 <k_mem_slab_free>
        mutex->mutex = NULL;
    2458:	2300      	movs	r3, #0
    245a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    245c:	2300      	movs	r3, #0
    245e:	6063      	str	r3, [r4, #4]
}
    2460:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2462:	6820      	ldr	r0, [r4, #0]
    2464:	2214      	movs	r2, #20
    2466:	f007 fb46 	bl	9af6 <memset>
    246a:	e7f7      	b.n	245c <mutex_free_platform+0x2c>
    246c:	200001c0 	.word	0x200001c0
    2470:	0000b21e 	.word	0x0000b21e
    2474:	20000870 	.word	0x20000870

00002478 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2478:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    247a:	4604      	mov	r4, r0
    247c:	b918      	cbnz	r0, 2486 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    247e:	4b16      	ldr	r3, [pc, #88]	; (24d8 <mutex_init_platform+0x60>)
    2480:	4816      	ldr	r0, [pc, #88]	; (24dc <mutex_init_platform+0x64>)
    2482:	685b      	ldr	r3, [r3, #4]
    2484:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2486:	6863      	ldr	r3, [r4, #4]
    2488:	2b04      	cmp	r3, #4
    248a:	d023      	beq.n	24d4 <mutex_init_platform+0x5c>
    248c:	2b08      	cmp	r3, #8
    248e:	d021      	beq.n	24d4 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2490:	b9cb      	cbnz	r3, 24c6 <mutex_init_platform+0x4e>
    2492:	6823      	ldr	r3, [r4, #0]
    2494:	b9bb      	cbnz	r3, 24c6 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2496:	4812      	ldr	r0, [pc, #72]	; (24e0 <mutex_init_platform+0x68>)
    2498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    249c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    24a0:	4621      	mov	r1, r4
    24a2:	f003 ff5b 	bl	635c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    24a6:	b908      	cbnz	r0, 24ac <mutex_init_platform+0x34>
    24a8:	6823      	ldr	r3, [r4, #0]
    24aa:	b91b      	cbnz	r3, 24b4 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    24ac:	4b0a      	ldr	r3, [pc, #40]	; (24d8 <mutex_init_platform+0x60>)
    24ae:	480d      	ldr	r0, [pc, #52]	; (24e4 <mutex_init_platform+0x6c>)
    24b0:	685b      	ldr	r3, [r3, #4]
    24b2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    24b4:	6820      	ldr	r0, [r4, #0]
    24b6:	2214      	movs	r2, #20
    24b8:	2100      	movs	r1, #0
    24ba:	f007 fb1c 	bl	9af6 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    24be:	6863      	ldr	r3, [r4, #4]
    24c0:	f043 0302 	orr.w	r3, r3, #2
    24c4:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    24c6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    24c8:	f007 ff12 	bl	a2f0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    24cc:	6863      	ldr	r3, [r4, #4]
    24ce:	f043 0301 	orr.w	r3, r3, #1
    24d2:	6063      	str	r3, [r4, #4]
}
    24d4:	bd10      	pop	{r4, pc}
    24d6:	bf00      	nop
    24d8:	200001c0 	.word	0x200001c0
    24dc:	0000b21e 	.word	0x0000b21e
    24e0:	20000870 	.word	0x20000870
    24e4:	0000b244 	.word	0x0000b244

000024e8 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    24e8:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    24ea:	b308      	cbz	r0, 2530 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    24ec:	6843      	ldr	r3, [r0, #4]
    24ee:	2b04      	cmp	r3, #4
    24f0:	d110      	bne.n	2514 <mutex_lock_platform+0x2c>
    24f2:	2201      	movs	r2, #1
    24f4:	6803      	ldr	r3, [r0, #0]
    24f6:	f3bf 8f5b 	dmb	ish
    24fa:	e853 1f00 	ldrex	r1, [r3]
    24fe:	2900      	cmp	r1, #0
    2500:	d103      	bne.n	250a <mutex_lock_platform+0x22>
    2502:	e843 2000 	strex	r0, r2, [r3]
    2506:	2800      	cmp	r0, #0
    2508:	d1f7      	bne.n	24fa <mutex_lock_platform+0x12>
    250a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    250e:	d10b      	bne.n	2528 <mutex_lock_platform+0x40>
    2510:	2000      	movs	r0, #0
}
    2512:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2514:	b153      	cbz	r3, 252c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2516:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    251c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2520:	f003 ffec 	bl	64fc <z_impl_k_mutex_lock>
        if (ret == 0) {
    2524:	2800      	cmp	r0, #0
    2526:	d0f3      	beq.n	2510 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2528:	4803      	ldr	r0, [pc, #12]	; (2538 <mutex_lock_platform+0x50>)
    252a:	e7f2      	b.n	2512 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    252c:	4803      	ldr	r0, [pc, #12]	; (253c <mutex_lock_platform+0x54>)
    252e:	e7f0      	b.n	2512 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2530:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2534:	e7ed      	b.n	2512 <mutex_lock_platform+0x2a>
    2536:	bf00      	nop
    2538:	ffff8fe9 	.word	0xffff8fe9
    253c:	ffff8fea 	.word	0xffff8fea

00002540 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2540:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2542:	4906      	ldr	r1, [pc, #24]	; (255c <nrf_cc3xx_platform_mutex_init+0x1c>)
    2544:	4806      	ldr	r0, [pc, #24]	; (2560 <nrf_cc3xx_platform_mutex_init+0x20>)
    2546:	2340      	movs	r3, #64	; 0x40
    2548:	2214      	movs	r2, #20
    254a:	f007 feb5 	bl	a2b8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    254e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2552:	4904      	ldr	r1, [pc, #16]	; (2564 <nrf_cc3xx_platform_mutex_init+0x24>)
    2554:	4804      	ldr	r0, [pc, #16]	; (2568 <nrf_cc3xx_platform_mutex_init+0x28>)
    2556:	f006 be73 	b.w	9240 <nrf_cc3xx_platform_set_mutexes>
    255a:	bf00      	nop
    255c:	20000890 	.word	0x20000890
    2560:	20000870 	.word	0x20000870
    2564:	0000a710 	.word	0x0000a710
    2568:	0000a700 	.word	0x0000a700

0000256c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    256c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2570:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    2574:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2576:	f019 0f08 	tst.w	r9, #8
{
    257a:	4604      	mov	r4, r0
    257c:	9203      	str	r2, [sp, #12]
	if (processing) {
    257e:	d022      	beq.n	25c6 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    2580:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2582:	bf0c      	ite	eq
    2584:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2588:	f049 0920 	orrne.w	r9, r9, #32
    258c:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    2590:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2592:	4620      	mov	r0, r4
    2594:	f005 feb2 	bl	82fc <z_spin_unlock_valid>
    2598:	b968      	cbnz	r0, 25b6 <process_event+0x4a>
    259a:	4a9f      	ldr	r2, [pc, #636]	; (2818 <process_event+0x2ac>)
    259c:	499f      	ldr	r1, [pc, #636]	; (281c <process_event+0x2b0>)
    259e:	48a0      	ldr	r0, [pc, #640]	; (2820 <process_event+0x2b4>)
    25a0:	23ac      	movs	r3, #172	; 0xac
    25a2:	f007 f8b6 	bl	9712 <printk>
    25a6:	489f      	ldr	r0, [pc, #636]	; (2824 <process_event+0x2b8>)
    25a8:	4621      	mov	r1, r4
    25aa:	f007 f8b2 	bl	9712 <printk>
    25ae:	489a      	ldr	r0, [pc, #616]	; (2818 <process_event+0x2ac>)
    25b0:	21ac      	movs	r1, #172	; 0xac
    25b2:	f006 ffab 	bl	950c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    25b6:	9b03      	ldr	r3, [sp, #12]
    25b8:	f383 8811 	msr	BASEPRI, r3
    25bc:	f3bf 8f6f 	isb	sy
}
    25c0:	b005      	add	sp, #20
    25c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    25c6:	4f98      	ldr	r7, [pc, #608]	; (2828 <process_event+0x2bc>)
    25c8:	f8df 8254 	ldr.w	r8, [pc, #596]	; 2820 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    25cc:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    25d0:	2902      	cmp	r1, #2
    25d2:	d106      	bne.n	25e2 <process_event+0x76>
			evt = process_recheck(mgr);
    25d4:	4620      	mov	r0, r4
    25d6:	f007 f846 	bl	9666 <process_recheck>
		if (evt == EVT_NOP) {
    25da:	2800      	cmp	r0, #0
    25dc:	d0d8      	beq.n	2590 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    25de:	2801      	cmp	r0, #1
    25e0:	d168      	bne.n	26b4 <process_event+0x148>
			res = mgr->last_res;
    25e2:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    25e6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    25e8:	f1bb 0f00 	cmp.w	fp, #0
    25ec:	da0a      	bge.n	2604 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    25ee:	2600      	movs	r6, #0
		*clients = mgr->clients;
    25f0:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    25f2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    25f6:	e9c4 6600 	strd	r6, r6, [r4]
    25fa:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    25fe:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    2600:	9601      	str	r6, [sp, #4]
    2602:	e027      	b.n	2654 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2604:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2608:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    260a:	2901      	cmp	r1, #1
    260c:	d834      	bhi.n	2678 <process_event+0x10c>
	list->head = NULL;
    260e:	2100      	movs	r1, #0
    2610:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    2614:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    2616:	6825      	ldr	r5, [r4, #0]
    2618:	b29b      	uxth	r3, r3
	list->tail = NULL;
    261a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    261e:	d10c      	bne.n	263a <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2620:	428d      	cmp	r5, r1
    2622:	462a      	mov	r2, r5
    2624:	bf38      	it	cc
    2626:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2628:	b12a      	cbz	r2, 2636 <process_event+0xca>
				mgr->refs += 1U;
    262a:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    262c:	6812      	ldr	r2, [r2, #0]
    262e:	3101      	adds	r1, #1
    2630:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2632:	2a00      	cmp	r2, #0
    2634:	d1f8      	bne.n	2628 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2636:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    263a:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    263c:	4620      	mov	r0, r4
    263e:	f007 f812 	bl	9666 <process_recheck>
    2642:	4606      	mov	r6, r0
    2644:	2800      	cmp	r0, #0
    2646:	d0db      	beq.n	2600 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2648:	8ba3      	ldrh	r3, [r4, #28]
    264a:	f043 0320 	orr.w	r3, r3, #32
    264e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    2650:	2300      	movs	r3, #0
    2652:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2654:	8ba3      	ldrh	r3, [r4, #28]
    2656:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    265a:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    265c:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    265e:	d003      	beq.n	2668 <process_event+0xfc>
		if (do_monitors
    2660:	68a2      	ldr	r2, [r4, #8]
    2662:	2a00      	cmp	r2, #0
    2664:	f040 80f0 	bne.w	2848 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    2668:	b91d      	cbnz	r5, 2672 <process_event+0x106>
		    || (transit != NULL)) {
    266a:	9a01      	ldr	r2, [sp, #4]
    266c:	2a00      	cmp	r2, #0
    266e:	f000 8136 	beq.w	28de <process_event+0x372>
    2672:	f04f 0900 	mov.w	r9, #0
    2676:	e0e9      	b.n	284c <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    2678:	2a04      	cmp	r2, #4
    267a:	d10e      	bne.n	269a <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    267c:	f023 0307 	bic.w	r3, r3, #7
    2680:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    2682:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    2684:	4620      	mov	r0, r4
    2686:	f006 ffee 	bl	9666 <process_recheck>
    268a:	4605      	mov	r5, r0
    268c:	b118      	cbz	r0, 2696 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    268e:	f042 0220 	orr.w	r2, r2, #32
    2692:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    2694:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    2696:	9501      	str	r5, [sp, #4]
    2698:	e7dc      	b.n	2654 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    269a:	4640      	mov	r0, r8
    269c:	4963      	ldr	r1, [pc, #396]	; (282c <process_event+0x2c0>)
    269e:	f240 131b 	movw	r3, #283	; 0x11b
    26a2:	463a      	mov	r2, r7
    26a4:	f007 f835 	bl	9712 <printk>
    26a8:	f240 111b 	movw	r1, #283	; 0x11b
    26ac:	4638      	mov	r0, r7
    26ae:	f006 ff2d 	bl	950c <assert_post_action>
    26b2:	e7ef      	b.n	2694 <process_event+0x128>
		} else if (evt == EVT_START) {
    26b4:	2803      	cmp	r0, #3
    26b6:	d135      	bne.n	2724 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    26b8:	f1b9 0f00 	cmp.w	r9, #0
    26bc:	d00b      	beq.n	26d6 <process_event+0x16a>
    26be:	495c      	ldr	r1, [pc, #368]	; (2830 <process_event+0x2c4>)
    26c0:	4640      	mov	r0, r8
    26c2:	f44f 73ab 	mov.w	r3, #342	; 0x156
    26c6:	463a      	mov	r2, r7
    26c8:	f007 f823 	bl	9712 <printk>
    26cc:	f44f 71ab 	mov.w	r1, #342	; 0x156
    26d0:	4638      	mov	r0, r7
    26d2:	f006 ff1b 	bl	950c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    26d6:	6823      	ldr	r3, [r4, #0]
    26d8:	b95b      	cbnz	r3, 26f2 <process_event+0x186>
    26da:	4956      	ldr	r1, [pc, #344]	; (2834 <process_event+0x2c8>)
    26dc:	4640      	mov	r0, r8
    26de:	f240 1357 	movw	r3, #343	; 0x157
    26e2:	463a      	mov	r2, r7
    26e4:	f007 f815 	bl	9712 <printk>
    26e8:	f240 1157 	movw	r1, #343	; 0x157
    26ec:	4638      	mov	r0, r7
    26ee:	f006 ff0d 	bl	950c <assert_post_action>
			transit = mgr->transitions->start;
    26f2:	6923      	ldr	r3, [r4, #16]
    26f4:	681b      	ldr	r3, [r3, #0]
    26f6:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    26f8:	b95b      	cbnz	r3, 2712 <process_event+0x1a6>
    26fa:	494f      	ldr	r1, [pc, #316]	; (2838 <process_event+0x2cc>)
    26fc:	4640      	mov	r0, r8
    26fe:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    2702:	463a      	mov	r2, r7
    2704:	f007 f805 	bl	9712 <printk>
    2708:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    270c:	4638      	mov	r0, r7
    270e:	f006 fefd 	bl	950c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2712:	8ba3      	ldrh	r3, [r4, #28]
    2714:	f023 0307 	bic.w	r3, r3, #7
    2718:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    271c:	83a3      	strh	r3, [r4, #28]
}
    271e:	2500      	movs	r5, #0
		res = 0;
    2720:	46ab      	mov	fp, r5
}
    2722:	e797      	b.n	2654 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    2724:	2804      	cmp	r0, #4
    2726:	d132      	bne.n	278e <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    2728:	f1b9 0f02 	cmp.w	r9, #2
    272c:	d00b      	beq.n	2746 <process_event+0x1da>
    272e:	4943      	ldr	r1, [pc, #268]	; (283c <process_event+0x2d0>)
    2730:	4640      	mov	r0, r8
    2732:	f240 135d 	movw	r3, #349	; 0x15d
    2736:	463a      	mov	r2, r7
    2738:	f006 ffeb 	bl	9712 <printk>
    273c:	f240 115d 	movw	r1, #349	; 0x15d
    2740:	4638      	mov	r0, r7
    2742:	f006 fee3 	bl	950c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    2746:	8be3      	ldrh	r3, [r4, #30]
    2748:	b15b      	cbz	r3, 2762 <process_event+0x1f6>
    274a:	493d      	ldr	r1, [pc, #244]	; (2840 <process_event+0x2d4>)
    274c:	4640      	mov	r0, r8
    274e:	f44f 73af 	mov.w	r3, #350	; 0x15e
    2752:	463a      	mov	r2, r7
    2754:	f006 ffdd 	bl	9712 <printk>
    2758:	f44f 71af 	mov.w	r1, #350	; 0x15e
    275c:	4638      	mov	r0, r7
    275e:	f006 fed5 	bl	950c <assert_post_action>
			transit = mgr->transitions->stop;
    2762:	6923      	ldr	r3, [r4, #16]
    2764:	685b      	ldr	r3, [r3, #4]
    2766:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    2768:	b95b      	cbnz	r3, 2782 <process_event+0x216>
    276a:	4933      	ldr	r1, [pc, #204]	; (2838 <process_event+0x2cc>)
    276c:	4640      	mov	r0, r8
    276e:	f240 1361 	movw	r3, #353	; 0x161
    2772:	463a      	mov	r2, r7
    2774:	f006 ffcd 	bl	9712 <printk>
    2778:	f240 1161 	movw	r1, #353	; 0x161
    277c:	4638      	mov	r0, r7
    277e:	f006 fec5 	bl	950c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2782:	8ba3      	ldrh	r3, [r4, #28]
    2784:	f023 0307 	bic.w	r3, r3, #7
    2788:	f043 0304 	orr.w	r3, r3, #4
    278c:	e7c6      	b.n	271c <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    278e:	2805      	cmp	r0, #5
    2790:	d132      	bne.n	27f8 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2792:	f1b9 0f01 	cmp.w	r9, #1
    2796:	d00b      	beq.n	27b0 <process_event+0x244>
    2798:	492a      	ldr	r1, [pc, #168]	; (2844 <process_event+0x2d8>)
    279a:	4640      	mov	r0, r8
    279c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    27a0:	463a      	mov	r2, r7
    27a2:	f006 ffb6 	bl	9712 <printk>
    27a6:	f44f 71b2 	mov.w	r1, #356	; 0x164
    27aa:	4638      	mov	r0, r7
    27ac:	f006 feae 	bl	950c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    27b0:	6823      	ldr	r3, [r4, #0]
    27b2:	b95b      	cbnz	r3, 27cc <process_event+0x260>
    27b4:	491f      	ldr	r1, [pc, #124]	; (2834 <process_event+0x2c8>)
    27b6:	4640      	mov	r0, r8
    27b8:	f240 1365 	movw	r3, #357	; 0x165
    27bc:	463a      	mov	r2, r7
    27be:	f006 ffa8 	bl	9712 <printk>
    27c2:	f240 1165 	movw	r1, #357	; 0x165
    27c6:	4638      	mov	r0, r7
    27c8:	f006 fea0 	bl	950c <assert_post_action>
			transit = mgr->transitions->reset;
    27cc:	6923      	ldr	r3, [r4, #16]
    27ce:	689b      	ldr	r3, [r3, #8]
    27d0:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    27d2:	b95b      	cbnz	r3, 27ec <process_event+0x280>
    27d4:	4918      	ldr	r1, [pc, #96]	; (2838 <process_event+0x2cc>)
    27d6:	4640      	mov	r0, r8
    27d8:	f44f 73b4 	mov.w	r3, #360	; 0x168
    27dc:	463a      	mov	r2, r7
    27de:	f006 ff98 	bl	9712 <printk>
    27e2:	f44f 71b4 	mov.w	r1, #360	; 0x168
    27e6:	4638      	mov	r0, r7
    27e8:	f006 fe90 	bl	950c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    27ec:	8ba3      	ldrh	r3, [r4, #28]
    27ee:	f023 0307 	bic.w	r3, r3, #7
    27f2:	f043 0305 	orr.w	r3, r3, #5
    27f6:	e791      	b.n	271c <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    27f8:	490c      	ldr	r1, [pc, #48]	; (282c <process_event+0x2c0>)
    27fa:	f240 136b 	movw	r3, #363	; 0x16b
    27fe:	463a      	mov	r2, r7
    2800:	4640      	mov	r0, r8
    2802:	f006 ff86 	bl	9712 <printk>
    2806:	2500      	movs	r5, #0
    2808:	f240 116b 	movw	r1, #363	; 0x16b
    280c:	4638      	mov	r0, r7
    280e:	f006 fe7d 	bl	950c <assert_post_action>
		onoff_transition_fn transit = NULL;
    2812:	9501      	str	r5, [sp, #4]
    2814:	e784      	b.n	2720 <process_event+0x1b4>
    2816:	bf00      	nop
    2818:	0000b314 	.word	0x0000b314
    281c:	0000b33a 	.word	0x0000b33a
    2820:	0000a9a4 	.word	0x0000a9a4
    2824:	0000b351 	.word	0x0000b351
    2828:	0000b271 	.word	0x0000b271
    282c:	0000b9e0 	.word	0x0000b9e0
    2830:	0000b293 	.word	0x0000b293
    2834:	0000b29f 	.word	0x0000b29f
    2838:	0000b2c2 	.word	0x0000b2c2
    283c:	0000b2d9 	.word	0x0000b2d9
    2840:	0000b2ef 	.word	0x0000b2ef
    2844:	0000b2fe 	.word	0x0000b2fe
				   && !sys_slist_is_empty(&mgr->monitors);
    2848:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    284c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    2850:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    2854:	83a3      	strh	r3, [r4, #28]
    2856:	4650      	mov	r0, sl
    2858:	f005 fd50 	bl	82fc <z_spin_unlock_valid>
    285c:	b968      	cbnz	r0, 287a <process_event+0x30e>
    285e:	4a3a      	ldr	r2, [pc, #232]	; (2948 <process_event+0x3dc>)
    2860:	493a      	ldr	r1, [pc, #232]	; (294c <process_event+0x3e0>)
    2862:	23ac      	movs	r3, #172	; 0xac
    2864:	4640      	mov	r0, r8
    2866:	f006 ff54 	bl	9712 <printk>
    286a:	4839      	ldr	r0, [pc, #228]	; (2950 <process_event+0x3e4>)
    286c:	4651      	mov	r1, sl
    286e:	f006 ff50 	bl	9712 <printk>
    2872:	4835      	ldr	r0, [pc, #212]	; (2948 <process_event+0x3dc>)
    2874:	21ac      	movs	r1, #172	; 0xac
    2876:	f006 fe49 	bl	950c <assert_post_action>
    287a:	9b03      	ldr	r3, [sp, #12]
    287c:	f383 8811 	msr	BASEPRI, r3
    2880:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2884:	f1b9 0f00 	cmp.w	r9, #0
    2888:	d138      	bne.n	28fc <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    288a:	2d00      	cmp	r5, #0
    288c:	d14b      	bne.n	2926 <process_event+0x3ba>
			if (transit != NULL) {
    288e:	9b01      	ldr	r3, [sp, #4]
    2890:	b113      	cbz	r3, 2898 <process_event+0x32c>
				transit(mgr, transition_complete);
    2892:	4930      	ldr	r1, [pc, #192]	; (2954 <process_event+0x3e8>)
    2894:	4620      	mov	r0, r4
    2896:	4798      	blx	r3
	__asm__ volatile(
    2898:	f04f 0320 	mov.w	r3, #32
    289c:	f3ef 8b11 	mrs	fp, BASEPRI
    28a0:	f383 8812 	msr	BASEPRI_MAX, r3
    28a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    28a8:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    28aa:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    28ae:	f005 fd17 	bl	82e0 <z_spin_lock_valid>
    28b2:	b968      	cbnz	r0, 28d0 <process_event+0x364>
    28b4:	4a24      	ldr	r2, [pc, #144]	; (2948 <process_event+0x3dc>)
    28b6:	4928      	ldr	r1, [pc, #160]	; (2958 <process_event+0x3ec>)
    28b8:	2381      	movs	r3, #129	; 0x81
    28ba:	4640      	mov	r0, r8
    28bc:	f006 ff29 	bl	9712 <printk>
    28c0:	4826      	ldr	r0, [pc, #152]	; (295c <process_event+0x3f0>)
    28c2:	4651      	mov	r1, sl
    28c4:	f006 ff25 	bl	9712 <printk>
    28c8:	481f      	ldr	r0, [pc, #124]	; (2948 <process_event+0x3dc>)
    28ca:	2181      	movs	r1, #129	; 0x81
    28cc:	f006 fe1e 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    28d0:	4650      	mov	r0, sl
    28d2:	f005 fd23 	bl	831c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    28d6:	8ba3      	ldrh	r3, [r4, #28]
    28d8:	f023 0308 	bic.w	r3, r3, #8
    28dc:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    28de:	8ba3      	ldrh	r3, [r4, #28]
    28e0:	06da      	lsls	r2, r3, #27
    28e2:	d528      	bpl.n	2936 <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    28e4:	f023 0310 	bic.w	r3, r3, #16
    28e8:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    28ea:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    28ec:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    28f0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    28f4:	2900      	cmp	r1, #0
    28f6:	f47f ae6b 	bne.w	25d0 <process_event+0x64>
out:
    28fa:	e649      	b.n	2590 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    28fc:	68a1      	ldr	r1, [r4, #8]
    28fe:	2900      	cmp	r1, #0
    2900:	d0c3      	beq.n	288a <process_event+0x31e>
	return node->next;
    2902:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    2904:	9a02      	ldr	r2, [sp, #8]
    2906:	2b00      	cmp	r3, #0
    2908:	bf38      	it	cc
    290a:	2300      	movcc	r3, #0
    290c:	4699      	mov	r9, r3
    290e:	684b      	ldr	r3, [r1, #4]
    2910:	4620      	mov	r0, r4
    2912:	461e      	mov	r6, r3
    2914:	465b      	mov	r3, fp
    2916:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2918:	f1b9 0f00 	cmp.w	r9, #0
    291c:	d0b5      	beq.n	288a <process_event+0x31e>
    291e:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2922:	4649      	mov	r1, r9
    2924:	e7ee      	b.n	2904 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2926:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    2928:	9a02      	ldr	r2, [sp, #8]
    292a:	682d      	ldr	r5, [r5, #0]
    292c:	465b      	mov	r3, fp
    292e:	4620      	mov	r0, r4
    2930:	f006 feb5 	bl	969e <notify_one>
    2934:	e7a9      	b.n	288a <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2936:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    293a:	bf1e      	ittt	ne
    293c:	f023 0320 	bicne.w	r3, r3, #32
    2940:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    2942:	2102      	movne	r1, #2
    2944:	e7d2      	b.n	28ec <process_event+0x380>
    2946:	bf00      	nop
    2948:	0000b314 	.word	0x0000b314
    294c:	0000b33a 	.word	0x0000b33a
    2950:	0000b351 	.word	0x0000b351
    2954:	00002961 	.word	0x00002961
    2958:	0000b366 	.word	0x0000b366
    295c:	0000b37b 	.word	0x0000b37b

00002960 <transition_complete>:
{
    2960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2962:	4604      	mov	r4, r0
    2964:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2966:	f100 0614 	add.w	r6, r0, #20
    296a:	f04f 0320 	mov.w	r3, #32
    296e:	f3ef 8711 	mrs	r7, BASEPRI
    2972:	f383 8812 	msr	BASEPRI_MAX, r3
    2976:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    297a:	4630      	mov	r0, r6
    297c:	f005 fcb0 	bl	82e0 <z_spin_lock_valid>
    2980:	b968      	cbnz	r0, 299e <transition_complete+0x3e>
    2982:	4a0c      	ldr	r2, [pc, #48]	; (29b4 <transition_complete+0x54>)
    2984:	490c      	ldr	r1, [pc, #48]	; (29b8 <transition_complete+0x58>)
    2986:	480d      	ldr	r0, [pc, #52]	; (29bc <transition_complete+0x5c>)
    2988:	2381      	movs	r3, #129	; 0x81
    298a:	f006 fec2 	bl	9712 <printk>
    298e:	480c      	ldr	r0, [pc, #48]	; (29c0 <transition_complete+0x60>)
    2990:	4631      	mov	r1, r6
    2992:	f006 febe 	bl	9712 <printk>
    2996:	4807      	ldr	r0, [pc, #28]	; (29b4 <transition_complete+0x54>)
    2998:	2181      	movs	r1, #129	; 0x81
    299a:	f006 fdb7 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    299e:	4630      	mov	r0, r6
    29a0:	f005 fcbc 	bl	831c <z_spin_lock_set_owner>
	mgr->last_res = res;
    29a4:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    29a6:	463a      	mov	r2, r7
    29a8:	4620      	mov	r0, r4
    29aa:	2101      	movs	r1, #1
}
    29ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    29b0:	f7ff bddc 	b.w	256c <process_event>
    29b4:	0000b314 	.word	0x0000b314
    29b8:	0000b366 	.word	0x0000b366
    29bc:	0000a9a4 	.word	0x0000a9a4
    29c0:	0000b37b 	.word	0x0000b37b

000029c4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    29c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    29c8:	4604      	mov	r4, r0
    29ca:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    29cc:	f006 fe7d 	bl	96ca <validate_args>

	if (rv < 0) {
    29d0:	1e05      	subs	r5, r0, #0
    29d2:	db5e      	blt.n	2a92 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    29d4:	f104 0914 	add.w	r9, r4, #20
    29d8:	f04f 0320 	mov.w	r3, #32
    29dc:	f3ef 8a11 	mrs	sl, BASEPRI
    29e0:	f383 8812 	msr	BASEPRI_MAX, r3
    29e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    29e8:	4648      	mov	r0, r9
    29ea:	f005 fc79 	bl	82e0 <z_spin_lock_valid>
    29ee:	b968      	cbnz	r0, 2a0c <onoff_request+0x48>
    29f0:	4a38      	ldr	r2, [pc, #224]	; (2ad4 <onoff_request+0x110>)
    29f2:	4939      	ldr	r1, [pc, #228]	; (2ad8 <onoff_request+0x114>)
    29f4:	4839      	ldr	r0, [pc, #228]	; (2adc <onoff_request+0x118>)
    29f6:	2381      	movs	r3, #129	; 0x81
    29f8:	f006 fe8b 	bl	9712 <printk>
    29fc:	4838      	ldr	r0, [pc, #224]	; (2ae0 <onoff_request+0x11c>)
    29fe:	4649      	mov	r1, r9
    2a00:	f006 fe87 	bl	9712 <printk>
    2a04:	4833      	ldr	r0, [pc, #204]	; (2ad4 <onoff_request+0x110>)
    2a06:	2181      	movs	r1, #129	; 0x81
    2a08:	f006 fd80 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    2a0c:	4648      	mov	r0, r9
    2a0e:	f005 fc85 	bl	831c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    2a12:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2a14:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    2a16:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2a1a:	428b      	cmp	r3, r1
    2a1c:	f002 0607 	and.w	r6, r2, #7
    2a20:	d050      	beq.n	2ac4 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    2a22:	2e02      	cmp	r6, #2
    2a24:	d124      	bne.n	2a70 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    2a26:	3301      	adds	r3, #1
    2a28:	83e3      	strh	r3, [r4, #30]
	rv = state;
    2a2a:	4635      	mov	r5, r6
		notify = true;
    2a2c:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2a30:	4648      	mov	r0, r9
    2a32:	f005 fc63 	bl	82fc <z_spin_unlock_valid>
    2a36:	b968      	cbnz	r0, 2a54 <onoff_request+0x90>
    2a38:	4a26      	ldr	r2, [pc, #152]	; (2ad4 <onoff_request+0x110>)
    2a3a:	492a      	ldr	r1, [pc, #168]	; (2ae4 <onoff_request+0x120>)
    2a3c:	4827      	ldr	r0, [pc, #156]	; (2adc <onoff_request+0x118>)
    2a3e:	23ac      	movs	r3, #172	; 0xac
    2a40:	f006 fe67 	bl	9712 <printk>
    2a44:	4828      	ldr	r0, [pc, #160]	; (2ae8 <onoff_request+0x124>)
    2a46:	4649      	mov	r1, r9
    2a48:	f006 fe63 	bl	9712 <printk>
    2a4c:	4821      	ldr	r0, [pc, #132]	; (2ad4 <onoff_request+0x110>)
    2a4e:	21ac      	movs	r1, #172	; 0xac
    2a50:	f006 fd5c 	bl	950c <assert_post_action>
	__asm__ volatile(
    2a54:	f38a 8811 	msr	BASEPRI, sl
    2a58:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    2a5c:	f1b8 0f00 	cmp.w	r8, #0
    2a60:	d017      	beq.n	2a92 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    2a62:	2300      	movs	r3, #0
    2a64:	4632      	mov	r2, r6
    2a66:	4639      	mov	r1, r7
    2a68:	4620      	mov	r0, r4
    2a6a:	f006 fe18 	bl	969e <notify_one>
    2a6e:	e010      	b.n	2a92 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    2a70:	0793      	lsls	r3, r2, #30
    2a72:	d001      	beq.n	2a78 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    2a74:	2e06      	cmp	r6, #6
    2a76:	d10f      	bne.n	2a98 <onoff_request+0xd4>
	parent->next = child;
    2a78:	2300      	movs	r3, #0
    2a7a:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    2a7c:	6863      	ldr	r3, [r4, #4]
    2a7e:	b9f3      	cbnz	r3, 2abe <onoff_request+0xfa>
	list->head = node;
    2a80:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    2a84:	4635      	mov	r5, r6
    2a86:	b9fe      	cbnz	r6, 2ac8 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    2a88:	4652      	mov	r2, sl
    2a8a:	2102      	movs	r1, #2
    2a8c:	4620      	mov	r0, r4
    2a8e:	f7ff fd6d 	bl	256c <process_event>
		}
	}

	return rv;
}
    2a92:	4628      	mov	r0, r5
    2a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    2a98:	2e05      	cmp	r6, #5
    2a9a:	d018      	beq.n	2ace <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2a9c:	2e01      	cmp	r6, #1
    2a9e:	d00b      	beq.n	2ab8 <onoff_request+0xf4>
    2aa0:	4912      	ldr	r1, [pc, #72]	; (2aec <onoff_request+0x128>)
    2aa2:	480e      	ldr	r0, [pc, #56]	; (2adc <onoff_request+0x118>)
    2aa4:	4a12      	ldr	r2, [pc, #72]	; (2af0 <onoff_request+0x12c>)
    2aa6:	f240 13c9 	movw	r3, #457	; 0x1c9
    2aaa:	f006 fe32 	bl	9712 <printk>
    2aae:	4810      	ldr	r0, [pc, #64]	; (2af0 <onoff_request+0x12c>)
    2ab0:	f240 11c9 	movw	r1, #457	; 0x1c9
    2ab4:	f006 fd2a 	bl	950c <assert_post_action>
		rv = -EIO;
    2ab8:	f06f 0504 	mvn.w	r5, #4
    2abc:	e004      	b.n	2ac8 <onoff_request+0x104>
	parent->next = child;
    2abe:	601f      	str	r7, [r3, #0]
	list->tail = node;
    2ac0:	6067      	str	r7, [r4, #4]
}
    2ac2:	e7df      	b.n	2a84 <onoff_request+0xc0>
		rv = -EAGAIN;
    2ac4:	f06f 050a 	mvn.w	r5, #10
    2ac8:	f04f 0800 	mov.w	r8, #0
    2acc:	e7b0      	b.n	2a30 <onoff_request+0x6c>
		rv = -ENOTSUP;
    2ace:	f06f 0585 	mvn.w	r5, #133	; 0x85
    2ad2:	e7f9      	b.n	2ac8 <onoff_request+0x104>
    2ad4:	0000b314 	.word	0x0000b314
    2ad8:	0000b366 	.word	0x0000b366
    2adc:	0000a9a4 	.word	0x0000a9a4
    2ae0:	0000b37b 	.word	0x0000b37b
    2ae4:	0000b33a 	.word	0x0000b33a
    2ae8:	0000b351 	.word	0x0000b351
    2aec:	0000b2fe 	.word	0x0000b2fe
    2af0:	0000b271 	.word	0x0000b271

00002af4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2af8:	4605      	mov	r5, r0
	__asm__ volatile(
    2afa:	f04f 0320 	mov.w	r3, #32
    2afe:	f3ef 8611 	mrs	r6, BASEPRI
    2b02:	f383 8812 	msr	BASEPRI_MAX, r3
    2b06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2b0a:	4823      	ldr	r0, [pc, #140]	; (2b98 <pm_state_notify+0xa4>)
    2b0c:	f005 fbe8 	bl	82e0 <z_spin_lock_valid>
    2b10:	b968      	cbnz	r0, 2b2e <pm_state_notify+0x3a>
    2b12:	4a22      	ldr	r2, [pc, #136]	; (2b9c <pm_state_notify+0xa8>)
    2b14:	4922      	ldr	r1, [pc, #136]	; (2ba0 <pm_state_notify+0xac>)
    2b16:	4823      	ldr	r0, [pc, #140]	; (2ba4 <pm_state_notify+0xb0>)
    2b18:	2381      	movs	r3, #129	; 0x81
    2b1a:	f006 fdfa 	bl	9712 <printk>
    2b1e:	491e      	ldr	r1, [pc, #120]	; (2b98 <pm_state_notify+0xa4>)
    2b20:	4821      	ldr	r0, [pc, #132]	; (2ba8 <pm_state_notify+0xb4>)
    2b22:	f006 fdf6 	bl	9712 <printk>
    2b26:	481d      	ldr	r0, [pc, #116]	; (2b9c <pm_state_notify+0xa8>)
    2b28:	2181      	movs	r1, #129	; 0x81
    2b2a:	f006 fcef 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    2b2e:	481a      	ldr	r0, [pc, #104]	; (2b98 <pm_state_notify+0xa4>)
    2b30:	f005 fbf4 	bl	831c <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2b34:	4b1d      	ldr	r3, [pc, #116]	; (2bac <pm_state_notify+0xb8>)
    2b36:	681c      	ldr	r4, [r3, #0]
    2b38:	2c00      	cmp	r4, #0
    2b3a:	bf38      	it	cc
    2b3c:	2400      	movcc	r4, #0
    2b3e:	b19c      	cbz	r4, 2b68 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    2b40:	4f1b      	ldr	r7, [pc, #108]	; (2bb0 <pm_state_notify+0xbc>)
    2b42:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2bbc <pm_state_notify+0xc8>
    2b46:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    2b4a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2b4e:	2d00      	cmp	r5, #0
    2b50:	bf08      	it	eq
    2b52:	4613      	moveq	r3, r2
		if (callback) {
    2b54:	b12b      	cbz	r3, 2b62 <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    2b56:	f898 2014 	ldrb.w	r2, [r8, #20]
    2b5a:	fb09 f202 	mul.w	r2, r9, r2
    2b5e:	5cb8      	ldrb	r0, [r7, r2]
    2b60:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2b62:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2b64:	2c00      	cmp	r4, #0
    2b66:	d1f0      	bne.n	2b4a <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2b68:	480b      	ldr	r0, [pc, #44]	; (2b98 <pm_state_notify+0xa4>)
    2b6a:	f005 fbc7 	bl	82fc <z_spin_unlock_valid>
    2b6e:	b968      	cbnz	r0, 2b8c <pm_state_notify+0x98>
    2b70:	4a0a      	ldr	r2, [pc, #40]	; (2b9c <pm_state_notify+0xa8>)
    2b72:	4910      	ldr	r1, [pc, #64]	; (2bb4 <pm_state_notify+0xc0>)
    2b74:	480b      	ldr	r0, [pc, #44]	; (2ba4 <pm_state_notify+0xb0>)
    2b76:	23ac      	movs	r3, #172	; 0xac
    2b78:	f006 fdcb 	bl	9712 <printk>
    2b7c:	4906      	ldr	r1, [pc, #24]	; (2b98 <pm_state_notify+0xa4>)
    2b7e:	480e      	ldr	r0, [pc, #56]	; (2bb8 <pm_state_notify+0xc4>)
    2b80:	f006 fdc7 	bl	9712 <printk>
    2b84:	4805      	ldr	r0, [pc, #20]	; (2b9c <pm_state_notify+0xa8>)
    2b86:	21ac      	movs	r1, #172	; 0xac
    2b88:	f006 fcc0 	bl	950c <assert_post_action>
	__asm__ volatile(
    2b8c:	f386 8811 	msr	BASEPRI, r6
    2b90:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2b98:	20000d90 	.word	0x20000d90
    2b9c:	0000b314 	.word	0x0000b314
    2ba0:	0000b366 	.word	0x0000b366
    2ba4:	0000a9a4 	.word	0x0000a9a4
    2ba8:	0000b37b 	.word	0x0000b37b
    2bac:	20000d94 	.word	0x20000d94
    2bb0:	20000da0 	.word	0x20000da0
    2bb4:	0000b33a 	.word	0x0000b33a
    2bb8:	0000b351 	.word	0x0000b351
    2bbc:	20000e78 	.word	0x20000e78

00002bc0 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2bc0:	f000 031f 	and.w	r3, r0, #31
    2bc4:	2201      	movs	r2, #1
    2bc6:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2bc8:	4b0a      	ldr	r3, [pc, #40]	; (2bf4 <atomic_test_and_set_bit.constprop.0+0x34>)
    2bca:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2bce:	0940      	lsrs	r0, r0, #5
    2bd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2bd4:	e850 3f00 	ldrex	r3, [r0]
    2bd8:	ea43 0102 	orr.w	r1, r3, r2
    2bdc:	e840 1c00 	strex	ip, r1, [r0]
    2be0:	f1bc 0f00 	cmp.w	ip, #0
    2be4:	d1f6      	bne.n	2bd4 <atomic_test_and_set_bit.constprop.0+0x14>
    2be6:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    2bea:	421a      	tst	r2, r3
}
    2bec:	bf14      	ite	ne
    2bee:	2001      	movne	r0, #1
    2bf0:	2000      	moveq	r0, #0
    2bf2:	4770      	bx	lr
    2bf4:	20000dac 	.word	0x20000dac

00002bf8 <pm_system_resume>:

void pm_system_resume(void)
{
    2bf8:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    2bfa:	4b1d      	ldr	r3, [pc, #116]	; (2c70 <pm_system_resume+0x78>)
    2bfc:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2bfe:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2c02:	f005 031f 	and.w	r3, r5, #31
    2c06:	2201      	movs	r2, #1
    2c08:	409a      	lsls	r2, r3
    2c0a:	4b1a      	ldr	r3, [pc, #104]	; (2c74 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2c0c:	0969      	lsrs	r1, r5, #5
{
    2c0e:	b085      	sub	sp, #20
    2c10:	43d0      	mvns	r0, r2
    2c12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2c16:	e853 1f00 	ldrex	r1, [r3]
    2c1a:	ea01 0400 	and.w	r4, r1, r0
    2c1e:	e843 4c00 	strex	ip, r4, [r3]
    2c22:	f1bc 0f00 	cmp.w	ip, #0
    2c26:	d1f6      	bne.n	2c16 <pm_system_resume+0x1e>
    2c28:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2c2c:	4211      	tst	r1, r2
    2c2e:	d017      	beq.n	2c60 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    2c30:	4c11      	ldr	r4, [pc, #68]	; (2c78 <pm_system_resume+0x80>)
    2c32:	220c      	movs	r2, #12
    2c34:	fb02 4205 	mla	r2, r2, r5, r4
    2c38:	ca07      	ldmia	r2, {r0, r1, r2}
    2c3a:	ab01      	add	r3, sp, #4
    2c3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    2c40:	4a0e      	ldr	r2, [pc, #56]	; (2c7c <pm_system_resume+0x84>)
    2c42:	b17a      	cbz	r2, 2c64 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    2c44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2c48:	f006 ff71 	bl	9b2e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    2c4c:	2000      	movs	r0, #0
    2c4e:	f7ff ff51 	bl	2af4 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2c52:	230c      	movs	r3, #12
    2c54:	436b      	muls	r3, r5
    2c56:	2200      	movs	r2, #0
    2c58:	18e1      	adds	r1, r4, r3
    2c5a:	50e2      	str	r2, [r4, r3]
    2c5c:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    2c60:	b005      	add	sp, #20
    2c62:	bd30      	pop	{r4, r5, pc}
    2c64:	f382 8811 	msr	BASEPRI, r2
    2c68:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2c6c:	e7ee      	b.n	2c4c <pm_system_resume+0x54>
    2c6e:	bf00      	nop
    2c70:	20000e78 	.word	0x20000e78
    2c74:	20000d9c 	.word	0x20000d9c
    2c78:	20000da0 	.word	0x20000da0
    2c7c:	00009b2f 	.word	0x00009b2f

00002c80 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2c84:	4b37      	ldr	r3, [pc, #220]	; (2d64 <pm_system_suspend+0xe4>)
    2c86:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2d7c <pm_system_suspend+0xfc>
    2c8a:	7d1c      	ldrb	r4, [r3, #20]
{
    2c8c:	b088      	sub	sp, #32
    2c8e:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    2c90:	4620      	mov	r0, r4
    2c92:	f7ff ff95 	bl	2bc0 <atomic_test_and_set_bit.constprop.0>
    2c96:	b960      	cbnz	r0, 2cb2 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2c98:	466e      	mov	r6, sp
    2c9a:	463a      	mov	r2, r7
    2c9c:	4621      	mov	r1, r4
    2c9e:	4630      	mov	r0, r6
    2ca0:	f006 fd44 	bl	972c <pm_policy_next_state>
    2ca4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2ca8:	250c      	movs	r5, #12
    2caa:	fb05 8504 	mla	r5, r5, r4, r8
    2cae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    2cb2:	230c      	movs	r3, #12
    2cb4:	4363      	muls	r3, r4
    2cb6:	eb08 0203 	add.w	r2, r8, r3
    2cba:	f818 0003 	ldrb.w	r0, [r8, r3]
    2cbe:	0965      	lsrs	r5, r4, #5
    2cc0:	f004 061f 	and.w	r6, r4, #31
    2cc4:	b3c8      	cbz	r0, 2d3a <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2cc6:	1c7b      	adds	r3, r7, #1
    2cc8:	d00f      	beq.n	2cea <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2cca:	f8d2 e008 	ldr.w	lr, [r2, #8]
    2cce:	4826      	ldr	r0, [pc, #152]	; (2d68 <pm_system_suspend+0xe8>)
    2cd0:	4a26      	ldr	r2, [pc, #152]	; (2d6c <pm_system_suspend+0xec>)
    2cd2:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    2cd6:	2100      	movs	r1, #0
    2cd8:	2300      	movs	r3, #0
    2cda:	fbec 010e 	umlal	r0, r1, ip, lr
    2cde:	f7fd fe4d 	bl	97c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    2ce2:	2101      	movs	r1, #1
    2ce4:	1a38      	subs	r0, r7, r0
    2ce6:	f005 fcdb 	bl	86a0 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2cea:	f003 ffa9 	bl	6c40 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    2cee:	2001      	movs	r0, #1
    2cf0:	f7ff ff00 	bl	2af4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2cf4:	f3bf 8f5b 	dmb	ish
    2cf8:	4b1d      	ldr	r3, [pc, #116]	; (2d70 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2cfa:	2201      	movs	r2, #1
    2cfc:	40b2      	lsls	r2, r6
    2cfe:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2d02:	e853 1f00 	ldrex	r1, [r3]
    2d06:	4311      	orrs	r1, r2
    2d08:	e843 1000 	strex	r0, r1, [r3]
    2d0c:	2800      	cmp	r0, #0
    2d0e:	d1f8      	bne.n	2d02 <pm_system_suspend+0x82>
    2d10:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    2d14:	230c      	movs	r3, #12
    2d16:	fb03 8404 	mla	r4, r3, r4, r8
    2d1a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    2d1e:	ab05      	add	r3, sp, #20
    2d20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    2d24:	4a13      	ldr	r2, [pc, #76]	; (2d74 <pm_system_suspend+0xf4>)
    2d26:	b11a      	cbz	r2, 2d30 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    2d28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2d2c:	f006 feec 	bl	9b08 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    2d30:	f7ff ff62 	bl	2bf8 <pm_system_resume>
	k_sched_unlock();
    2d34:	f004 fcc8 	bl	76c8 <k_sched_unlock>
	bool ret = true;
    2d38:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2d3a:	4a0f      	ldr	r2, [pc, #60]	; (2d78 <pm_system_suspend+0xf8>)
    2d3c:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2d40:	2301      	movs	r3, #1
    2d42:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2d44:	43db      	mvns	r3, r3
    2d46:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2d4a:	e855 2f00 	ldrex	r2, [r5]
    2d4e:	401a      	ands	r2, r3
    2d50:	e845 2100 	strex	r1, r2, [r5]
    2d54:	2900      	cmp	r1, #0
    2d56:	d1f8      	bne.n	2d4a <pm_system_suspend+0xca>
    2d58:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    2d5c:	b008      	add	sp, #32
    2d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d62:	bf00      	nop
    2d64:	20000e78 	.word	0x20000e78
    2d68:	000f423f 	.word	0x000f423f
    2d6c:	000f4240 	.word	0x000f4240
    2d70:	20000d9c 	.word	0x20000d9c
    2d74:	00009b09 	.word	0x00009b09
    2d78:	20000dac 	.word	0x20000dac
    2d7c:	20000da0 	.word	0x20000da0

00002d80 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2d80:	680b      	ldr	r3, [r1, #0]
    2d82:	3301      	adds	r3, #1
    2d84:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2d86:	4b01      	ldr	r3, [pc, #4]	; (2d8c <char_out+0xc>)
    2d88:	681b      	ldr	r3, [r3, #0]
    2d8a:	4718      	bx	r3
    2d8c:	200000d0 	.word	0x200000d0

00002d90 <__printk_hook_install>:
	_char_out = fn;
    2d90:	4b01      	ldr	r3, [pc, #4]	; (2d98 <__printk_hook_install+0x8>)
    2d92:	6018      	str	r0, [r3, #0]
}
    2d94:	4770      	bx	lr
    2d96:	bf00      	nop
    2d98:	200000d0 	.word	0x200000d0

00002d9c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2d9c:	b507      	push	{r0, r1, r2, lr}
    2d9e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2da0:	2100      	movs	r1, #0
{
    2da2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    2da4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2da6:	4803      	ldr	r0, [pc, #12]	; (2db4 <vprintk+0x18>)
    2da8:	a901      	add	r1, sp, #4
    2daa:	f7fe fe43 	bl	1a34 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2dae:	b003      	add	sp, #12
    2db0:	f85d fb04 	ldr.w	pc, [sp], #4
    2db4:	00002d81 	.word	0x00002d81

00002db8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2db8:	b508      	push	{r3, lr}
	__asm__ volatile(
    2dba:	f04f 0220 	mov.w	r2, #32
    2dbe:	f3ef 8311 	mrs	r3, BASEPRI
    2dc2:	f382 8812 	msr	BASEPRI_MAX, r2
    2dc6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2dca:	f000 fcc1 	bl	3750 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2dce:	4803      	ldr	r0, [pc, #12]	; (2ddc <sys_reboot+0x24>)
    2dd0:	f006 fc9f 	bl	9712 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2dd4:	f000 f82a 	bl	2e2c <arch_cpu_idle>
    2dd8:	e7fc      	b.n	2dd4 <sys_reboot+0x1c>
    2dda:	bf00      	nop
    2ddc:	0000b393 	.word	0x0000b393

00002de0 <tty_init>:

	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
    2de0:	4602      	mov	r2, r0
    2de2:	b510      	push	{r4, lr}
	if (!uart_dev) {
    2de4:	4608      	mov	r0, r1
    2de6:	b199      	cbz	r1, 2e10 <tty_init+0x30>
	}

	tty->uart_dev = uart_dev;

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    2de8:	2400      	movs	r4, #0
	tty->tx_ringbuf = NULL;
	tty->tx_ringbuf_sz = 0U;

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;

	tty->rx_timeout = SYS_FOREVER_MS;
    2dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	tty->tx_timeout = SYS_FOREVER_MS;
    2dee:	e9c2 4313 	strd	r4, r3, [r2, #76]	; 0x4c
	tty->rx_timeout = SYS_FOREVER_MS;
    2df2:	6293      	str	r3, [r2, #40]	; 0x28
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    2df4:	688b      	ldr	r3, [r1, #8]
	tty->uart_dev = uart_dev;
    2df6:	6011      	str	r1, [r2, #0]
	tty->rx_ringbuf_sz = 0U;
    2df8:	e9c2 4407 	strd	r4, r4, [r2, #28]
	tty->tx_ringbuf_sz = 0U;
    2dfc:	e9c2 4411 	strd	r4, r4, [r2, #68]	; 0x44
	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    2e00:	6254      	str	r4, [r2, #36]	; 0x24
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    2e02:	b143      	cbz	r3, 2e16 <tty_init+0x36>
    2e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2e06:	b133      	cbz	r3, 2e16 <tty_init+0x36>
		api->irq_callback_set(dev, cb, user_data);
    2e08:	4904      	ldr	r1, [pc, #16]	; (2e1c <tty_init+0x3c>)
    2e0a:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    2e0c:	4620      	mov	r0, r4
}
    2e0e:	bd10      	pop	{r4, pc}
		return -ENODEV;
    2e10:	f06f 0012 	mvn.w	r0, #18
    2e14:	e7fb      	b.n	2e0e <tty_init+0x2e>
	return 0;
    2e16:	4618      	mov	r0, r3
    2e18:	e7f9      	b.n	2e0e <tty_init+0x2e>
    2e1a:	bf00      	nop
    2e1c:	00009801 	.word	0x00009801

00002e20 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2e20:	4901      	ldr	r1, [pc, #4]	; (2e28 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2e22:	2210      	movs	r2, #16
	str	r2, [r1]
    2e24:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2e26:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2e28:	e000ed10 	.word	0xe000ed10

00002e2c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2e2c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2e2e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2e30:	f380 8811 	msr	BASEPRI, r0
	isb
    2e34:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2e38:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2e3c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2e3e:	b662      	cpsie	i
	isb
    2e40:	f3bf 8f6f 	isb	sy

	bx	lr
    2e44:	4770      	bx	lr
    2e46:	bf00      	nop

00002e48 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2e48:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2e4a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2e4c:	f381 8811 	msr	BASEPRI, r1

	wfe
    2e50:	bf20      	wfe

	msr	BASEPRI, r0
    2e52:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2e56:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2e58:	4770      	bx	lr
    2e5a:	bf00      	nop

00002e5c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2e5c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2e5e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2e60:	4a0b      	ldr	r2, [pc, #44]	; (2e90 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2e62:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2e64:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2e66:	bf1e      	ittt	ne
	movne	r1, #0
    2e68:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2e6a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2e6c:	f007 fa1d 	blne	a2aa <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2e70:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2e72:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2e76:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2e7a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2e7e:	4905      	ldr	r1, [pc, #20]	; (2e94 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2e80:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2e82:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2e84:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2e86:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2e8a:	4903      	ldr	r1, [pc, #12]	; (2e98 <_isr_wrapper+0x3c>)
	bx r1
    2e8c:	4708      	bx	r1
    2e8e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2e90:	20000e78 	.word	0x20000e78
	ldr r1, =_sw_isr_table
    2e94:	0000a528 	.word	0x0000a528
	ldr r1, =z_arm_int_exit
    2e98:	000030c1 	.word	0x000030c1

00002e9c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2e9c:	bf30      	wfi
    b z_SysNmiOnReset
    2e9e:	f7ff bffd 	b.w	2e9c <z_SysNmiOnReset>
    2ea2:	bf00      	nop

00002ea4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2ea4:	4912      	ldr	r1, [pc, #72]	; (2ef0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2ea6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2ea8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2eac:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2eae:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2eb2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2eb6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2eb8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2ebc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2ec0:	4f0c      	ldr	r7, [pc, #48]	; (2ef4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2ec2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2ec6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2ec8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2eca:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2ecc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    2ece:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2ed0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2ed2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2ed6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2ed8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2eda:	f000 fae7 	bl	34ac <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2ede:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2ee2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2ee6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2eea:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2eee:	4770      	bx	lr
    ldr r1, =_kernel
    2ef0:	20000e78 	.word	0x20000e78
    ldr v4, =_SCS_ICSR
    2ef4:	e000ed04 	.word	0xe000ed04

00002ef8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2ef8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2efc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2efe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2f02:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2f06:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2f08:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2f0c:	2902      	cmp	r1, #2
    beq _oops
    2f0e:	d0ff      	beq.n	2f10 <_oops>

00002f10 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2f10:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2f12:	f006 fdb7 	bl	9a84 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2f16:	bd01      	pop	{r0, pc}

00002f18 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2f18:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2f1a:	2b00      	cmp	r3, #0
    2f1c:	db08      	blt.n	2f30 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f1e:	2201      	movs	r2, #1
    2f20:	f000 001f 	and.w	r0, r0, #31
    2f24:	fa02 f000 	lsl.w	r0, r2, r0
    2f28:	095b      	lsrs	r3, r3, #5
    2f2a:	4a02      	ldr	r2, [pc, #8]	; (2f34 <arch_irq_enable+0x1c>)
    2f2c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2f30:	4770      	bx	lr
    2f32:	bf00      	nop
    2f34:	e000e100 	.word	0xe000e100

00002f38 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2f38:	4b05      	ldr	r3, [pc, #20]	; (2f50 <arch_irq_is_enabled+0x18>)
    2f3a:	0942      	lsrs	r2, r0, #5
    2f3c:	f000 001f 	and.w	r0, r0, #31
    2f40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f44:	2301      	movs	r3, #1
    2f46:	fa03 f000 	lsl.w	r0, r3, r0
}
    2f4a:	4010      	ands	r0, r2
    2f4c:	4770      	bx	lr
    2f4e:	bf00      	nop
    2f50:	e000e100 	.word	0xe000e100

00002f54 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2f54:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2f56:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2f58:	2c07      	cmp	r4, #7
{
    2f5a:	4605      	mov	r5, r0
    2f5c:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2f5e:	d90f      	bls.n	2f80 <z_arm_irq_priority_set+0x2c>
    2f60:	4a11      	ldr	r2, [pc, #68]	; (2fa8 <z_arm_irq_priority_set+0x54>)
    2f62:	4912      	ldr	r1, [pc, #72]	; (2fac <z_arm_irq_priority_set+0x58>)
    2f64:	4812      	ldr	r0, [pc, #72]	; (2fb0 <z_arm_irq_priority_set+0x5c>)
    2f66:	2359      	movs	r3, #89	; 0x59
    2f68:	f006 fbd3 	bl	9712 <printk>
    2f6c:	4811      	ldr	r0, [pc, #68]	; (2fb4 <z_arm_irq_priority_set+0x60>)
    2f6e:	4631      	mov	r1, r6
    2f70:	2307      	movs	r3, #7
    2f72:	462a      	mov	r2, r5
    2f74:	f006 fbcd 	bl	9712 <printk>
    2f78:	480b      	ldr	r0, [pc, #44]	; (2fa8 <z_arm_irq_priority_set+0x54>)
    2f7a:	2159      	movs	r1, #89	; 0x59
    2f7c:	f006 fac6 	bl	950c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2f80:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2f82:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f84:	bfac      	ite	ge
    2f86:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f8a:	4b0b      	ldrlt	r3, [pc, #44]	; (2fb8 <z_arm_irq_priority_set+0x64>)
    2f8c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2f90:	bfb8      	it	lt
    2f92:	f005 050f 	andlt.w	r5, r5, #15
    2f96:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f98:	bfaa      	itet	ge
    2f9a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f9e:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2fa0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    2fa4:	bd70      	pop	{r4, r5, r6, pc}
    2fa6:	bf00      	nop
    2fa8:	0000b3bc 	.word	0x0000b3bc
    2fac:	0000b3f2 	.word	0x0000b3f2
    2fb0:	0000a9a4 	.word	0x0000a9a4
    2fb4:	0000b40d 	.word	0x0000b40d
    2fb8:	e000ed14 	.word	0xe000ed14

00002fbc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2fbc:	4a0b      	ldr	r2, [pc, #44]	; (2fec <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2fbe:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2fc0:	4b0b      	ldr	r3, [pc, #44]	; (2ff0 <z_arm_prep_c+0x34>)
    2fc2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2fc6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2fc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fcc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2fd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2fd4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2fdc:	f003 f906 	bl	61ec <z_bss_zero>
	z_data_copy();
    2fe0:	f006 f82c 	bl	903c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2fe4:	f000 f9f6 	bl	33d4 <z_arm_interrupt_init>
	z_cstart();
    2fe8:	f003 f90a 	bl	6200 <z_cstart>
    2fec:	00000000 	.word	0x00000000
    2ff0:	e000ed00 	.word	0xe000ed00

00002ff4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2ff4:	4a09      	ldr	r2, [pc, #36]	; (301c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2ff6:	490a      	ldr	r1, [pc, #40]	; (3020 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2ff8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2ffa:	6809      	ldr	r1, [r1, #0]
    2ffc:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2ffe:	4909      	ldr	r1, [pc, #36]	; (3024 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3000:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3002:	684b      	ldr	r3, [r1, #4]
    3004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3008:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    300a:	2300      	movs	r3, #0
    300c:	f383 8811 	msr	BASEPRI, r3
    3010:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3014:	6893      	ldr	r3, [r2, #8]
}
    3016:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    3018:	4770      	bx	lr
    301a:	bf00      	nop
    301c:	20000e78 	.word	0x20000e78
    3020:	0000a8a8 	.word	0x0000a8a8
    3024:	e000ed00 	.word	0xe000ed00

00003028 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3028:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    302c:	9b00      	ldr	r3, [sp, #0]
    302e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3032:	490a      	ldr	r1, [pc, #40]	; (305c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3034:	9b01      	ldr	r3, [sp, #4]
    3036:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    303a:	9b02      	ldr	r3, [sp, #8]
    303c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3040:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3048:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    304c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3050:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3052:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3054:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3056:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3058:	4770      	bx	lr
    305a:	bf00      	nop
    305c:	00009737 	.word	0x00009737

00003060 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3060:	4a0b      	ldr	r2, [pc, #44]	; (3090 <z_check_thread_stack_fail+0x30>)
{
    3062:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3064:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3066:	b190      	cbz	r0, 308e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3068:	f113 0f16 	cmn.w	r3, #22
    306c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    306e:	d005      	beq.n	307c <z_check_thread_stack_fail+0x1c>
    3070:	f1a0 0220 	sub.w	r2, r0, #32
    3074:	429a      	cmp	r2, r3
    3076:	d806      	bhi.n	3086 <z_check_thread_stack_fail+0x26>
    3078:	4283      	cmp	r3, r0
    307a:	d204      	bcs.n	3086 <z_check_thread_stack_fail+0x26>
    307c:	4281      	cmp	r1, r0
    307e:	bf2c      	ite	cs
    3080:	2100      	movcs	r1, #0
    3082:	2101      	movcc	r1, #1
    3084:	e000      	b.n	3088 <z_check_thread_stack_fail+0x28>
    3086:	2100      	movs	r1, #0
    3088:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    308a:	bf08      	it	eq
    308c:	2000      	moveq	r0, #0
}
    308e:	4770      	bx	lr
    3090:	20000e78 	.word	0x20000e78

00003094 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3094:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3096:	4b09      	ldr	r3, [pc, #36]	; (30bc <arch_switch_to_main_thread+0x28>)
    3098:	6098      	str	r0, [r3, #8]
{
    309a:	460d      	mov	r5, r1
    309c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    309e:	f000 fa05 	bl	34ac <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    30a2:	4620      	mov	r0, r4
    30a4:	f385 8809 	msr	PSP, r5
    30a8:	2100      	movs	r1, #0
    30aa:	b663      	cpsie	if
    30ac:	f381 8811 	msr	BASEPRI, r1
    30b0:	f3bf 8f6f 	isb	sy
    30b4:	2200      	movs	r2, #0
    30b6:	2300      	movs	r3, #0
    30b8:	f006 fb3d 	bl	9736 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    30bc:	20000e78 	.word	0x20000e78

000030c0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    30c0:	4b04      	ldr	r3, [pc, #16]	; (30d4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    30c2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    30c4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    30c6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    30c8:	d003      	beq.n	30d2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    30ca:	4903      	ldr	r1, [pc, #12]	; (30d8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    30cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    30d0:	600a      	str	r2, [r1, #0]

000030d2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    30d2:	4770      	bx	lr
	ldr r3, =_kernel
    30d4:	20000e78 	.word	0x20000e78
	ldr r1, =_SCS_ICSR
    30d8:	e000ed04 	.word	0xe000ed04

000030dc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    30dc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    30e0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    30e4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    30e6:	4672      	mov	r2, lr
	bl z_arm_fault
    30e8:	f000 f8ae 	bl	3248 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    30ec:	bd01      	pop	{r0, pc}
    30ee:	bf00      	nop

000030f0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    30f0:	2000      	movs	r0, #0
    msr CONTROL, r0
    30f2:	f380 8814 	msr	CONTROL, r0
    isb
    30f6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    30fa:	f007 f97f 	bl	a3fc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    30fe:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3100:	490d      	ldr	r1, [pc, #52]	; (3138 <__start+0x48>)
    str r0, [r1]
    3102:	6008      	str	r0, [r1, #0]
    dsb
    3104:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3108:	480c      	ldr	r0, [pc, #48]	; (313c <__start+0x4c>)
    msr msp, r0
    310a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    310e:	f000 f97d 	bl	340c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3112:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3114:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3118:	4809      	ldr	r0, [pc, #36]	; (3140 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    311a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    311e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3120:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3124:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3128:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    312a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    312c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3130:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3134:	f7ff ff42 	bl	2fbc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3138:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    313c:	200032a0 	.word	0x200032a0
    ldr r0, =z_interrupt_stacks
    3140:	20003420 	.word	0x20003420

00003144 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3144:	4b23      	ldr	r3, [pc, #140]	; (31d4 <mem_manage_fault+0x90>)
{
    3146:	b570      	push	{r4, r5, r6, lr}
    3148:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    314a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    314c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    314e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    3150:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3152:	0790      	lsls	r0, r2, #30
    3154:	d51a      	bpl.n	318c <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    3156:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    315a:	0612      	lsls	r2, r2, #24
    315c:	d516      	bpl.n	318c <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    315e:	b119      	cbz	r1, 3168 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3166:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    316a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    316c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    316e:	06d6      	lsls	r6, r2, #27
    3170:	d40f      	bmi.n	3192 <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3174:	0799      	lsls	r1, r3, #30
    3176:	d40c      	bmi.n	3192 <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3178:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    317a:	4a16      	ldr	r2, [pc, #88]	; (31d4 <mem_manage_fault+0x90>)
    317c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    317e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3182:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3184:	2300      	movs	r3, #0
    3186:	702b      	strb	r3, [r5, #0]

	return reason;
}
    3188:	4620      	mov	r0, r4
    318a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    318c:	f06f 0015 	mvn.w	r0, #21
    3190:	e7ea      	b.n	3168 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3192:	4e10      	ldr	r6, [pc, #64]	; (31d4 <mem_manage_fault+0x90>)
    3194:	6873      	ldr	r3, [r6, #4]
    3196:	051a      	lsls	r2, r3, #20
    3198:	d5ee      	bpl.n	3178 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    319a:	4621      	mov	r1, r4
    319c:	f7ff ff60 	bl	3060 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    31a0:	4604      	mov	r4, r0
    31a2:	b118      	cbz	r0, 31ac <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    31a4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    31a8:	2402      	movs	r4, #2
    31aa:	e7e6      	b.n	317a <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    31ac:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    31ae:	06db      	lsls	r3, r3, #27
    31b0:	d5e2      	bpl.n	3178 <mem_manage_fault+0x34>
    31b2:	4a09      	ldr	r2, [pc, #36]	; (31d8 <mem_manage_fault+0x94>)
    31b4:	4909      	ldr	r1, [pc, #36]	; (31dc <mem_manage_fault+0x98>)
    31b6:	480a      	ldr	r0, [pc, #40]	; (31e0 <mem_manage_fault+0x9c>)
    31b8:	f240 1349 	movw	r3, #329	; 0x149
    31bc:	f006 faa9 	bl	9712 <printk>
    31c0:	4808      	ldr	r0, [pc, #32]	; (31e4 <mem_manage_fault+0xa0>)
    31c2:	f006 faa6 	bl	9712 <printk>
    31c6:	4804      	ldr	r0, [pc, #16]	; (31d8 <mem_manage_fault+0x94>)
    31c8:	f240 1149 	movw	r1, #329	; 0x149
    31cc:	f006 f99e 	bl	950c <assert_post_action>
    31d0:	e7d3      	b.n	317a <mem_manage_fault+0x36>
    31d2:	bf00      	nop
    31d4:	e000ed00 	.word	0xe000ed00
    31d8:	0000b44d 	.word	0x0000b44d
    31dc:	0000b487 	.word	0x0000b487
    31e0:	0000a9a4 	.word	0x0000a9a4
    31e4:	0000b4d1 	.word	0x0000b4d1

000031e8 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    31e8:	4b0d      	ldr	r3, [pc, #52]	; (3220 <bus_fault.isra.0+0x38>)
    31ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    31ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    31ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    31f0:	0592      	lsls	r2, r2, #22
    31f2:	d508      	bpl.n	3206 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    31f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    31f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    31f8:	0412      	lsls	r2, r2, #16
    31fa:	d504      	bpl.n	3206 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    31fc:	b118      	cbz	r0, 3206 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    31fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3200:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3204:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3206:	4b06      	ldr	r3, [pc, #24]	; (3220 <bus_fault.isra.0+0x38>)
    3208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    320a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    320c:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    320e:	bf58      	it	pl
    3210:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3212:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3214:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3216:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    321a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    321c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    321e:	4770      	bx	lr
    3220:	e000ed00 	.word	0xe000ed00

00003224 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3224:	4b07      	ldr	r3, [pc, #28]	; (3244 <usage_fault.isra.0+0x20>)
    3226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    322a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    322c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    322e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3234:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3238:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    323c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    323e:	2000      	movs	r0, #0
    3240:	4770      	bx	lr
    3242:	bf00      	nop
    3244:	e000ed00 	.word	0xe000ed00

00003248 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3248:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    324a:	4b54      	ldr	r3, [pc, #336]	; (339c <z_arm_fault+0x154>)
    324c:	685c      	ldr	r4, [r3, #4]
{
    324e:	b08a      	sub	sp, #40	; 0x28
    3250:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3252:	f3c4 0408 	ubfx	r4, r4, #0, #9
    3256:	2600      	movs	r6, #0
    3258:	f386 8811 	msr	BASEPRI, r6
    325c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3260:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3264:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3268:	d108      	bne.n	327c <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    326a:	f002 030c 	and.w	r3, r2, #12
    326e:	2b08      	cmp	r3, #8
    3270:	d004      	beq.n	327c <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3272:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    3274:	bf5c      	itt	pl
    3276:	4605      	movpl	r5, r0
			*nested_exc = true;
    3278:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    327a:	b97d      	cbnz	r5, 329c <z_arm_fault+0x54>
    327c:	4a48      	ldr	r2, [pc, #288]	; (33a0 <z_arm_fault+0x158>)
    327e:	4949      	ldr	r1, [pc, #292]	; (33a4 <z_arm_fault+0x15c>)
    3280:	4849      	ldr	r0, [pc, #292]	; (33a8 <z_arm_fault+0x160>)
    3282:	f240 33f2 	movw	r3, #1010	; 0x3f2
    3286:	f006 fa44 	bl	9712 <printk>
    328a:	4848      	ldr	r0, [pc, #288]	; (33ac <z_arm_fault+0x164>)
    328c:	f006 fa41 	bl	9712 <printk>
    3290:	4843      	ldr	r0, [pc, #268]	; (33a0 <z_arm_fault+0x158>)
    3292:	f240 31f2 	movw	r1, #1010	; 0x3f2
    3296:	f006 f939 	bl	950c <assert_post_action>
    329a:	2500      	movs	r5, #0
	*recoverable = false;
    329c:	2300      	movs	r3, #0
    329e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    32a2:	1ee3      	subs	r3, r4, #3
    32a4:	2b03      	cmp	r3, #3
    32a6:	d872      	bhi.n	338e <z_arm_fault+0x146>
    32a8:	e8df f003 	tbb	[pc, r3]
    32ac:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    32b0:	4b3a      	ldr	r3, [pc, #232]	; (339c <z_arm_fault+0x154>)
    32b2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    32b4:	f014 0402 	ands.w	r4, r4, #2
    32b8:	d169      	bne.n	338e <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    32ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    32bc:	2a00      	cmp	r2, #0
    32be:	db18      	blt.n	32f2 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    32c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    32c2:	005b      	lsls	r3, r3, #1
    32c4:	d54e      	bpl.n	3364 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    32c6:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    32c8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    32cc:	f64d 7302 	movw	r3, #57090	; 0xdf02
    32d0:	429a      	cmp	r2, r3
    32d2:	d00d      	beq.n	32f0 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    32d4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    32d8:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    32dc:	781b      	ldrb	r3, [r3, #0]
    32de:	b30b      	cbz	r3, 3324 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    32e0:	f10d 0207 	add.w	r2, sp, #7
    32e4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    32e6:	4628      	mov	r0, r5
    32e8:	f7ff ff2c 	bl	3144 <mem_manage_fault>
		reason = usage_fault(esf);
    32ec:	4604      	mov	r4, r0
		break;
    32ee:	e000      	b.n	32f2 <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    32f0:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    32f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    32f6:	b99b      	cbnz	r3, 3320 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    32f8:	2220      	movs	r2, #32
    32fa:	4629      	mov	r1, r5
    32fc:	a802      	add	r0, sp, #8
    32fe:	f006 fbef 	bl	9ae0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3302:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3304:	2e00      	cmp	r6, #0
    3306:	d044      	beq.n	3392 <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3308:	f3c3 0208 	ubfx	r2, r3, #0, #9
    330c:	b922      	cbnz	r2, 3318 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    330e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3312:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3316:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3318:	a902      	add	r1, sp, #8
    331a:	4620      	mov	r0, r4
    331c:	f006 fbb0 	bl	9a80 <z_arm_fatal_error>
}
    3320:	b00a      	add	sp, #40	; 0x28
    3322:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    3324:	4b22      	ldr	r3, [pc, #136]	; (33b0 <z_arm_fault+0x168>)
    3326:	781b      	ldrb	r3, [r3, #0]
    3328:	b12b      	cbz	r3, 3336 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    332a:	f10d 0107 	add.w	r1, sp, #7
    332e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3330:	f7ff ff5a 	bl	31e8 <bus_fault.isra.0>
    3334:	e7da      	b.n	32ec <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    3336:	4b1f      	ldr	r3, [pc, #124]	; (33b4 <z_arm_fault+0x16c>)
    3338:	881b      	ldrh	r3, [r3, #0]
    333a:	b29b      	uxth	r3, r3
    333c:	b113      	cbz	r3, 3344 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    333e:	f7ff ff71 	bl	3224 <usage_fault.isra.0>
    3342:	e7d3      	b.n	32ec <z_arm_fault+0xa4>
			__ASSERT(0,
    3344:	491c      	ldr	r1, [pc, #112]	; (33b8 <z_arm_fault+0x170>)
    3346:	4a16      	ldr	r2, [pc, #88]	; (33a0 <z_arm_fault+0x158>)
    3348:	4817      	ldr	r0, [pc, #92]	; (33a8 <z_arm_fault+0x160>)
    334a:	f240 23c3 	movw	r3, #707	; 0x2c3
    334e:	f006 f9e0 	bl	9712 <printk>
    3352:	481a      	ldr	r0, [pc, #104]	; (33bc <z_arm_fault+0x174>)
    3354:	f006 f9dd 	bl	9712 <printk>
    3358:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    335c:	4810      	ldr	r0, [pc, #64]	; (33a0 <z_arm_fault+0x158>)
    335e:	f006 f8d5 	bl	950c <assert_post_action>
    3362:	e7c6      	b.n	32f2 <z_arm_fault+0xaa>
    3364:	4914      	ldr	r1, [pc, #80]	; (33b8 <z_arm_fault+0x170>)
    3366:	4a0e      	ldr	r2, [pc, #56]	; (33a0 <z_arm_fault+0x158>)
    3368:	480f      	ldr	r0, [pc, #60]	; (33a8 <z_arm_fault+0x160>)
    336a:	f240 23c7 	movw	r3, #711	; 0x2c7
    336e:	f006 f9d0 	bl	9712 <printk>
    3372:	4813      	ldr	r0, [pc, #76]	; (33c0 <z_arm_fault+0x178>)
    3374:	f006 f9cd 	bl	9712 <printk>
    3378:	f240 21c7 	movw	r1, #711	; 0x2c7
    337c:	e7ee      	b.n	335c <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    337e:	f10d 0207 	add.w	r2, sp, #7
    3382:	2100      	movs	r1, #0
    3384:	e7af      	b.n	32e6 <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    3386:	f10d 0107 	add.w	r1, sp, #7
    338a:	2000      	movs	r0, #0
    338c:	e7d0      	b.n	3330 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    338e:	2400      	movs	r4, #0
    3390:	e7af      	b.n	32f2 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3392:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3396:	f023 0301 	bic.w	r3, r3, #1
    339a:	e7bc      	b.n	3316 <z_arm_fault+0xce>
    339c:	e000ed00 	.word	0xe000ed00
    33a0:	0000b44d 	.word	0x0000b44d
    33a4:	0000b4f4 	.word	0x0000b4f4
    33a8:	0000a9a4 	.word	0x0000a9a4
    33ac:	0000b507 	.word	0x0000b507
    33b0:	e000ed29 	.word	0xe000ed29
    33b4:	e000ed2a 	.word	0xe000ed2a
    33b8:	0000b9e0 	.word	0x0000b9e0
    33bc:	0000b545 	.word	0x0000b545
    33c0:	0000b569 	.word	0x0000b569

000033c4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    33c4:	4a02      	ldr	r2, [pc, #8]	; (33d0 <z_arm_fault_init+0xc>)
    33c6:	6953      	ldr	r3, [r2, #20]
    33c8:	f043 0310 	orr.w	r3, r3, #16
    33cc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    33ce:	4770      	bx	lr
    33d0:	e000ed00 	.word	0xe000ed00

000033d4 <z_arm_interrupt_init>:
    33d4:	4804      	ldr	r0, [pc, #16]	; (33e8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    33d6:	2300      	movs	r3, #0
    33d8:	2120      	movs	r1, #32
    33da:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    33dc:	3301      	adds	r3, #1
    33de:	2b30      	cmp	r3, #48	; 0x30
    33e0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    33e4:	d1f9      	bne.n	33da <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    33e6:	4770      	bx	lr
    33e8:	e000e100 	.word	0xe000e100

000033ec <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    33ec:	4a06      	ldr	r2, [pc, #24]	; (3408 <z_arm_clear_arm_mpu_config+0x1c>)
    33ee:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    33f0:	2300      	movs	r3, #0
	int num_regions =
    33f2:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    33f6:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    33f8:	428b      	cmp	r3, r1
    33fa:	d100      	bne.n	33fe <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    33fc:	4770      	bx	lr
  MPU->RNR = rnr;
    33fe:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    3400:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    3402:	3301      	adds	r3, #1
    3404:	e7f8      	b.n	33f8 <z_arm_clear_arm_mpu_config+0xc>
    3406:	bf00      	nop
    3408:	e000ed90 	.word	0xe000ed90

0000340c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    340c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    340e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3410:	2300      	movs	r3, #0
    3412:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3416:	f7ff ffe9 	bl	33ec <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    341a:	4b14      	ldr	r3, [pc, #80]	; (346c <z_arm_init_arch_hw_at_boot+0x60>)
    341c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    342c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3430:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3434:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3438:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    343c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3440:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3444:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3448:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    344c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    3450:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3454:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3458:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    345c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3460:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3462:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3466:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    346a:	bd08      	pop	{r3, pc}
    346c:	e000e100 	.word	0xe000e100

00003470 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3470:	4b06      	ldr	r3, [pc, #24]	; (348c <z_impl_k_thread_abort+0x1c>)
    3472:	689b      	ldr	r3, [r3, #8]
    3474:	4283      	cmp	r3, r0
    3476:	d107      	bne.n	3488 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3478:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    347c:	b123      	cbz	r3, 3488 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    347e:	4a04      	ldr	r2, [pc, #16]	; (3490 <z_impl_k_thread_abort+0x20>)
    3480:	6853      	ldr	r3, [r2, #4]
    3482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3486:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3488:	f004 bbe2 	b.w	7c50 <z_thread_abort>
    348c:	20000e78 	.word	0x20000e78
    3490:	e000ed00 	.word	0xe000ed00

00003494 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3494:	4b02      	ldr	r3, [pc, #8]	; (34a0 <z_arm_configure_static_mpu_regions+0xc>)
    3496:	4a03      	ldr	r2, [pc, #12]	; (34a4 <z_arm_configure_static_mpu_regions+0x10>)
    3498:	4803      	ldr	r0, [pc, #12]	; (34a8 <z_arm_configure_static_mpu_regions+0x14>)
    349a:	2101      	movs	r1, #1
    349c:	f000 b868 	b.w	3570 <arm_core_mpu_configure_static_mpu_regions>
    34a0:	20040000 	.word	0x20040000
    34a4:	20000000 	.word	0x20000000
    34a8:	0000a724 	.word	0x0000a724

000034ac <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    34ac:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    34ae:	4b05      	ldr	r3, [pc, #20]	; (34c4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    34b0:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    34b2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    34b4:	4a04      	ldr	r2, [pc, #16]	; (34c8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    34b6:	2120      	movs	r1, #32
    34b8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    34bc:	4618      	mov	r0, r3
    34be:	2101      	movs	r1, #1
    34c0:	f000 b87e 	b.w	35c0 <arm_core_mpu_configure_dynamic_mpu_regions>
    34c4:	20000db0 	.word	0x20000db0
    34c8:	150b0000 	.word	0x150b0000

000034cc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    34cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    34ce:	4f1e      	ldr	r7, [pc, #120]	; (3548 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    34d0:	2600      	movs	r6, #0
    34d2:	428e      	cmp	r6, r1
    34d4:	db01      	blt.n	34da <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    34d6:	4610      	mov	r0, r2
    34d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    34da:	6844      	ldr	r4, [r0, #4]
    34dc:	b384      	cbz	r4, 3540 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    34de:	b153      	cbz	r3, 34f6 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    34e0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    34e4:	ea14 0f0c 	tst.w	r4, ip
    34e8:	d118      	bne.n	351c <mpu_configure_regions+0x50>
		&&
    34ea:	2c1f      	cmp	r4, #31
    34ec:	d916      	bls.n	351c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    34ee:	6805      	ldr	r5, [r0, #0]
		&&
    34f0:	ea1c 0f05 	tst.w	ip, r5
    34f4:	d112      	bne.n	351c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    34f6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    34f8:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    34fa:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    34fe:	b2d2      	uxtb	r2, r2
    3500:	d90f      	bls.n	3522 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    3502:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3506:	d80e      	bhi.n	3526 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3508:	3c01      	subs	r4, #1
    350a:	fab4 f484 	clz	r4, r4
    350e:	f1c4 041f 	rsb	r4, r4, #31
    3512:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3514:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3516:	ea4c 0404 	orr.w	r4, ip, r4
    351a:	d906      	bls.n	352a <mpu_configure_regions+0x5e>
			return -EINVAL;
    351c:	f06f 0215 	mvn.w	r2, #21
    3520:	e7d9      	b.n	34d6 <mpu_configure_regions+0xa>
		return REGION_32B;
    3522:	2408      	movs	r4, #8
    3524:	e7f6      	b.n	3514 <mpu_configure_regions+0x48>
		return REGION_4G;
    3526:	243e      	movs	r4, #62	; 0x3e
    3528:	e7f4      	b.n	3514 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    352a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    352e:	4315      	orrs	r5, r2
    3530:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3534:	f044 0401 	orr.w	r4, r4, #1
    3538:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    353a:	60fd      	str	r5, [r7, #12]
		reg_index++;
    353c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    353e:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    3540:	3601      	adds	r6, #1
    3542:	300c      	adds	r0, #12
    3544:	e7c5      	b.n	34d2 <mpu_configure_regions+0x6>
    3546:	bf00      	nop
    3548:	e000ed90 	.word	0xe000ed90

0000354c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    354c:	4b03      	ldr	r3, [pc, #12]	; (355c <arm_core_mpu_enable+0x10>)
    354e:	2205      	movs	r2, #5
    3550:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    3552:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3556:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    355a:	4770      	bx	lr
    355c:	e000ed90 	.word	0xe000ed90

00003560 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3560:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3564:	4b01      	ldr	r3, [pc, #4]	; (356c <arm_core_mpu_disable+0xc>)
    3566:	2200      	movs	r2, #0
    3568:	605a      	str	r2, [r3, #4]
}
    356a:	4770      	bx	lr
    356c:	e000ed90 	.word	0xe000ed90

00003570 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3570:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3572:	4d0e      	ldr	r5, [pc, #56]	; (35ac <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3574:	2301      	movs	r3, #1
    3576:	782a      	ldrb	r2, [r5, #0]
    3578:	460c      	mov	r4, r1
    357a:	f7ff ffa7 	bl	34cc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    357e:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    3580:	3016      	adds	r0, #22
    3582:	d111      	bne.n	35a8 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3584:	f240 1311 	movw	r3, #273	; 0x111
    3588:	4a09      	ldr	r2, [pc, #36]	; (35b0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    358a:	490a      	ldr	r1, [pc, #40]	; (35b4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    358c:	480a      	ldr	r0, [pc, #40]	; (35b8 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    358e:	f006 f8c0 	bl	9712 <printk>
    3592:	4621      	mov	r1, r4
    3594:	4809      	ldr	r0, [pc, #36]	; (35bc <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    3596:	f006 f8bc 	bl	9712 <printk>
			regions_num);
	}
}
    359a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    359e:	4804      	ldr	r0, [pc, #16]	; (35b0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    35a0:	f240 1111 	movw	r1, #273	; 0x111
    35a4:	f005 bfb2 	b.w	950c <assert_post_action>
}
    35a8:	bd38      	pop	{r3, r4, r5, pc}
    35aa:	bf00      	nop
    35ac:	200013c6 	.word	0x200013c6
    35b0:	0000b599 	.word	0x0000b599
    35b4:	0000b9e0 	.word	0x0000b9e0
    35b8:	0000a9a4 	.word	0x0000a9a4
    35bc:	0000b5d0 	.word	0x0000b5d0

000035c0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    35c0:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    35c2:	4a12      	ldr	r2, [pc, #72]	; (360c <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    35c4:	2300      	movs	r3, #0
    35c6:	7812      	ldrb	r2, [r2, #0]
    35c8:	460c      	mov	r4, r1
    35ca:	f7ff ff7f 	bl	34cc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    35ce:	f110 0f16 	cmn.w	r0, #22
    35d2:	d008      	beq.n	35e6 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    35d4:	4b0e      	ldr	r3, [pc, #56]	; (3610 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    35d6:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    35d8:	2807      	cmp	r0, #7
    35da:	dd00      	ble.n	35de <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    35dc:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    35de:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    35e0:	611a      	str	r2, [r3, #16]
    35e2:	3001      	adds	r0, #1
    35e4:	e7f8      	b.n	35d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    35e6:	4a0b      	ldr	r2, [pc, #44]	; (3614 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    35e8:	490b      	ldr	r1, [pc, #44]	; (3618 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    35ea:	480c      	ldr	r0, [pc, #48]	; (361c <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    35ec:	f44f 7398 	mov.w	r3, #304	; 0x130
    35f0:	f006 f88f 	bl	9712 <printk>
    35f4:	4621      	mov	r1, r4
    35f6:	480a      	ldr	r0, [pc, #40]	; (3620 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    35f8:	f006 f88b 	bl	9712 <printk>
}
    35fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3600:	4804      	ldr	r0, [pc, #16]	; (3614 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    3602:	f44f 7198 	mov.w	r1, #304	; 0x130
    3606:	f005 bf81 	b.w	950c <assert_post_action>
    360a:	bf00      	nop
    360c:	200013c6 	.word	0x200013c6
    3610:	e000ed90 	.word	0xe000ed90
    3614:	0000b599 	.word	0x0000b599
    3618:	0000b9e0 	.word	0x0000b9e0
    361c:	0000a9a4 	.word	0x0000a9a4
    3620:	0000b5fc 	.word	0x0000b5fc

00003624 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3624:	4925      	ldr	r1, [pc, #148]	; (36bc <z_arm_mpu_init+0x98>)
{
    3626:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3628:	680c      	ldr	r4, [r1, #0]
    362a:	2c08      	cmp	r4, #8
    362c:	d913      	bls.n	3656 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    362e:	f44f 73a4 	mov.w	r3, #328	; 0x148
    3632:	4a23      	ldr	r2, [pc, #140]	; (36c0 <z_arm_mpu_init+0x9c>)
    3634:	4923      	ldr	r1, [pc, #140]	; (36c4 <z_arm_mpu_init+0xa0>)
    3636:	4824      	ldr	r0, [pc, #144]	; (36c8 <z_arm_mpu_init+0xa4>)
    3638:	f006 f86b 	bl	9712 <printk>
    363c:	4823      	ldr	r0, [pc, #140]	; (36cc <z_arm_mpu_init+0xa8>)
    363e:	2208      	movs	r2, #8
    3640:	4621      	mov	r1, r4
    3642:	f006 f866 	bl	9712 <printk>
    3646:	481e      	ldr	r0, [pc, #120]	; (36c0 <z_arm_mpu_init+0x9c>)
    3648:	f44f 71a4 	mov.w	r1, #328	; 0x148
    364c:	f005 ff5e 	bl	950c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    3650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    3654:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    3656:	f7ff ff83 	bl	3560 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    365a:	6848      	ldr	r0, [r1, #4]
    365c:	491c      	ldr	r1, [pc, #112]	; (36d0 <z_arm_mpu_init+0xac>)
    365e:	2200      	movs	r2, #0
    3660:	4294      	cmp	r4, r2
    3662:	f100 000c 	add.w	r0, r0, #12
    3666:	d119      	bne.n	369c <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    3668:	4b1a      	ldr	r3, [pc, #104]	; (36d4 <z_arm_mpu_init+0xb0>)
    366a:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    366c:	f7ff ff6e 	bl	354c <arm_core_mpu_enable>
	__ASSERT(
    3670:	680b      	ldr	r3, [r1, #0]
    3672:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3676:	2b08      	cmp	r3, #8
    3678:	d00e      	beq.n	3698 <z_arm_mpu_init+0x74>
    367a:	4917      	ldr	r1, [pc, #92]	; (36d8 <z_arm_mpu_init+0xb4>)
    367c:	4a10      	ldr	r2, [pc, #64]	; (36c0 <z_arm_mpu_init+0x9c>)
    367e:	4812      	ldr	r0, [pc, #72]	; (36c8 <z_arm_mpu_init+0xa4>)
    3680:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    3684:	f006 f845 	bl	9712 <printk>
    3688:	4814      	ldr	r0, [pc, #80]	; (36dc <z_arm_mpu_init+0xb8>)
    368a:	f006 f842 	bl	9712 <printk>
    368e:	480c      	ldr	r0, [pc, #48]	; (36c0 <z_arm_mpu_init+0x9c>)
    3690:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    3694:	f005 ff3a 	bl	950c <assert_post_action>
	return 0;
    3698:	2000      	movs	r0, #0
    369a:	e7db      	b.n	3654 <z_arm_mpu_init+0x30>
    369c:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    369e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    36a2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    36a6:	4313      	orrs	r3, r2
    36a8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36ac:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    36ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
    36b2:	f043 0301 	orr.w	r3, r3, #1
    36b6:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    36b8:	3201      	adds	r2, #1
    36ba:	e7d1      	b.n	3660 <z_arm_mpu_init+0x3c>
    36bc:	0000a730 	.word	0x0000a730
    36c0:	0000b599 	.word	0x0000b599
    36c4:	0000b9e0 	.word	0x0000b9e0
    36c8:	0000a9a4 	.word	0x0000a9a4
    36cc:	0000b629 	.word	0x0000b629
    36d0:	e000ed90 	.word	0xe000ed90
    36d4:	200013c6 	.word	0x200013c6
    36d8:	0000b65d 	.word	0x0000b65d
    36dc:	0000b6ad 	.word	0x0000b6ad

000036e0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    36e0:	4b01      	ldr	r3, [pc, #4]	; (36e8 <__stdout_hook_install+0x8>)
    36e2:	6018      	str	r0, [r3, #0]
}
    36e4:	4770      	bx	lr
    36e6:	bf00      	nop
    36e8:	200000d4 	.word	0x200000d4

000036ec <nordicsemi_nrf52_init>:
	__asm__ volatile(
    36ec:	f04f 0320 	mov.w	r3, #32
    36f0:	f3ef 8111 	mrs	r1, BASEPRI
    36f4:	f383 8812 	msr	BASEPRI_MAX, r3
    36f8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    36fc:	4a0f      	ldr	r2, [pc, #60]	; (373c <nordicsemi_nrf52_init+0x50>)
    36fe:	2301      	movs	r3, #1
    3700:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3708:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    370c:	4a0c      	ldr	r2, [pc, #48]	; (3740 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    370e:	6812      	ldr	r2, [r2, #0]
    3710:	2a08      	cmp	r2, #8
    3712:	d108      	bne.n	3726 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3714:	4a0b      	ldr	r2, [pc, #44]	; (3744 <nordicsemi_nrf52_init+0x58>)
    3716:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    3718:	2a05      	cmp	r2, #5
    371a:	d804      	bhi.n	3726 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    371c:	480a      	ldr	r0, [pc, #40]	; (3748 <nordicsemi_nrf52_init+0x5c>)
    371e:	5c82      	ldrb	r2, [r0, r2]
    3720:	b10a      	cbz	r2, 3726 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3722:	4a0a      	ldr	r2, [pc, #40]	; (374c <nordicsemi_nrf52_init+0x60>)
    3724:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    372a:	2201      	movs	r2, #1
    372c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3730:	f381 8811 	msr	BASEPRI, r1
    3734:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3738:	2000      	movs	r0, #0
    373a:	4770      	bx	lr
    373c:	4001e000 	.word	0x4001e000
    3740:	10000130 	.word	0x10000130
    3744:	10000134 	.word	0x10000134
    3748:	0000b6dd 	.word	0x0000b6dd
    374c:	40000638 	.word	0x40000638

00003750 <sys_arch_reboot>:
    *p_gpregret = val;
    3750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3754:	b2c0      	uxtb	r0, r0
    3756:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    375a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    375e:	4905      	ldr	r1, [pc, #20]	; (3774 <sys_arch_reboot+0x24>)
    3760:	4b05      	ldr	r3, [pc, #20]	; (3778 <sys_arch_reboot+0x28>)
    3762:	68ca      	ldr	r2, [r1, #12]
    3764:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3768:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    376a:	60cb      	str	r3, [r1, #12]
    376c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3770:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3772:	e7fd      	b.n	3770 <sys_arch_reboot+0x20>
    3774:	e000ed00 	.word	0xe000ed00
    3778:	05fa0004 	.word	0x05fa0004

0000377c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    377c:	b120      	cbz	r0, 3788 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    377e:	4b03      	ldr	r3, [pc, #12]	; (378c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3780:	0180      	lsls	r0, r0, #6
    3782:	f043 0301 	orr.w	r3, r3, #1
    3786:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3788:	4770      	bx	lr
    378a:	bf00      	nop
    378c:	0000a6f0 	.word	0x0000a6f0

00003790 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    3790:	4a05      	ldr	r2, [pc, #20]	; (37a8 <adc_context_start_sampling.isra.0+0x18>)
    3792:	2301      	movs	r3, #1
    3794:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    3798:	b108      	cbz	r0, 379e <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    379a:	60d3      	str	r3, [r2, #12]
}
    379c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    379e:	6013      	str	r3, [r2, #0]
    37a0:	4a02      	ldr	r2, [pc, #8]	; (37ac <adc_context_start_sampling.isra.0+0x1c>)
    37a2:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    37a4:	4770      	bx	lr
    37a6:	bf00      	nop
    37a8:	40007000 	.word	0x40007000
    37ac:	40007004 	.word	0x40007004

000037b0 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    37b0:	7908      	ldrb	r0, [r1, #4]
{
    37b2:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    37b4:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    37b8:	2c07      	cmp	r4, #7
    37ba:	d81f      	bhi.n	37fc <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    37bc:	780b      	ldrb	r3, [r1, #0]
    37be:	2b09      	cmp	r3, #9
    37c0:	d81c      	bhi.n	37fc <adc_nrfx_channel_setup+0x4c>
    37c2:	e8df f003 	tbb	[pc, r3]
    37c6:	0606      	.short	0x0606
    37c8:	1b060606 	.word	0x1b060606
    37cc:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    37d0:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    37d2:	784a      	ldrb	r2, [r1, #1]
    37d4:	2a03      	cmp	r2, #3
    37d6:	d018      	beq.n	380a <adc_nrfx_channel_setup+0x5a>
    37d8:	2a04      	cmp	r2, #4
    37da:	d10f      	bne.n	37fc <adc_nrfx_channel_setup+0x4c>
    37dc:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    37de:	884a      	ldrh	r2, [r1, #2]
    37e0:	f244 060a 	movw	r6, #16394	; 0x400a
    37e4:	42b2      	cmp	r2, r6
    37e6:	d044      	beq.n	3872 <adc_nrfx_channel_setup+0xc2>
    37e8:	d811      	bhi.n	380e <adc_nrfx_channel_setup+0x5e>
    37ea:	f244 0603 	movw	r6, #16387	; 0x4003
    37ee:	42b2      	cmp	r2, r6
    37f0:	d03b      	beq.n	386a <adc_nrfx_channel_setup+0xba>
    37f2:	f244 0605 	movw	r6, #16389	; 0x4005
    37f6:	42b2      	cmp	r2, r6
    37f8:	d039      	beq.n	386e <adc_nrfx_channel_setup+0xbe>
    37fa:	b3d2      	cbz	r2, 3872 <adc_nrfx_channel_setup+0xc2>
    37fc:	f06f 0015 	mvn.w	r0, #21
    3800:	e032      	b.n	3868 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    3802:	2306      	movs	r3, #6
		break;
    3804:	e7e5      	b.n	37d2 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    3806:	2307      	movs	r3, #7
		break;
    3808:	e7e3      	b.n	37d2 <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    380a:	2501      	movs	r5, #1
    380c:	e7e7      	b.n	37de <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    380e:	f244 0614 	movw	r6, #16404	; 0x4014
    3812:	42b2      	cmp	r2, r6
    3814:	d02f      	beq.n	3876 <adc_nrfx_channel_setup+0xc6>
    3816:	f244 0628 	movw	r6, #16424	; 0x4028
    381a:	42b2      	cmp	r2, r6
    381c:	d02d      	beq.n	387a <adc_nrfx_channel_setup+0xca>
    381e:	f244 060f 	movw	r6, #16399	; 0x400f
    3822:	42b2      	cmp	r2, r6
    3824:	d1ea      	bne.n	37fc <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    3826:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    3828:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    382c:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    382e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    3832:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    3836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    383a:	0122      	lsls	r2, r4, #4
    383c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3840:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    3844:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    3846:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    384a:	0123      	lsls	r3, r4, #4
    384c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3850:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    3854:	798a      	ldrb	r2, [r1, #6]
    3856:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    385a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    385e:	4b08      	ldr	r3, [pc, #32]	; (3880 <adc_nrfx_channel_setup+0xd0>)
    3860:	441c      	add	r4, r3
    3862:	794b      	ldrb	r3, [r1, #5]
    3864:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
}
    3868:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    386a:	2200      	movs	r2, #0
    386c:	e7dc      	b.n	3828 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    386e:	2201      	movs	r2, #1
    3870:	e7da      	b.n	3828 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    3872:	2202      	movs	r2, #2
    3874:	e7d8      	b.n	3828 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    3876:	2204      	movs	r2, #4
    3878:	e7d6      	b.n	3828 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    387a:	2205      	movs	r2, #5
    387c:	e7d4      	b.n	3828 <adc_nrfx_channel_setup+0x78>
    387e:	bf00      	nop
    3880:	20000000 	.word	0x20000000

00003884 <start_read.isra.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    3884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3886:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    3888:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    388a:	b910      	cbnz	r0, 3892 <start_read.isra.0+0xe>
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);

	error = set_resolution(sequence);
    388c:	f06f 0015 	mvn.w	r0, #21
    3890:	e09c      	b.n	39cc <start_read.isra.0+0x148>
	if (!selected_channels ||
    3892:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    3896:	d1f9      	bne.n	388c <start_read.isra.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
    3898:	4c57      	ldr	r4, [pc, #348]	; (39f8 <start_read.isra.0+0x174>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    389a:	4f58      	ldr	r7, [pc, #352]	; (39fc <start_read.isra.0+0x178>)
	active_channels = 0U;
    389c:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    389e:	fa20 f302 	lsr.w	r3, r0, r2
    38a2:	f013 0301 	ands.w	r3, r3, #1
    38a6:	d033      	beq.n	3910 <start_read.isra.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    38a8:	18bb      	adds	r3, r7, r2
    38aa:	f893 c0a8 	ldrb.w	ip, [r3, #168]	; 0xa8
    38ae:	f1bc 0f00 	cmp.w	ip, #0
    38b2:	d0eb      	beq.n	388c <start_read.isra.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    38b4:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    38b8:	7c6e      	ldrb	r6, [r5, #17]
    38ba:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    38be:	3e00      	subs	r6, #0
    38c0:	bf18      	it	ne
    38c2:	2601      	movne	r6, #1
    38c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    38c8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    38cc:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    38d0:	f102 0351 	add.w	r3, r2, #81	; 0x51
    38d4:	011b      	lsls	r3, r3, #4
			++active_channels;
    38d6:	3101      	adds	r1, #1
    38d8:	f844 c003 	str.w	ip, [r4, r3]
    38dc:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    38de:	3201      	adds	r2, #1
    38e0:	2a08      	cmp	r2, #8
    38e2:	d1dc      	bne.n	389e <start_read.isra.0+0x1a>
	switch (sequence->resolution) {
    38e4:	7c2b      	ldrb	r3, [r5, #16]
    38e6:	3b08      	subs	r3, #8
    38e8:	2b06      	cmp	r3, #6
    38ea:	d8cf      	bhi.n	388c <start_read.isra.0+0x8>
    38ec:	a201      	add	r2, pc, #4	; (adr r2, 38f4 <start_read.isra.0+0x70>)
    38ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    38f2:	bf00      	nop
    38f4:	000039d9 	.word	0x000039d9
    38f8:	0000388d 	.word	0x0000388d
    38fc:	0000391b 	.word	0x0000391b
    3900:	0000388d 	.word	0x0000388d
    3904:	000039d1 	.word	0x000039d1
    3908:	0000388d 	.word	0x0000388d
    390c:	000039d5 	.word	0x000039d5
    3910:	f102 0651 	add.w	r6, r2, #81	; 0x51
    3914:	0136      	lsls	r6, r6, #4
    3916:	51a3      	str	r3, [r4, r6]
}
    3918:	e7e1      	b.n	38de <start_read.isra.0+0x5a>
	error = set_resolution(sequence);
    391a:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    391c:	4b36      	ldr	r3, [pc, #216]	; (39f8 <start_read.isra.0+0x174>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    391e:	2901      	cmp	r1, #1
    3920:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    3924:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3926:	d959      	bls.n	39dc <start_read.isra.0+0x158>
    3928:	2a00      	cmp	r2, #0
    392a:	d1af      	bne.n	388c <start_read.isra.0+0x8>
    p_reg->OVERSAMPLE = oversample;
    392c:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    3930:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    3932:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    3934:	b112      	cbz	r2, 393c <start_read.isra.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    3936:	8992      	ldrh	r2, [r2, #12]
    3938:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    393c:	68ea      	ldr	r2, [r5, #12]
    393e:	429a      	cmp	r2, r3
    3940:	d356      	bcc.n	39f0 <start_read.isra.0+0x16c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3942:	4b2d      	ldr	r3, [pc, #180]	; (39f8 <start_read.isra.0+0x174>)
    3944:	68aa      	ldr	r2, [r5, #8]
    3946:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    394a:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    394c:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    3950:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3952:	4c2a      	ldr	r4, [pc, #168]	; (39fc <start_read.isra.0+0x178>)
    3954:	f104 067c 	add.w	r6, r4, #124	; 0x7c
    3958:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    395a:	683b      	ldr	r3, [r7, #0]
    395c:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    395e:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    3960:	2600      	movs	r6, #0
    3962:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
    3964:	2b00      	cmp	r3, #0
    3966:	d03c      	beq.n	39e2 <start_read.isra.0+0x15e>
		ctx->options = *sequence->options;
    3968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    396a:	f104 0590 	add.w	r5, r4, #144	; 0x90
    396e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    3972:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
    3974:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    3978:	b398      	cbz	r0, 39e2 <start_read.isra.0+0x15e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    397a:	f3bf 8f5b 	dmb	ish
    397e:	e854 3f00 	ldrex	r3, [r4]
    3982:	e844 6200 	strex	r2, r6, [r4]
    3986:	2a00      	cmp	r2, #0
    3988:	d1f9      	bne.n	397e <start_read.isra.0+0xfa>
    398a:	f3bf 8f5b 	dmb	ish
		} else {
			return (t * to_hz + off) / from_hz;
    398e:	481c      	ldr	r0, [pc, #112]	; (3a00 <start_read.isra.0+0x17c>)
    3990:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    3994:	4a1b      	ldr	r2, [pc, #108]	; (3a04 <start_read.isra.0+0x180>)
    3996:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    399a:	2100      	movs	r1, #0
    399c:	2300      	movs	r3, #0
    399e:	fbe5 0106 	umlal	r0, r1, r5, r6
    39a2:	f7fc ffeb 	bl	97c <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    39a6:	2200      	movs	r2, #0
    39a8:	e9cd 0100 	strd	r0, r1, [sp]
    39ac:	2300      	movs	r3, #0
    39ae:	f104 0008 	add.w	r0, r4, #8
    39b2:	f005 f895 	bl	8ae0 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    39b6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    39ba:	b9bb      	cbnz	r3, 39ec <start_read.isra.0+0x168>
	return z_impl_k_sem_take(sem, timeout);
    39bc:	4812      	ldr	r0, [pc, #72]	; (3a08 <start_read.isra.0+0x184>)
    39be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    39c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    39c6:	f004 faa5 	bl	7f14 <z_impl_k_sem_take>
	return ctx->status;
    39ca:	6f20      	ldr	r0, [r4, #112]	; 0x70

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    39cc:	b003      	add	sp, #12
    39ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    39d0:	2202      	movs	r2, #2
		break;
    39d2:	e7a3      	b.n	391c <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    39d4:	2203      	movs	r2, #3
		break;
    39d6:	e7a1      	b.n	391c <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    39d8:	2200      	movs	r2, #0
    39da:	e79f      	b.n	391c <start_read.isra.0+0x98>
	switch (sequence->oversampling) {
    39dc:	2a08      	cmp	r2, #8
    39de:	d9a5      	bls.n	392c <start_read.isra.0+0xa8>
    39e0:	e754      	b.n	388c <start_read.isra.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    39e2:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
    39e6:	f7ff fed3 	bl	3790 <adc_context_start_sampling.isra.0>
    39ea:	e7e4      	b.n	39b6 <start_read.isra.0+0x132>
		return 0;
    39ec:	2000      	movs	r0, #0
	return error;
    39ee:	e7ed      	b.n	39cc <start_read.isra.0+0x148>
		return -ENOMEM;
    39f0:	f06f 000b 	mvn.w	r0, #11
    39f4:	e7ea      	b.n	39cc <start_read.isra.0+0x148>
    39f6:	bf00      	nop
    39f8:	40007000 	.word	0x40007000
    39fc:	20000000 	.word	0x20000000
    3a00:	000f423f 	.word	0x000f423f
    3a04:	000f4240 	.word	0x000f4240
    3a08:	20000058 	.word	0x20000058

00003a0c <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    3a0c:	b570      	push	{r4, r5, r6, lr}
    3a0e:	460c      	mov	r4, r1
    3a10:	4616      	mov	r6, r2
    3a12:	4d0d      	ldr	r5, [pc, #52]	; (3a48 <adc_nrfx_read_async+0x3c>)
    3a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a1c:	f105 0040 	add.w	r0, r5, #64	; 0x40
    3a20:	f004 fa78 	bl	7f14 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3a24:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    3a26:	4620      	mov	r0, r4
    3a28:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    3a2c:	676e      	str	r6, [r5, #116]	; 0x74
    3a2e:	f7ff ff29 	bl	3884 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    3a32:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3a36:	4604      	mov	r4, r0
    3a38:	b103      	cbz	r3, 3a3c <adc_nrfx_read_async+0x30>
    3a3a:	b110      	cbz	r0, 3a42 <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
    3a3c:	4803      	ldr	r0, [pc, #12]	; (3a4c <adc_nrfx_read_async+0x40>)
    3a3e:	f004 fa25 	bl	7e8c <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    3a42:	4620      	mov	r0, r4
    3a44:	bd70      	pop	{r4, r5, r6, pc}
    3a46:	bf00      	nop
    3a48:	20000000 	.word	0x20000000
    3a4c:	20000040 	.word	0x20000040

00003a50 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a50:	4b0d      	ldr	r3, [pc, #52]	; (3a88 <init_saadc+0x38>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    3a52:	b510      	push	{r4, lr}
    3a54:	2400      	movs	r4, #0
    3a56:	601c      	str	r4, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3a58:	681b      	ldr	r3, [r3, #0]
    3a5a:	4b0c      	ldr	r3, [pc, #48]	; (3a8c <init_saadc+0x3c>)
    3a5c:	601c      	str	r4, [r3, #0]
    3a5e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3a60:	4b0b      	ldr	r3, [pc, #44]	; (3a90 <init_saadc+0x40>)
    3a62:	2212      	movs	r2, #18
    3a64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    3a68:	2007      	movs	r0, #7
    3a6a:	f7ff fa55 	bl	2f18 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3a6e:	4622      	mov	r2, r4
    3a70:	2101      	movs	r1, #1
    3a72:	2007      	movs	r0, #7
    3a74:	f7ff fa6e 	bl	2f54 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
    3a78:	4806      	ldr	r0, [pc, #24]	; (3a94 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    3a7a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    3a7c:	b913      	cbnz	r3, 3a84 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    3a7e:	3040      	adds	r0, #64	; 0x40
    3a80:	f004 fa04 	bl	7e8c <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    3a84:	2000      	movs	r0, #0
    3a86:	bd10      	pop	{r4, pc}
    3a88:	40007104 	.word	0x40007104
    3a8c:	40007110 	.word	0x40007110
    3a90:	40007000 	.word	0x40007000
    3a94:	20000000 	.word	0x20000000

00003a98 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3a98:	4b34      	ldr	r3, [pc, #208]	; (3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>)
    3a9a:	681a      	ldr	r2, [r3, #0]
{
    3a9c:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    3a9e:	2a00      	cmp	r2, #0
    3aa0:	d055      	beq.n	3b4e <saadc_irq_handler+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3aa2:	2200      	movs	r2, #0
    3aa4:	601a      	str	r2, [r3, #0]
    3aa6:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    3aa8:	4c31      	ldr	r4, [pc, #196]	; (3b70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3aaa:	4b32      	ldr	r3, [pc, #200]	; (3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>)
    3aac:	2101      	movs	r1, #1
    3aae:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    3ab0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    3ab4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    3ab6:	b3db      	cbz	r3, 3b30 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    3ab8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    3abc:	b143      	cbz	r3, 3ad0 <saadc_irq_handler+0x38>
			action = callback(dev,
    3abe:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    3ac2:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    3ac6:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    3ac8:	2801      	cmp	r0, #1
    3aca:	d014      	beq.n	3af6 <saadc_irq_handler+0x5e>
    3acc:	2802      	cmp	r0, #2
    3ace:	d029      	beq.n	3b24 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    3ad0:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    3ad4:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    3ad8:	429a      	cmp	r2, r3
    3ada:	d923      	bls.n	3b24 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    3adc:	3301      	adds	r3, #1
    3ade:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    3ae2:	4b25      	ldr	r3, [pc, #148]	; (3b78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe0>)
    3ae4:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    3ae8:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    3aec:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    3aee:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3af2:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    3af6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    3afa:	b92b      	cbnz	r3, 3b08 <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    3afc:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
    3b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b04:	f7ff be44 	b.w	3790 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3b08:	f3bf 8f5b 	dmb	ish
    3b0c:	e854 3f00 	ldrex	r3, [r4]
    3b10:	1e5a      	subs	r2, r3, #1
    3b12:	e844 2100 	strex	r1, r2, [r4]
    3b16:	2900      	cmp	r1, #0
    3b18:	d1f8      	bne.n	3b0c <saadc_irq_handler+0x74>
    3b1a:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    3b1e:	2b01      	cmp	r3, #1
    3b20:	dcec      	bgt.n	3afc <saadc_irq_handler+0x64>
    3b22:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    3b24:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    3b28:	b113      	cbz	r3, 3b30 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    3b2a:	4814      	ldr	r0, [pc, #80]	; (3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>)
    3b2c:	f006 fc3a 	bl	a3a4 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    3b30:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    3b34:	b14b      	cbz	r3, 3b4a <saadc_irq_handler+0xb2>
		if (ctx->signal) {
    3b36:	6f60      	ldr	r0, [r4, #116]	; 0x74
    3b38:	b110      	cbz	r0, 3b40 <saadc_irq_handler+0xa8>
	return z_impl_k_poll_signal_raise(sig, result);
    3b3a:	2100      	movs	r1, #0
    3b3c:	f002 ff1c 	bl	6978 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    3b40:	480f      	ldr	r0, [pc, #60]	; (3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>)
    3b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b46:	f004 b9a1 	b.w	7e8c <z_impl_k_sem_give>
    3b4a:	480e      	ldr	r0, [pc, #56]	; (3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>)
    3b4c:	e7f9      	b.n	3b42 <saadc_irq_handler+0xaa>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b4e:	4b0e      	ldr	r3, [pc, #56]	; (3b88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf0>)
    3b50:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    3b52:	2900      	cmp	r1, #0
    3b54:	d0e5      	beq.n	3b22 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b56:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b58:	4a06      	ldr	r2, [pc, #24]	; (3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>)
    3b5a:	681b      	ldr	r3, [r3, #0]
    3b5c:	2301      	movs	r3, #1
    3b5e:	6013      	str	r3, [r2, #0]
    3b60:	f842 3c08 	str.w	r3, [r2, #-8]
    3b64:	f842 3c04 	str.w	r3, [r2, #-4]
}
    3b68:	e7db      	b.n	3b22 <saadc_irq_handler+0x8a>
    3b6a:	bf00      	nop
    3b6c:	40007104 	.word	0x40007104
    3b70:	20000000 	.word	0x20000000
    3b74:	40007008 	.word	0x40007008
    3b78:	40007000 	.word	0x40007000
    3b7c:	20000008 	.word	0x20000008
    3b80:	20000040 	.word	0x20000040
    3b84:	20000058 	.word	0x20000058
    3b88:	40007110 	.word	0x40007110

00003b8c <adc_nrfx_read>:
{
    3b8c:	b538      	push	{r3, r4, r5, lr}
    3b8e:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    3b90:	4d0c      	ldr	r5, [pc, #48]	; (3bc4 <adc_nrfx_read+0x38>)
    3b92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b9a:	f105 0040 	add.w	r0, r5, #64	; 0x40
    3b9e:	f004 f9b9 	bl	7f14 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3ba2:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
    3ba4:	4620      	mov	r0, r4
    3ba6:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    3baa:	676b      	str	r3, [r5, #116]	; 0x74
    3bac:	f7ff fe6a 	bl	3884 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    3bb0:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3bb4:	4604      	mov	r4, r0
    3bb6:	b103      	cbz	r3, 3bba <adc_nrfx_read+0x2e>
    3bb8:	b110      	cbz	r0, 3bc0 <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
    3bba:	4803      	ldr	r0, [pc, #12]	; (3bc8 <adc_nrfx_read+0x3c>)
    3bbc:	f004 f966 	bl	7e8c <z_impl_k_sem_give>
}
    3bc0:	4620      	mov	r0, r4
    3bc2:	bd38      	pop	{r3, r4, r5, pc}
    3bc4:	20000000 	.word	0x20000000
    3bc8:	20000040 	.word	0x20000040

00003bcc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3bd0:	4c10      	ldr	r4, [pc, #64]	; (3c14 <onoff_start+0x48>)
    3bd2:	1b07      	subs	r7, r0, r4
    3bd4:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    3bd8:	f04f 080c 	mov.w	r8, #12
    3bdc:	fb08 f807 	mul.w	r8, r8, r7
{
    3be0:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    3be2:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    3be6:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    3be8:	4420      	add	r0, r4
    3bea:	2140      	movs	r1, #64	; 0x40
    3bec:	f005 ffc1 	bl	9b72 <set_starting_state>
	if (err < 0) {
    3bf0:	1e01      	subs	r1, r0, #0
    3bf2:	db09      	blt.n	3c08 <onoff_start+0x3c>
	subdata->cb = cb;
    3bf4:	4b08      	ldr	r3, [pc, #32]	; (3c18 <onoff_start+0x4c>)
    3bf6:	4444      	add	r4, r8
	subdata->user_data = user_data;
    3bf8:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    3bfc:	4b07      	ldr	r3, [pc, #28]	; (3c1c <onoff_start+0x50>)
    3bfe:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    3c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    3c06:	4718      	bx	r3
		notify(mgr, err);
    3c08:	4630      	mov	r0, r6
    3c0a:	462b      	mov	r3, r5
}
    3c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    3c10:	4718      	bx	r3
    3c12:	bf00      	nop
    3c14:	20000dcc 	.word	0x20000dcc
    3c18:	00009bd5 	.word	0x00009bd5
    3c1c:	0000a778 	.word	0x0000a778

00003c20 <get_status>:
{
    3c20:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3c22:	b2cc      	uxtb	r4, r1
    3c24:	2c01      	cmp	r4, #1
{
    3c26:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3c28:	d909      	bls.n	3c3e <get_status+0x1e>
    3c2a:	4909      	ldr	r1, [pc, #36]	; (3c50 <get_status+0x30>)
    3c2c:	4809      	ldr	r0, [pc, #36]	; (3c54 <get_status+0x34>)
    3c2e:	4a0a      	ldr	r2, [pc, #40]	; (3c58 <get_status+0x38>)
    3c30:	2379      	movs	r3, #121	; 0x79
    3c32:	f005 fd6e 	bl	9712 <printk>
    3c36:	4808      	ldr	r0, [pc, #32]	; (3c58 <get_status+0x38>)
    3c38:	2179      	movs	r1, #121	; 0x79
    3c3a:	f005 fc67 	bl	950c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3c3e:	692b      	ldr	r3, [r5, #16]
    3c40:	210c      	movs	r1, #12
    3c42:	fb04 3401 	mla	r4, r4, r1, r3
    3c46:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    3c48:	f000 0007 	and.w	r0, r0, #7
    3c4c:	bd38      	pop	{r3, r4, r5, pc}
    3c4e:	bf00      	nop
    3c50:	0000b720 	.word	0x0000b720
    3c54:	0000a9a4 	.word	0x0000a9a4
    3c58:	0000b6e3 	.word	0x0000b6e3

00003c5c <stop>:
{
    3c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c5e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3c60:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    3c62:	6907      	ldr	r7, [r0, #16]
{
    3c64:	4605      	mov	r5, r0
    3c66:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3c68:	d90b      	bls.n	3c82 <stop+0x26>
    3c6a:	4918      	ldr	r1, [pc, #96]	; (3ccc <stop+0x70>)
    3c6c:	4818      	ldr	r0, [pc, #96]	; (3cd0 <stop+0x74>)
    3c6e:	4a19      	ldr	r2, [pc, #100]	; (3cd4 <stop+0x78>)
    3c70:	f240 134d 	movw	r3, #333	; 0x14d
    3c74:	f005 fd4d 	bl	9712 <printk>
    3c78:	4816      	ldr	r0, [pc, #88]	; (3cd4 <stop+0x78>)
    3c7a:	f240 114d 	movw	r1, #333	; 0x14d
    3c7e:	f005 fc45 	bl	950c <assert_post_action>
	__asm__ volatile(
    3c82:	f04f 0320 	mov.w	r3, #32
    3c86:	f3ef 8211 	mrs	r2, BASEPRI
    3c8a:	f383 8812 	msr	BASEPRI_MAX, r3
    3c8e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3c92:	230c      	movs	r3, #12
    3c94:	fb03 7104 	mla	r1, r3, r4, r7
    3c98:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3c9a:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    3c9e:	d001      	beq.n	3ca4 <stop+0x48>
    3ca0:	428e      	cmp	r6, r1
    3ca2:	d110      	bne.n	3cc6 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    3ca4:	fb03 7304 	mla	r3, r3, r4, r7
    3ca8:	2101      	movs	r1, #1
    3caa:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    3cac:	2000      	movs	r0, #0
	__asm__ volatile(
    3cae:	f382 8811 	msr	BASEPRI, r2
    3cb2:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3cb6:	b928      	cbnz	r0, 3cc4 <stop+0x68>
	get_sub_config(dev, type)->stop();
    3cb8:	6869      	ldr	r1, [r5, #4]
    3cba:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    3cbe:	6863      	ldr	r3, [r4, #4]
    3cc0:	4798      	blx	r3
	return 0;
    3cc2:	2000      	movs	r0, #0
}
    3cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    3cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3cca:	e7f0      	b.n	3cae <stop+0x52>
    3ccc:	0000b720 	.word	0x0000b720
    3cd0:	0000a9a4 	.word	0x0000a9a4
    3cd4:	0000b6e3 	.word	0x0000b6e3

00003cd8 <onoff_stop>:
{
    3cd8:	b570      	push	{r4, r5, r6, lr}
    3cda:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3cdc:	4906      	ldr	r1, [pc, #24]	; (3cf8 <onoff_stop+0x20>)
    3cde:	1a41      	subs	r1, r0, r1
{
    3ce0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3ce2:	1149      	asrs	r1, r1, #5
    3ce4:	4805      	ldr	r0, [pc, #20]	; (3cfc <onoff_stop+0x24>)
    3ce6:	2240      	movs	r2, #64	; 0x40
    3ce8:	f7ff ffb8 	bl	3c5c <stop>
	notify(mgr, res);
    3cec:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3cee:	4601      	mov	r1, r0
	notify(mgr, res);
    3cf0:	4620      	mov	r0, r4
}
    3cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3cf6:	4718      	bx	r3
    3cf8:	20000dcc 	.word	0x20000dcc
    3cfc:	0000a480 	.word	0x0000a480

00003d00 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3d00:	2200      	movs	r2, #0
{
    3d02:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3d04:	2101      	movs	r1, #1
{
    3d06:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3d08:	4610      	mov	r0, r2
    3d0a:	f7ff f923 	bl	2f54 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    3d0e:	2000      	movs	r0, #0
    3d10:	f7ff f902 	bl	2f18 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3d14:	480f      	ldr	r0, [pc, #60]	; (3d54 <clk_init+0x54>)
    3d16:	f001 f8b1 	bl	4e7c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3d1a:	4b0f      	ldr	r3, [pc, #60]	; (3d58 <clk_init+0x58>)
    3d1c:	4298      	cmp	r0, r3
    3d1e:	d115      	bne.n	3d4c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3d20:	f001 f8d0 	bl	4ec4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3d24:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3d26:	490d      	ldr	r1, [pc, #52]	; (3d5c <clk_init+0x5c>)
    3d28:	4630      	mov	r0, r6
    3d2a:	f005 fcdd 	bl	96e8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3d2e:	2800      	cmp	r0, #0
    3d30:	db0b      	blt.n	3d4a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3d32:	2501      	movs	r5, #1
    3d34:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    3d36:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3d38:	4908      	ldr	r1, [pc, #32]	; (3d5c <clk_init+0x5c>)
    3d3a:	f104 0020 	add.w	r0, r4, #32
    3d3e:	f005 fcd3 	bl	96e8 <onoff_manager_init>
		if (err < 0) {
    3d42:	2800      	cmp	r0, #0
    3d44:	db01      	blt.n	3d4a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3d46:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    3d48:	2000      	movs	r0, #0
}
    3d4a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3d4c:	f06f 0004 	mvn.w	r0, #4
    3d50:	e7fb      	b.n	3d4a <clk_init+0x4a>
    3d52:	bf00      	nop
    3d54:	00003d95 	.word	0x00003d95
    3d58:	0bad0000 	.word	0x0bad0000
    3d5c:	0000a788 	.word	0x0000a788

00003d60 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3d60:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3d62:	230c      	movs	r3, #12
    3d64:	4809      	ldr	r0, [pc, #36]	; (3d8c <clkstarted_handle.constprop.0+0x2c>)
    3d66:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3d68:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3d6a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3d6c:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    3d70:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3d72:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    3d74:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    3d76:	4418      	add	r0, r3
    3d78:	f005 ff19 	bl	9bae <set_on_state>
	if (callback) {
    3d7c:	b12d      	cbz	r5, 3d8a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3d7e:	4632      	mov	r2, r6
    3d80:	462b      	mov	r3, r5
    3d82:	4803      	ldr	r0, [pc, #12]	; (3d90 <clkstarted_handle.constprop.0+0x30>)
}
    3d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3d88:	4718      	bx	r3
}
    3d8a:	bd70      	pop	{r4, r5, r6, pc}
    3d8c:	20000dcc 	.word	0x20000dcc
    3d90:	0000a480 	.word	0x0000a480

00003d94 <clock_event_handler>:
	switch (event) {
    3d94:	2801      	cmp	r0, #1
{
    3d96:	b508      	push	{r3, lr}
	switch (event) {
    3d98:	d006      	beq.n	3da8 <clock_event_handler+0x14>
    3d9a:	2803      	cmp	r0, #3
    3d9c:	d008      	beq.n	3db0 <clock_event_handler+0x1c>
    3d9e:	b9a8      	cbnz	r0, 3dcc <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3da0:	4b10      	ldr	r3, [pc, #64]	; (3de4 <clock_event_handler+0x50>)
    3da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3da4:	075b      	lsls	r3, r3, #29
    3da6:	d11b      	bne.n	3de0 <clock_event_handler+0x4c>
}
    3da8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3dac:	f7ff bfd8 	b.w	3d60 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    3db0:	490d      	ldr	r1, [pc, #52]	; (3de8 <clock_event_handler+0x54>)
    3db2:	4a0e      	ldr	r2, [pc, #56]	; (3dec <clock_event_handler+0x58>)
    3db4:	480e      	ldr	r0, [pc, #56]	; (3df0 <clock_event_handler+0x5c>)
    3db6:	f240 235e 	movw	r3, #606	; 0x25e
    3dba:	f005 fcaa 	bl	9712 <printk>
    3dbe:	f240 215e 	movw	r1, #606	; 0x25e
}
    3dc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    3dc6:	4809      	ldr	r0, [pc, #36]	; (3dec <clock_event_handler+0x58>)
    3dc8:	f005 bba0 	b.w	950c <assert_post_action>
    3dcc:	4906      	ldr	r1, [pc, #24]	; (3de8 <clock_event_handler+0x54>)
    3dce:	4a07      	ldr	r2, [pc, #28]	; (3dec <clock_event_handler+0x58>)
    3dd0:	4807      	ldr	r0, [pc, #28]	; (3df0 <clock_event_handler+0x5c>)
    3dd2:	f240 2362 	movw	r3, #610	; 0x262
    3dd6:	f005 fc9c 	bl	9712 <printk>
    3dda:	f240 2162 	movw	r1, #610	; 0x262
    3dde:	e7f0      	b.n	3dc2 <clock_event_handler+0x2e>
}
    3de0:	bd08      	pop	{r3, pc}
    3de2:	bf00      	nop
    3de4:	20000dcc 	.word	0x20000dcc
    3de8:	0000b9e0 	.word	0x0000b9e0
    3dec:	0000b6e3 	.word	0x0000b6e3
    3df0:	0000a9a4 	.word	0x0000a9a4

00003df4 <generic_hfclk_start>:
{
    3df4:	b508      	push	{r3, lr}
	__asm__ volatile(
    3df6:	f04f 0320 	mov.w	r3, #32
    3dfa:	f3ef 8111 	mrs	r1, BASEPRI
    3dfe:	f383 8812 	msr	BASEPRI_MAX, r3
    3e02:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3e06:	4a12      	ldr	r2, [pc, #72]	; (3e50 <generic_hfclk_start+0x5c>)
    3e08:	6813      	ldr	r3, [r2, #0]
    3e0a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3e0e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3e12:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3e14:	d00c      	beq.n	3e30 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3e16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3e1a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3e1e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3e22:	f013 0301 	ands.w	r3, r3, #1
    3e26:	d003      	beq.n	3e30 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3e28:	480a      	ldr	r0, [pc, #40]	; (3e54 <generic_hfclk_start+0x60>)
    3e2a:	f005 fec0 	bl	9bae <set_on_state>
			already_started = true;
    3e2e:	2301      	movs	r3, #1
	__asm__ volatile(
    3e30:	f381 8811 	msr	BASEPRI, r1
    3e34:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3e38:	b123      	cbz	r3, 3e44 <generic_hfclk_start+0x50>
}
    3e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3e3e:	2000      	movs	r0, #0
    3e40:	f7ff bf8e 	b.w	3d60 <clkstarted_handle.constprop.0>
}
    3e44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3e48:	2001      	movs	r0, #1
    3e4a:	f001 b85b 	b.w	4f04 <nrfx_clock_start>
    3e4e:	bf00      	nop
    3e50:	20000e24 	.word	0x20000e24
    3e54:	20000e14 	.word	0x20000e14

00003e58 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e58:	4b09      	ldr	r3, [pc, #36]	; (3e80 <generic_hfclk_stop+0x28>)
    3e5a:	f3bf 8f5b 	dmb	ish
    3e5e:	e853 2f00 	ldrex	r2, [r3]
    3e62:	f022 0102 	bic.w	r1, r2, #2
    3e66:	e843 1000 	strex	r0, r1, [r3]
    3e6a:	2800      	cmp	r0, #0
    3e6c:	d1f7      	bne.n	3e5e <generic_hfclk_stop+0x6>
    3e6e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3e72:	07d3      	lsls	r3, r2, #31
    3e74:	d402      	bmi.n	3e7c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3e76:	2001      	movs	r0, #1
    3e78:	f001 b898 	b.w	4fac <nrfx_clock_stop>
}
    3e7c:	4770      	bx	lr
    3e7e:	bf00      	nop
    3e80:	20000e24 	.word	0x20000e24

00003e84 <api_blocking_start>:
{
    3e84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3e86:	2200      	movs	r2, #0
    3e88:	2301      	movs	r3, #1
    3e8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    3e8e:	ab04      	add	r3, sp, #16
    3e90:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3e94:	4a09      	ldr	r2, [pc, #36]	; (3ebc <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3e96:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3e9a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3e9c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3ea0:	f005 feaa 	bl	9bf8 <api_start>
	if (err < 0) {
    3ea4:	2800      	cmp	r0, #0
    3ea6:	db05      	blt.n	3eb4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    3ea8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3eac:	2300      	movs	r3, #0
    3eae:	4668      	mov	r0, sp
    3eb0:	f004 f830 	bl	7f14 <z_impl_k_sem_take>
}
    3eb4:	b007      	add	sp, #28
    3eb6:	f85d fb04 	ldr.w	pc, [sp], #4
    3eba:	bf00      	nop
    3ebc:	00009bf3 	.word	0x00009bf3

00003ec0 <z_nrf_clock_control_lf_on>:
{
    3ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3ec4:	4949      	ldr	r1, [pc, #292]	; (3fec <z_nrf_clock_control_lf_on+0x12c>)
    3ec6:	f3bf 8f5b 	dmb	ish
    3eca:	4605      	mov	r5, r0
    3ecc:	2201      	movs	r2, #1
    3ece:	e851 3f00 	ldrex	r3, [r1]
    3ed2:	e841 2000 	strex	r0, r2, [r1]
    3ed6:	2800      	cmp	r0, #0
    3ed8:	d1f9      	bne.n	3ece <z_nrf_clock_control_lf_on+0xe>
    3eda:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3ede:	b9a3      	cbnz	r3, 3f0a <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3ee0:	4943      	ldr	r1, [pc, #268]	; (3ff0 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    3ee2:	4844      	ldr	r0, [pc, #272]	; (3ff4 <z_nrf_clock_control_lf_on+0x134>)
    3ee4:	604b      	str	r3, [r1, #4]
    3ee6:	60cb      	str	r3, [r1, #12]
    3ee8:	608a      	str	r2, [r1, #8]
    3eea:	f7fe fd6b 	bl	29c4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    3eee:	2800      	cmp	r0, #0
    3ef0:	da0b      	bge.n	3f0a <z_nrf_clock_control_lf_on+0x4a>
    3ef2:	4941      	ldr	r1, [pc, #260]	; (3ff8 <z_nrf_clock_control_lf_on+0x138>)
    3ef4:	4841      	ldr	r0, [pc, #260]	; (3ffc <z_nrf_clock_control_lf_on+0x13c>)
    3ef6:	4a42      	ldr	r2, [pc, #264]	; (4000 <z_nrf_clock_control_lf_on+0x140>)
    3ef8:	f44f 7308 	mov.w	r3, #544	; 0x220
    3efc:	f005 fc09 	bl	9712 <printk>
    3f00:	483f      	ldr	r0, [pc, #252]	; (4000 <z_nrf_clock_control_lf_on+0x140>)
    3f02:	f44f 7108 	mov.w	r1, #544	; 0x220
    3f06:	f005 fb01 	bl	950c <assert_post_action>
	switch (start_mode) {
    3f0a:	b3ad      	cbz	r5, 3f78 <z_nrf_clock_control_lf_on+0xb8>
    3f0c:	1e6b      	subs	r3, r5, #1
    3f0e:	2b01      	cmp	r3, #1
    3f10:	d856      	bhi.n	3fc0 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3f12:	2d01      	cmp	r5, #1
    3f14:	d107      	bne.n	3f26 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3f16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f1a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3f1e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3f22:	2b01      	cmp	r3, #1
    3f24:	d028      	beq.n	3f78 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3f26:	f006 fa28 	bl	a37a <k_is_in_isr>
    3f2a:	4604      	mov	r4, r0
    3f2c:	b918      	cbnz	r0, 3f36 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    3f2e:	4b35      	ldr	r3, [pc, #212]	; (4004 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    3f30:	781b      	ldrb	r3, [r3, #0]
    3f32:	2b00      	cmp	r3, #0
    3f34:	d152      	bne.n	3fdc <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    3f36:	f04f 0320 	mov.w	r3, #32
    3f3a:	f3ef 8611 	mrs	r6, BASEPRI
    3f3e:	f383 8812 	msr	BASEPRI_MAX, r3
    3f42:	f3bf 8f6f 	isb	sy
    3f46:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3f48:	4f2f      	ldr	r7, [pc, #188]	; (4008 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f4a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 4010 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f4e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 4014 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3f52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3f56:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3f5a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3f5e:	03d2      	lsls	r2, r2, #15
    3f60:	d50c      	bpl.n	3f7c <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3f62:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3f66:	2b01      	cmp	r3, #1
    3f68:	d001      	beq.n	3f6e <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3f6a:	2d01      	cmp	r5, #1
    3f6c:	d106      	bne.n	3f7c <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    3f6e:	b30c      	cbz	r4, 3fb4 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    3f70:	f386 8811 	msr	BASEPRI, r6
    3f74:	f3bf 8f6f 	isb	sy
}
    3f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3f7c:	b1ac      	cbz	r4, 3faa <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3f7e:	4630      	mov	r0, r6
    3f80:	f7fe ff62 	bl	2e48 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3f84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3f88:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3f8c:	2b00      	cmp	r3, #0
    3f8e:	d1e0      	bne.n	3f52 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3f90:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    3f92:	2900      	cmp	r1, #0
    3f94:	d0dd      	beq.n	3f52 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f96:	603b      	str	r3, [r7, #0]
    3f98:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    3f9a:	2301      	movs	r3, #1
    3f9c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    3fa0:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fa4:	f8c9 3000 	str.w	r3, [r9]
}
    3fa8:	e7d3      	b.n	3f52 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    3faa:	2100      	movs	r1, #0
    3fac:	2021      	movs	r0, #33	; 0x21
    3fae:	f003 fe01 	bl	7bb4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3fb2:	e7e7      	b.n	3f84 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    3fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fb8:	2202      	movs	r2, #2
    3fba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3fbe:	e7db      	b.n	3f78 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    3fc0:	4912      	ldr	r1, [pc, #72]	; (400c <z_nrf_clock_control_lf_on+0x14c>)
    3fc2:	480e      	ldr	r0, [pc, #56]	; (3ffc <z_nrf_clock_control_lf_on+0x13c>)
    3fc4:	4a0e      	ldr	r2, [pc, #56]	; (4000 <z_nrf_clock_control_lf_on+0x140>)
    3fc6:	f240 2332 	movw	r3, #562	; 0x232
    3fca:	f005 fba2 	bl	9712 <printk>
}
    3fce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    3fd2:	480b      	ldr	r0, [pc, #44]	; (4000 <z_nrf_clock_control_lf_on+0x140>)
    3fd4:	f240 2132 	movw	r1, #562	; 0x232
    3fd8:	f005 ba98 	b.w	950c <assert_post_action>
    p_reg->INTENCLR = mask;
    3fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fe0:	2202      	movs	r2, #2
    3fe2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3fe6:	4606      	mov	r6, r0
}
    3fe8:	e7ae      	b.n	3f48 <z_nrf_clock_control_lf_on+0x88>
    3fea:	bf00      	nop
    3fec:	20000e28 	.word	0x20000e28
    3ff0:	20000dbc 	.word	0x20000dbc
    3ff4:	20000dec 	.word	0x20000dec
    3ff8:	0000b744 	.word	0x0000b744
    3ffc:	0000a9a4 	.word	0x0000a9a4
    4000:	0000b6e3 	.word	0x0000b6e3
    4004:	20001407 	.word	0x20001407
    4008:	40000104 	.word	0x40000104
    400c:	0000b9e0 	.word	0x0000b9e0
    4010:	e000e100 	.word	0xe000e100
    4014:	40000008 	.word	0x40000008

00004018 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    4018:	4b0a      	ldr	r3, [pc, #40]	; (4044 <console_out+0x2c>)
{
    401a:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    401c:	b2c6      	uxtb	r6, r0
    401e:	681b      	ldr	r3, [r3, #0]
{
    4020:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    4022:	4630      	mov	r0, r6
    4024:	4798      	blx	r3

	if (handled_by_debug_server) {
    4026:	2801      	cmp	r0, #1
    4028:	d00a      	beq.n	4040 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    402a:	2c0a      	cmp	r4, #10
    402c:	4d06      	ldr	r5, [pc, #24]	; (4048 <console_out+0x30>)
    402e:	d103      	bne.n	4038 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
    4030:	6828      	ldr	r0, [r5, #0]
    4032:	210d      	movs	r1, #13
    4034:	f005 fdfb 	bl	9c2e <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    4038:	6828      	ldr	r0, [r5, #0]
    403a:	4631      	mov	r1, r6
    403c:	f005 fdf7 	bl	9c2e <uart_poll_out>

	return c;
}
    4040:	4620      	mov	r0, r4
    4042:	bd70      	pop	{r4, r5, r6, pc}
    4044:	200000d8 	.word	0x200000d8
    4048:	20000e2c 	.word	0x20000e2c

0000404c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    404c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    404e:	4b08      	ldr	r3, [pc, #32]	; (4070 <uart_console_init+0x24>)
    4050:	4808      	ldr	r0, [pc, #32]	; (4074 <uart_console_init+0x28>)
    4052:	6018      	str	r0, [r3, #0]
    4054:	f006 f91f 	bl	a296 <z_device_ready>
    4058:	b138      	cbz	r0, 406a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    405a:	4807      	ldr	r0, [pc, #28]	; (4078 <uart_console_init+0x2c>)
    405c:	f7ff fb40 	bl	36e0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4060:	4805      	ldr	r0, [pc, #20]	; (4078 <uart_console_init+0x2c>)
    4062:	f7fe fe95 	bl	2d90 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    4066:	2000      	movs	r0, #0
}
    4068:	bd08      	pop	{r3, pc}
		return -ENODEV;
    406a:	f06f 0012 	mvn.w	r0, #18
    406e:	e7fb      	b.n	4068 <uart_console_init+0x1c>
    4070:	20000e2c 	.word	0x20000e2c
    4074:	0000a4e0 	.word	0x0000a4e0
    4078:	00004019 	.word	0x00004019

0000407c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    407c:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    407e:	6905      	ldr	r5, [r0, #16]
{
    4080:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    4082:	460c      	mov	r4, r1
    4084:	b961      	cbnz	r1, 40a0 <gpio_nrfx_manage_callback+0x24>
    4086:	4922      	ldr	r1, [pc, #136]	; (4110 <gpio_nrfx_manage_callback+0x94>)
    4088:	4a22      	ldr	r2, [pc, #136]	; (4114 <gpio_nrfx_manage_callback+0x98>)
    408a:	4823      	ldr	r0, [pc, #140]	; (4118 <gpio_nrfx_manage_callback+0x9c>)
    408c:	2324      	movs	r3, #36	; 0x24
    408e:	f005 fb40 	bl	9712 <printk>
    4092:	4822      	ldr	r0, [pc, #136]	; (411c <gpio_nrfx_manage_callback+0xa0>)
    4094:	f005 fb3d 	bl	9712 <printk>
    4098:	481e      	ldr	r0, [pc, #120]	; (4114 <gpio_nrfx_manage_callback+0x98>)
    409a:	2124      	movs	r1, #36	; 0x24
    409c:	f005 fa36 	bl	950c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    40a0:	6863      	ldr	r3, [r4, #4]
    40a2:	b963      	cbnz	r3, 40be <gpio_nrfx_manage_callback+0x42>
    40a4:	491e      	ldr	r1, [pc, #120]	; (4120 <gpio_nrfx_manage_callback+0xa4>)
    40a6:	4a1b      	ldr	r2, [pc, #108]	; (4114 <gpio_nrfx_manage_callback+0x98>)
    40a8:	481b      	ldr	r0, [pc, #108]	; (4118 <gpio_nrfx_manage_callback+0x9c>)
    40aa:	2325      	movs	r3, #37	; 0x25
    40ac:	f005 fb31 	bl	9712 <printk>
    40b0:	481c      	ldr	r0, [pc, #112]	; (4124 <gpio_nrfx_manage_callback+0xa8>)
    40b2:	f005 fb2e 	bl	9712 <printk>
    40b6:	4817      	ldr	r0, [pc, #92]	; (4114 <gpio_nrfx_manage_callback+0x98>)
    40b8:	2125      	movs	r1, #37	; 0x25
    40ba:	f005 fa27 	bl	950c <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    40be:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    40c0:	b15b      	cbz	r3, 40da <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    40c2:	2200      	movs	r2, #0
    40c4:	429c      	cmp	r4, r3
    40c6:	d113      	bne.n	40f0 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    40c8:	6823      	ldr	r3, [r4, #0]
    40ca:	b95a      	cbnz	r2, 40e4 <gpio_nrfx_manage_callback+0x68>
    40cc:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    40ce:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    40d0:	4294      	cmp	r4, r2
    40d2:	d100      	bne.n	40d6 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    40d4:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    40d6:	2300      	movs	r3, #0
    40d8:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    40da:	b976      	cbnz	r6, 40fa <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    40dc:	2000      	movs	r0, #0
				     callback, set);
}
    40de:	bd70      	pop	{r4, r5, r6, pc}
    40e0:	460b      	mov	r3, r1
    40e2:	e7ef      	b.n	40c4 <gpio_nrfx_manage_callback+0x48>
    40e4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    40e6:	68ab      	ldr	r3, [r5, #8]
    40e8:	429c      	cmp	r4, r3
	list->tail = node;
    40ea:	bf08      	it	eq
    40ec:	60aa      	streq	r2, [r5, #8]
}
    40ee:	e7f2      	b.n	40d6 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    40f0:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    40f2:	461a      	mov	r2, r3
    40f4:	2900      	cmp	r1, #0
    40f6:	d1f3      	bne.n	40e0 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    40f8:	b13e      	cbz	r6, 410a <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    40fa:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    40fc:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    40fe:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    4100:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    4102:	2800      	cmp	r0, #0
    4104:	d1ea      	bne.n	40dc <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    4106:	60ac      	str	r4, [r5, #8]
}
    4108:	e7e9      	b.n	40de <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    410a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    410e:	e7e6      	b.n	40de <gpio_nrfx_manage_callback+0x62>
    4110:	0000b780 	.word	0x0000b780
    4114:	0000b753 	.word	0x0000b753
    4118:	0000a9a4 	.word	0x0000a9a4
    411c:	0000b789 	.word	0x0000b789
    4120:	0000b798 	.word	0x0000b798
    4124:	0000b7aa 	.word	0x0000b7aa

00004128 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4128:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    412a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    412e:	d003      	beq.n	4138 <nrfx_gpio_handler+0x10>
    4130:	2b01      	cmp	r3, #1
    4132:	d036      	beq.n	41a2 <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    4134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4138:	4f1b      	ldr	r7, [pc, #108]	; (41a8 <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    413a:	693b      	ldr	r3, [r7, #16]
    413c:	685c      	ldr	r4, [r3, #4]
    413e:	2c00      	cmp	r4, #0
    4140:	d0f8      	beq.n	4134 <nrfx_gpio_handler+0xc>
    4142:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    4144:	f8df 806c 	ldr.w	r8, [pc, #108]	; 41b4 <nrfx_gpio_handler+0x8c>
    4148:	f8df 906c 	ldr.w	r9, [pc, #108]	; 41b8 <nrfx_gpio_handler+0x90>
    414c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 41bc <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4150:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    4154:	2601      	movs	r6, #1
    4156:	2d00      	cmp	r5, #0
    4158:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    415c:	bf38      	it	cc
    415e:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    4160:	68a3      	ldr	r3, [r4, #8]
    4162:	421e      	tst	r6, r3
    4164:	d014      	beq.n	4190 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    4166:	6863      	ldr	r3, [r4, #4]
    4168:	b963      	cbnz	r3, 4184 <nrfx_gpio_handler+0x5c>
    416a:	4649      	mov	r1, r9
    416c:	2345      	movs	r3, #69	; 0x45
    416e:	4642      	mov	r2, r8
    4170:	4650      	mov	r0, sl
    4172:	f005 face 	bl	9712 <printk>
    4176:	480d      	ldr	r0, [pc, #52]	; (41ac <nrfx_gpio_handler+0x84>)
    4178:	f005 facb 	bl	9712 <printk>
    417c:	2145      	movs	r1, #69	; 0x45
    417e:	4640      	mov	r0, r8
    4180:	f005 f9c4 	bl	950c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    4184:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4188:	4621      	mov	r1, r4
    418a:	4032      	ands	r2, r6
    418c:	4638      	mov	r0, r7
    418e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4190:	2d00      	cmp	r5, #0
    4192:	d0cf      	beq.n	4134 <nrfx_gpio_handler+0xc>
    4194:	682b      	ldr	r3, [r5, #0]
    4196:	2b00      	cmp	r3, #0
    4198:	bf38      	it	cc
    419a:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    419c:	462c      	mov	r4, r5
    419e:	461d      	mov	r5, r3
    41a0:	e7de      	b.n	4160 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    41a2:	4f03      	ldr	r7, [pc, #12]	; (41b0 <nrfx_gpio_handler+0x88>)
    41a4:	e7c9      	b.n	413a <nrfx_gpio_handler+0x12>
    41a6:	bf00      	nop
    41a8:	0000a498 	.word	0x0000a498
    41ac:	0000b7aa 	.word	0x0000b7aa
    41b0:	0000a4b0 	.word	0x0000a4b0
    41b4:	0000b753 	.word	0x0000b753
    41b8:	0000b7c1 	.word	0x0000b7c1
    41bc:	0000a9a4 	.word	0x0000a9a4

000041c0 <gpio_nrfx_pin_interrupt_configure>:
{
    41c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    41c2:	6840      	ldr	r0, [r0, #4]
    41c4:	7b05      	ldrb	r5, [r0, #12]
    41c6:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    41ca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    41ce:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    41d2:	f04f 0500 	mov.w	r5, #0
    41d6:	d104      	bne.n	41e2 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    41d8:	4620      	mov	r0, r4
    41da:	f001 fa7f 	bl	56dc <nrfx_gpiote_trigger_disable>
	return 0;
    41de:	2000      	movs	r0, #0
    41e0:	e054      	b.n	428c <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    41e2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    41e6:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    41ea:	d151      	bne.n	4290 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    41ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    41f0:	bf0c      	ite	eq
    41f2:	2304      	moveq	r3, #4
    41f4:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    41f6:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    41fa:	6883      	ldr	r3, [r0, #8]
    41fc:	fa23 f101 	lsr.w	r1, r3, r1
    4200:	f011 0101 	ands.w	r1, r1, #1
    4204:	d155      	bne.n	42b2 <gpio_nrfx_pin_interrupt_configure+0xf2>
    4206:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    420a:	d152      	bne.n	42b2 <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    420c:	0966      	lsrs	r6, r4, #5
    420e:	d04a      	beq.n	42a6 <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    4210:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4214:	2e01      	cmp	r6, #1
    4216:	bf08      	it	eq
    4218:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    421a:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    421e:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4220:	07ca      	lsls	r2, r1, #31
    4222:	d40b      	bmi.n	423c <gpio_nrfx_pin_interrupt_configure+0x7c>
    4224:	492b      	ldr	r1, [pc, #172]	; (42d4 <gpio_nrfx_pin_interrupt_configure+0x114>)
    4226:	482c      	ldr	r0, [pc, #176]	; (42d8 <gpio_nrfx_pin_interrupt_configure+0x118>)
    4228:	4a2c      	ldr	r2, [pc, #176]	; (42dc <gpio_nrfx_pin_interrupt_configure+0x11c>)
    422a:	f240 2329 	movw	r3, #553	; 0x229
    422e:	f005 fa70 	bl	9712 <printk>
    4232:	482a      	ldr	r0, [pc, #168]	; (42dc <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4234:	f240 2129 	movw	r1, #553	; 0x229
    4238:	f005 f968 	bl	950c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    423c:	b16e      	cbz	r6, 425a <gpio_nrfx_pin_interrupt_configure+0x9a>
    423e:	2e01      	cmp	r6, #1
    4240:	d034      	beq.n	42ac <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    4242:	4927      	ldr	r1, [pc, #156]	; (42e0 <gpio_nrfx_pin_interrupt_configure+0x120>)
    4244:	4824      	ldr	r0, [pc, #144]	; (42d8 <gpio_nrfx_pin_interrupt_configure+0x118>)
    4246:	4a25      	ldr	r2, [pc, #148]	; (42dc <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4248:	f240 232e 	movw	r3, #558	; 0x22e
    424c:	f005 fa61 	bl	9712 <printk>
    4250:	4822      	ldr	r0, [pc, #136]	; (42dc <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4252:	f240 212e 	movw	r1, #558	; 0x22e
    4256:	f005 f959 	bl	950c <assert_post_action>
        case 0: return NRF_P0;
    425a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    425e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    4262:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4266:	07db      	lsls	r3, r3, #31
    4268:	d423      	bmi.n	42b2 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    426a:	f10d 0507 	add.w	r5, sp, #7
    426e:	4629      	mov	r1, r5
    4270:	4620      	mov	r0, r4
    4272:	f001 f95d 	bl	5530 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4276:	4b1b      	ldr	r3, [pc, #108]	; (42e4 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4278:	4298      	cmp	r0, r3
    427a:	d119      	bne.n	42b0 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    427c:	4628      	mov	r0, r5
    427e:	f001 f9b7 	bl	55f0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4282:	4b19      	ldr	r3, [pc, #100]	; (42e8 <gpio_nrfx_pin_interrupt_configure+0x128>)
    4284:	4298      	cmp	r0, r3
    4286:	d013      	beq.n	42b0 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    4288:	f06f 000b 	mvn.w	r0, #11
}
    428c:	b004      	add	sp, #16
    428e:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4290:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    4294:	d005      	beq.n	42a2 <gpio_nrfx_pin_interrupt_configure+0xe2>
    4296:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    429a:	bf0c      	ite	eq
    429c:	2302      	moveq	r3, #2
    429e:	2301      	movne	r3, #1
    42a0:	e7a9      	b.n	41f6 <gpio_nrfx_pin_interrupt_configure+0x36>
    42a2:	2303      	movs	r3, #3
    42a4:	e7a7      	b.n	41f6 <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    42a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    42aa:	e7b6      	b.n	421a <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    42ac:	4b0f      	ldr	r3, [pc, #60]	; (42ec <gpio_nrfx_pin_interrupt_configure+0x12c>)
    42ae:	e7d6      	b.n	425e <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    42b0:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    42b2:	2300      	movs	r3, #0
    42b4:	4619      	mov	r1, r3
    42b6:	aa02      	add	r2, sp, #8
    42b8:	4620      	mov	r0, r4
    42ba:	f001 f81b 	bl	52f4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    42be:	4b0a      	ldr	r3, [pc, #40]	; (42e8 <gpio_nrfx_pin_interrupt_configure+0x128>)
    42c0:	4298      	cmp	r0, r3
    42c2:	d104      	bne.n	42ce <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    42c4:	2101      	movs	r1, #1
    42c6:	4620      	mov	r0, r4
    42c8:	f001 f998 	bl	55fc <nrfx_gpiote_trigger_enable>
    42cc:	e787      	b.n	41de <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    42ce:	f06f 0004 	mvn.w	r0, #4
    42d2:	e7db      	b.n	428c <gpio_nrfx_pin_interrupt_configure+0xcc>
    42d4:	0000b800 	.word	0x0000b800
    42d8:	0000a9a4 	.word	0x0000a9a4
    42dc:	0000b7cd 	.word	0x0000b7cd
    42e0:	0000b9e0 	.word	0x0000b9e0
    42e4:	0bad0004 	.word	0x0bad0004
    42e8:	0bad0000 	.word	0x0bad0000
    42ec:	50000300 	.word	0x50000300

000042f0 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    42f0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    42f2:	f001 f96d 	bl	55d0 <nrfx_gpiote_is_init>
    42f6:	4604      	mov	r4, r0
    42f8:	b968      	cbnz	r0, 4316 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    42fa:	f001 f941 	bl	5580 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    42fe:	4b08      	ldr	r3, [pc, #32]	; (4320 <gpio_nrfx_init+0x30>)
    4300:	4298      	cmp	r0, r3
    4302:	d10a      	bne.n	431a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4304:	4807      	ldr	r0, [pc, #28]	; (4324 <gpio_nrfx_init+0x34>)
    4306:	4621      	mov	r1, r4
    4308:	f001 f90c 	bl	5524 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    430c:	4622      	mov	r2, r4
    430e:	2105      	movs	r1, #5
    4310:	2006      	movs	r0, #6
    4312:	f7fe fe1f 	bl	2f54 <z_arm_irq_priority_set>
		return 0;
    4316:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4318:	bd10      	pop	{r4, pc}
		return -EIO;
    431a:	f06f 0004 	mvn.w	r0, #4
    431e:	e7fb      	b.n	4318 <gpio_nrfx_init+0x28>
    4320:	0bad0000 	.word	0x0bad0000
    4324:	00004129 	.word	0x00004129

00004328 <gpio_nrfx_pin_configure>:
{
    4328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    432c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    432e:	7b3b      	ldrb	r3, [r7, #12]
    4330:	f001 051f 	and.w	r5, r1, #31
{
    4334:	b085      	sub	sp, #20
    4336:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4338:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    433c:	4614      	mov	r4, r2
    433e:	b9ca      	cbnz	r2, 4374 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    4340:	a902      	add	r1, sp, #8
    4342:	4628      	mov	r0, r5
    4344:	f001 f8f4 	bl	5530 <nrfx_gpiote_channel_get>
    4348:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    434a:	4628      	mov	r0, r5
    434c:	f001 f9e8 	bl	5720 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4350:	4b48      	ldr	r3, [pc, #288]	; (4474 <gpio_nrfx_pin_configure+0x14c>)
    4352:	4298      	cmp	r0, r3
    4354:	d004      	beq.n	4360 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    4356:	f06f 0004 	mvn.w	r0, #4
}
    435a:	b005      	add	sp, #20
    435c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    4360:	4284      	cmp	r4, r0
    4362:	d105      	bne.n	4370 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    4364:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4368:	f001 f93c 	bl	55e4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    436c:	42a0      	cmp	r0, r4
    436e:	d1f2      	bne.n	4356 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4370:	2000      	movs	r0, #0
    4372:	e7f2      	b.n	435a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4374:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4378:	f10d 0103 	add.w	r1, sp, #3
    437c:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    437e:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4382:	f001 f8d5 	bl	5530 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4386:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    4388:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    438a:	aa02      	add	r2, sp, #8
    438c:	4649      	mov	r1, r9
    438e:	4628      	mov	r0, r5
    4390:	f000 ffb0 	bl	52f4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4394:	4b37      	ldr	r3, [pc, #220]	; (4474 <gpio_nrfx_pin_configure+0x14c>)
    4396:	4298      	cmp	r0, r3
    4398:	d002      	beq.n	43a0 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    439a:	f06f 0015 	mvn.w	r0, #21
    439e:	e7dc      	b.n	435a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    43a0:	4580      	cmp	r8, r0
    43a2:	d103      	bne.n	43ac <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    43a4:	f89d 0003 	ldrb.w	r0, [sp, #3]
    43a8:	f001 f91c 	bl	55e4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    43ac:	05a3      	lsls	r3, r4, #22
    43ae:	d54e      	bpl.n	444e <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    43b0:	4b31      	ldr	r3, [pc, #196]	; (4478 <gpio_nrfx_pin_configure+0x150>)
    43b2:	4a32      	ldr	r2, [pc, #200]	; (447c <gpio_nrfx_pin_configure+0x154>)
    43b4:	4023      	ands	r3, r4
    43b6:	4293      	cmp	r3, r2
    43b8:	d03a      	beq.n	4430 <gpio_nrfx_pin_configure+0x108>
    43ba:	d80c      	bhi.n	43d6 <gpio_nrfx_pin_configure+0xae>
    43bc:	2b06      	cmp	r3, #6
    43be:	d014      	beq.n	43ea <gpio_nrfx_pin_configure+0xc2>
    43c0:	d804      	bhi.n	43cc <gpio_nrfx_pin_configure+0xa4>
    43c2:	b193      	cbz	r3, 43ea <gpio_nrfx_pin_configure+0xc2>
    43c4:	2b02      	cmp	r3, #2
    43c6:	d1e8      	bne.n	439a <gpio_nrfx_pin_configure+0x72>
    43c8:	2304      	movs	r3, #4
    43ca:	e00e      	b.n	43ea <gpio_nrfx_pin_configure+0xc2>
    43cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    43d0:	d1e3      	bne.n	439a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    43d2:	2301      	movs	r3, #1
    43d4:	e009      	b.n	43ea <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    43d6:	4a2a      	ldr	r2, [pc, #168]	; (4480 <gpio_nrfx_pin_configure+0x158>)
    43d8:	4293      	cmp	r3, r2
    43da:	d02b      	beq.n	4434 <gpio_nrfx_pin_configure+0x10c>
    43dc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    43e0:	d02a      	beq.n	4438 <gpio_nrfx_pin_configure+0x110>
    43e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    43e6:	d1d8      	bne.n	439a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    43e8:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    43ea:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    43ee:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    43f2:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    43f6:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    43f8:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    43fc:	bf54      	ite	pl
    43fe:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4402:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4404:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    4406:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    440a:	d517      	bpl.n	443c <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    440c:	687b      	ldr	r3, [r7, #4]
    440e:	2101      	movs	r1, #1
    4410:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    4414:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4418:	2200      	movs	r2, #0
    441a:	a901      	add	r1, sp, #4
    441c:	4628      	mov	r0, r5
    441e:	f001 f811 	bl	5444 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4422:	4b14      	ldr	r3, [pc, #80]	; (4474 <gpio_nrfx_pin_configure+0x14c>)
    4424:	4298      	cmp	r0, r3
    4426:	bf14      	ite	ne
    4428:	f06f 0015 	mvnne.w	r0, #21
    442c:	2000      	moveq	r0, #0
    442e:	e794      	b.n	435a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    4430:	2307      	movs	r3, #7
    4432:	e7da      	b.n	43ea <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    4434:	2305      	movs	r3, #5
    4436:	e7d8      	b.n	43ea <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    4438:	2303      	movs	r3, #3
    443a:	e7d6      	b.n	43ea <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    443c:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    443e:	bf41      	itttt	mi
    4440:	687b      	ldrmi	r3, [r7, #4]
    4442:	2101      	movmi	r1, #1
    4444:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    4448:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    444c:	e7e4      	b.n	4418 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    444e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4450:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    4454:	bf54      	ite	pl
    4456:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    445a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    445c:	461a      	mov	r2, r3
    445e:	a901      	add	r1, sp, #4
    4460:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4462:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4466:	f000 ff45 	bl	52f4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    446a:	4b02      	ldr	r3, [pc, #8]	; (4474 <gpio_nrfx_pin_configure+0x14c>)
    446c:	4298      	cmp	r0, r3
    446e:	f43f af7f 	beq.w	4370 <gpio_nrfx_pin_configure+0x48>
    4472:	e792      	b.n	439a <gpio_nrfx_pin_configure+0x72>
    4474:	0bad0000 	.word	0x0bad0000
    4478:	00f00006 	.word	0x00f00006
    447c:	00100006 	.word	0x00100006
    4480:	00400002 	.word	0x00400002

00004484 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    4484:	4802      	ldr	r0, [pc, #8]	; (4490 <pwm_nrfx_get_cycles_per_sec+0xc>)
    4486:	2100      	movs	r1, #0
    4488:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    448c:	2000      	movs	r0, #0
    448e:	4770      	bx	lr
    4490:	00f42400 	.word	0x00f42400

00004494 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    4494:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    4496:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    4498:	6912      	ldr	r2, [r2, #16]
{
    449a:	b538      	push	{r3, r4, r5, lr}
    449c:	f100 0308 	add.w	r3, r0, #8
    44a0:	3204      	adds	r2, #4
    44a2:	f100 040c 	add.w	r4, r0, #12
    44a6:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    44a8:	f913 5b01 	ldrsb.w	r5, [r3], #1
    44ac:	2d00      	cmp	r5, #0
    44ae:	bfb4      	ite	lt
    44b0:	2500      	movlt	r5, #0
    44b2:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    44b6:	42a3      	cmp	r3, r4

		data->current[i] = value;
    44b8:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    44bc:	d1f4      	bne.n	44a8 <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    44be:	2300      	movs	r3, #0
    44c0:	461a      	mov	r2, r3
    44c2:	f001 faef 	bl	5aa4 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    44c6:	4b03      	ldr	r3, [pc, #12]	; (44d4 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    44c8:	4298      	cmp	r0, r3
	}

	return 0;
}
    44ca:	bf14      	ite	ne
    44cc:	f06f 000f 	mvnne.w	r0, #15
    44d0:	2000      	moveq	r0, #0
    44d2:	bd38      	pop	{r3, r4, r5, pc}
    44d4:	0bad0000 	.word	0x0bad0000

000044d8 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    44d8:	6802      	ldr	r2, [r0, #0]
    switch (port)
    44da:	0953      	lsrs	r3, r2, #5
{
    44dc:	b510      	push	{r4, lr}
    44de:	4604      	mov	r4, r0
    switch (port)
    44e0:	d02c      	beq.n	453c <nrf_gpio_pin_port_decode+0x64>
    44e2:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    44e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    44e8:	bf18      	it	ne
    44ea:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    44ec:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    44f0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    44f2:	07db      	lsls	r3, r3, #31
    44f4:	d40b      	bmi.n	450e <nrf_gpio_pin_port_decode+0x36>
    44f6:	4914      	ldr	r1, [pc, #80]	; (4548 <nrf_gpio_pin_port_decode+0x70>)
    44f8:	4814      	ldr	r0, [pc, #80]	; (454c <nrf_gpio_pin_port_decode+0x74>)
    44fa:	4a15      	ldr	r2, [pc, #84]	; (4550 <nrf_gpio_pin_port_decode+0x78>)
    44fc:	f240 2329 	movw	r3, #553	; 0x229
    4500:	f005 f907 	bl	9712 <printk>
    4504:	4812      	ldr	r0, [pc, #72]	; (4550 <nrf_gpio_pin_port_decode+0x78>)
    4506:	f240 2129 	movw	r1, #553	; 0x229
    450a:	f004 ffff 	bl	950c <assert_post_action>
    uint32_t pin_number = *p_pin;
    450e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4510:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4514:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4516:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4518:	d00d      	beq.n	4536 <nrf_gpio_pin_port_decode+0x5e>
    451a:	2b01      	cmp	r3, #1
    451c:	d011      	beq.n	4542 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    451e:	490d      	ldr	r1, [pc, #52]	; (4554 <nrf_gpio_pin_port_decode+0x7c>)
    4520:	480a      	ldr	r0, [pc, #40]	; (454c <nrf_gpio_pin_port_decode+0x74>)
    4522:	4a0b      	ldr	r2, [pc, #44]	; (4550 <nrf_gpio_pin_port_decode+0x78>)
    4524:	f240 232e 	movw	r3, #558	; 0x22e
    4528:	f005 f8f3 	bl	9712 <printk>
    452c:	4808      	ldr	r0, [pc, #32]	; (4550 <nrf_gpio_pin_port_decode+0x78>)
    452e:	f240 212e 	movw	r1, #558	; 0x22e
    4532:	f004 ffeb 	bl	950c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4536:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    453a:	bd10      	pop	{r4, pc}
    switch (port)
    453c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4540:	e7d4      	b.n	44ec <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    4542:	4805      	ldr	r0, [pc, #20]	; (4558 <nrf_gpio_pin_port_decode+0x80>)
    4544:	e7f9      	b.n	453a <nrf_gpio_pin_port_decode+0x62>
    4546:	bf00      	nop
    4548:	0000b800 	.word	0x0000b800
    454c:	0000a9a4 	.word	0x0000a9a4
    4550:	0000b7cd 	.word	0x0000b7cd
    4554:	0000b9e0 	.word	0x0000b9e0
    4558:	50000300 	.word	0x50000300

0000455c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    455c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    455e:	794b      	ldrb	r3, [r1, #5]
    4560:	2b01      	cmp	r3, #1
    4562:	d026      	beq.n	45b2 <uarte_nrfx_configure+0x56>
    4564:	2b03      	cmp	r3, #3
    4566:	d121      	bne.n	45ac <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    4568:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    456a:	798b      	ldrb	r3, [r1, #6]
    456c:	2b03      	cmp	r3, #3
    456e:	d11d      	bne.n	45ac <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    4570:	79cc      	ldrb	r4, [r1, #7]
    4572:	b10c      	cbz	r4, 4578 <uarte_nrfx_configure+0x1c>
    4574:	2c01      	cmp	r4, #1
    4576:	d119      	bne.n	45ac <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    4578:	790a      	ldrb	r2, [r1, #4]
    457a:	b112      	cbz	r2, 4582 <uarte_nrfx_configure+0x26>
    457c:	2a02      	cmp	r2, #2
    457e:	d115      	bne.n	45ac <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    4580:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    4582:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    4584:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    4586:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    458a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    458c:	d065      	beq.n	465a <uarte_nrfx_configure+0xfe>
    458e:	d82d      	bhi.n	45ec <uarte_nrfx_configure+0x90>
    4590:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    4594:	d064      	beq.n	4660 <uarte_nrfx_configure+0x104>
    4596:	d816      	bhi.n	45c6 <uarte_nrfx_configure+0x6a>
    4598:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    459c:	d062      	beq.n	4664 <uarte_nrfx_configure+0x108>
    459e:	d80a      	bhi.n	45b6 <uarte_nrfx_configure+0x5a>
    45a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    45a4:	d061      	beq.n	466a <uarte_nrfx_configure+0x10e>
    45a6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    45aa:	d061      	beq.n	4670 <uarte_nrfx_configure+0x114>
    45ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
    45b0:	e052      	b.n	4658 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    45b2:	2600      	movs	r6, #0
    45b4:	e7d9      	b.n	456a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    45b6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    45ba:	d05c      	beq.n	4676 <uarte_nrfx_configure+0x11a>
    45bc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    45c0:	d1f4      	bne.n	45ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    45c2:	4b37      	ldr	r3, [pc, #220]	; (46a0 <uarte_nrfx_configure+0x144>)
    45c4:	e03c      	b.n	4640 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    45c6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    45ca:	d057      	beq.n	467c <uarte_nrfx_configure+0x120>
    45cc:	d807      	bhi.n	45de <uarte_nrfx_configure+0x82>
    45ce:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    45d2:	d055      	beq.n	4680 <uarte_nrfx_configure+0x124>
    45d4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    45d8:	d1e8      	bne.n	45ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    45da:	4b32      	ldr	r3, [pc, #200]	; (46a4 <uarte_nrfx_configure+0x148>)
    45dc:	e030      	b.n	4640 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    45de:	f647 2712 	movw	r7, #31250	; 0x7a12
    45e2:	42bb      	cmp	r3, r7
    45e4:	d1e2      	bne.n	45ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    45e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    45ea:	e029      	b.n	4640 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    45ec:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    45f0:	d048      	beq.n	4684 <uarte_nrfx_configure+0x128>
    45f2:	d813      	bhi.n	461c <uarte_nrfx_configure+0xc0>
    45f4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    45f8:	d047      	beq.n	468a <uarte_nrfx_configure+0x12e>
    45fa:	d809      	bhi.n	4610 <uarte_nrfx_configure+0xb4>
    45fc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    4600:	42bb      	cmp	r3, r7
    4602:	d044      	beq.n	468e <uarte_nrfx_configure+0x132>
    4604:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    4608:	d1d0      	bne.n	45ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    460a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    460e:	e017      	b.n	4640 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4610:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    4614:	d1ca      	bne.n	45ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4616:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    461a:	e011      	b.n	4640 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    461c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    4620:	d038      	beq.n	4694 <uarte_nrfx_configure+0x138>
    4622:	d808      	bhi.n	4636 <uarte_nrfx_configure+0xda>
    4624:	4f20      	ldr	r7, [pc, #128]	; (46a8 <uarte_nrfx_configure+0x14c>)
    4626:	42bb      	cmp	r3, r7
    4628:	d037      	beq.n	469a <uarte_nrfx_configure+0x13e>
    462a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    462e:	d1bd      	bne.n	45ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4630:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4634:	e004      	b.n	4640 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4636:	4f1d      	ldr	r7, [pc, #116]	; (46ac <uarte_nrfx_configure+0x150>)
    4638:	42bb      	cmp	r3, r7
    463a:	d1b7      	bne.n	45ac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    463c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4640:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    4644:	6903      	ldr	r3, [r0, #16]
    4646:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    4648:	4334      	orrs	r4, r6
    464a:	4322      	orrs	r2, r4
    464c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    464e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    4652:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    4656:	2000      	movs	r0, #0
}
    4658:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    465a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    465e:	e7ef      	b.n	4640 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4660:	4b13      	ldr	r3, [pc, #76]	; (46b0 <uarte_nrfx_configure+0x154>)
    4662:	e7ed      	b.n	4640 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4664:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4668:	e7ea      	b.n	4640 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    466a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    466e:	e7e7      	b.n	4640 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4670:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    4674:	e7e4      	b.n	4640 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4676:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    467a:	e7e1      	b.n	4640 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    467c:	4b0d      	ldr	r3, [pc, #52]	; (46b4 <uarte_nrfx_configure+0x158>)
    467e:	e7df      	b.n	4640 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4680:	4b0d      	ldr	r3, [pc, #52]	; (46b8 <uarte_nrfx_configure+0x15c>)
    4682:	e7dd      	b.n	4640 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4684:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4688:	e7da      	b.n	4640 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    468a:	4b0c      	ldr	r3, [pc, #48]	; (46bc <uarte_nrfx_configure+0x160>)
    468c:	e7d8      	b.n	4640 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    468e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4692:	e7d5      	b.n	4640 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4694:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4698:	e7d2      	b.n	4640 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    469a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    469e:	e7cf      	b.n	4640 <uarte_nrfx_configure+0xe4>
    46a0:	0013b000 	.word	0x0013b000
    46a4:	004ea000 	.word	0x004ea000
    46a8:	0003d090 	.word	0x0003d090
    46ac:	000f4240 	.word	0x000f4240
    46b0:	00275000 	.word	0x00275000
    46b4:	0075c000 	.word	0x0075c000
    46b8:	003af000 	.word	0x003af000
    46bc:	013a9000 	.word	0x013a9000

000046c0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    46c0:	6802      	ldr	r2, [r0, #0]
    switch (port)
    46c2:	0953      	lsrs	r3, r2, #5
{
    46c4:	b510      	push	{r4, lr}
    46c6:	4604      	mov	r4, r0
    switch (port)
    46c8:	d02c      	beq.n	4724 <nrf_gpio_pin_port_decode+0x64>
    46ca:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    46cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    46d0:	bf18      	it	ne
    46d2:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    46d4:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    46d8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    46da:	07db      	lsls	r3, r3, #31
    46dc:	d40b      	bmi.n	46f6 <nrf_gpio_pin_port_decode+0x36>
    46de:	4914      	ldr	r1, [pc, #80]	; (4730 <nrf_gpio_pin_port_decode+0x70>)
    46e0:	4814      	ldr	r0, [pc, #80]	; (4734 <nrf_gpio_pin_port_decode+0x74>)
    46e2:	4a15      	ldr	r2, [pc, #84]	; (4738 <nrf_gpio_pin_port_decode+0x78>)
    46e4:	f240 2329 	movw	r3, #553	; 0x229
    46e8:	f005 f813 	bl	9712 <printk>
    46ec:	4812      	ldr	r0, [pc, #72]	; (4738 <nrf_gpio_pin_port_decode+0x78>)
    46ee:	f240 2129 	movw	r1, #553	; 0x229
    46f2:	f004 ff0b 	bl	950c <assert_post_action>
    uint32_t pin_number = *p_pin;
    46f6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    46f8:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    46fc:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    46fe:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4700:	d00d      	beq.n	471e <nrf_gpio_pin_port_decode+0x5e>
    4702:	2b01      	cmp	r3, #1
    4704:	d011      	beq.n	472a <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    4706:	490d      	ldr	r1, [pc, #52]	; (473c <nrf_gpio_pin_port_decode+0x7c>)
    4708:	480a      	ldr	r0, [pc, #40]	; (4734 <nrf_gpio_pin_port_decode+0x74>)
    470a:	4a0b      	ldr	r2, [pc, #44]	; (4738 <nrf_gpio_pin_port_decode+0x78>)
    470c:	f240 232e 	movw	r3, #558	; 0x22e
    4710:	f004 ffff 	bl	9712 <printk>
    4714:	4808      	ldr	r0, [pc, #32]	; (4738 <nrf_gpio_pin_port_decode+0x78>)
    4716:	f240 212e 	movw	r1, #558	; 0x22e
    471a:	f004 fef7 	bl	950c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    471e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4722:	bd10      	pop	{r4, pc}
    switch (port)
    4724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4728:	e7d4      	b.n	46d4 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    472a:	4805      	ldr	r0, [pc, #20]	; (4740 <nrf_gpio_pin_port_decode+0x80>)
    472c:	e7f9      	b.n	4722 <nrf_gpio_pin_port_decode+0x62>
    472e:	bf00      	nop
    4730:	0000b800 	.word	0x0000b800
    4734:	0000a9a4 	.word	0x0000a9a4
    4738:	0000b7cd 	.word	0x0000b7cd
    473c:	0000b9e0 	.word	0x0000b9e0
    4740:	50000300 	.word	0x50000300

00004744 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    4744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4746:	6906      	ldr	r6, [r0, #16]
{
    4748:	4605      	mov	r5, r0
    474a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    474c:	f005 fe15 	bl	a37a <k_is_in_isr>
    4750:	b910      	cbnz	r0, 4758 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    4752:	4b20      	ldr	r3, [pc, #128]	; (47d4 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    4754:	781b      	ldrb	r3, [r3, #0]
    4756:	b983      	cbnz	r3, 477a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    4758:	f04f 0320 	mov.w	r3, #32
    475c:	f3ef 8411 	mrs	r4, BASEPRI
    4760:	f383 8812 	msr	BASEPRI_MAX, r3
    4764:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    4768:	4628      	mov	r0, r5
    476a:	f005 fbc6 	bl	9efa <is_tx_ready>
    476e:	bb28      	cbnz	r0, 47bc <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    4770:	f384 8811 	msr	BASEPRI, r4
    4774:	f3bf 8f6f 	isb	sy
}
    4778:	e7ee      	b.n	4758 <uarte_nrfx_poll_out+0x14>
{
    477a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    477c:	4628      	mov	r0, r5
    477e:	f005 fbbc 	bl	9efa <is_tx_ready>
    4782:	b970      	cbnz	r0, 47a2 <uarte_nrfx_poll_out+0x5e>
    4784:	2001      	movs	r0, #1
    4786:	f005 fcf1 	bl	a16c <nrfx_busy_wait>
    478a:	3c01      	subs	r4, #1
    478c:	d1f6      	bne.n	477c <uarte_nrfx_poll_out+0x38>
    478e:	2100      	movs	r1, #0
    4790:	2021      	movs	r0, #33	; 0x21
    4792:	f003 fa0f 	bl	7bb4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4796:	e7f0      	b.n	477a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    4798:	f384 8811 	msr	BASEPRI, r4
    479c:	f3bf 8f6f 	isb	sy
}
    47a0:	e7f5      	b.n	478e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    47a2:	f04f 0320 	mov.w	r3, #32
    47a6:	f3ef 8411 	mrs	r4, BASEPRI
    47aa:	f383 8812 	msr	BASEPRI_MAX, r3
    47ae:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    47b2:	4628      	mov	r0, r5
    47b4:	f005 fba1 	bl	9efa <is_tx_ready>
    47b8:	2800      	cmp	r0, #0
    47ba:	d0ed      	beq.n	4798 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    47bc:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    47be:	2201      	movs	r2, #1
	data->char_out = c;
    47c0:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    47c4:	4628      	mov	r0, r5
    47c6:	f005 fc2b 	bl	a020 <tx_start>
	__asm__ volatile(
    47ca:	f384 8811 	msr	BASEPRI, r4
    47ce:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    47d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47d4:	20001407 	.word	0x20001407

000047d8 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    47d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    47dc:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    47e0:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    47e2:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    47e6:	2300      	movs	r3, #0
    47e8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    47ec:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    47ee:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    47f0:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    47f2:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    47f4:	1c58      	adds	r0, r3, #1
    47f6:	d013      	beq.n	4820 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    47f8:	a801      	add	r0, sp, #4
    47fa:	9301      	str	r3, [sp, #4]
    47fc:	f7ff ff60 	bl	46c0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4800:	9a01      	ldr	r2, [sp, #4]
    4802:	2301      	movs	r3, #1
    4804:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    4806:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    480a:	68eb      	ldr	r3, [r5, #12]
    480c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    480e:	a801      	add	r0, sp, #4
    4810:	f7ff ff56 	bl	46c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4814:	9b01      	ldr	r3, [sp, #4]
    4816:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    481a:	2203      	movs	r2, #3
    481c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4820:	692b      	ldr	r3, [r5, #16]
    4822:	1c59      	adds	r1, r3, #1
    4824:	d011      	beq.n	484a <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    4826:	7f2a      	ldrb	r2, [r5, #28]
    4828:	9301      	str	r3, [sp, #4]
    482a:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    482c:	a801      	add	r0, sp, #4
    482e:	bf14      	ite	ne
    4830:	f04f 0903 	movne.w	r9, #3
    4834:	f04f 0900 	moveq.w	r9, #0
    4838:	f7ff ff42 	bl	46c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    483c:	9b01      	ldr	r3, [sp, #4]
    483e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4842:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    4846:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    484a:	696b      	ldr	r3, [r5, #20]
    484c:	1c5a      	adds	r2, r3, #1
    484e:	d013      	beq.n	4878 <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4850:	a801      	add	r0, sp, #4
    4852:	9301      	str	r3, [sp, #4]
    4854:	f7ff ff34 	bl	46c0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4858:	9a01      	ldr	r2, [sp, #4]
    485a:	2301      	movs	r3, #1
    485c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    485e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    4862:	696b      	ldr	r3, [r5, #20]
    4864:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4866:	a801      	add	r0, sp, #4
    4868:	f7ff ff2a 	bl	46c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    486c:	9b01      	ldr	r3, [sp, #4]
    486e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4872:	2203      	movs	r2, #3
    4874:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4878:	69ab      	ldr	r3, [r5, #24]
    487a:	1c58      	adds	r0, r3, #1
    487c:	d011      	beq.n	48a2 <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    487e:	7f6a      	ldrb	r2, [r5, #29]
    4880:	9301      	str	r3, [sp, #4]
    4882:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4884:	a801      	add	r0, sp, #4
    4886:	bf14      	ite	ne
    4888:	f04f 0903 	movne.w	r9, #3
    488c:	f04f 0900 	moveq.w	r9, #0
    4890:	f7ff ff16 	bl	46c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4894:	9b01      	ldr	r3, [sp, #4]
    4896:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    489a:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    489e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    48a2:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    48a6:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    48a8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    48ac:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    48b0:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    48b4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    48b8:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    48ba:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    48be:	3104      	adds	r1, #4
    48c0:	4630      	mov	r0, r6
    48c2:	f7ff fe4b 	bl	455c <uarte_nrfx_configure>
	if (err) {
    48c6:	4605      	mov	r5, r0
    48c8:	2800      	cmp	r0, #0
    48ca:	d146      	bne.n	495a <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    48cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    48d0:	0799      	lsls	r1, r3, #30
    48d2:	d519      	bpl.n	4908 <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    48d4:	f107 0016 	add.w	r0, r7, #22
    48d8:	f001 f820 	bl	591c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    48dc:	4b22      	ldr	r3, [pc, #136]	; (4968 <uarte_instance_init.isra.0+0x190>)
    48de:	4298      	cmp	r0, r3
    48e0:	d13f      	bne.n	4962 <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    48e2:	7db8      	ldrb	r0, [r7, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    48e4:	00c3      	lsls	r3, r0, #3
    48e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    48ea:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    48ee:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    48f2:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    48f6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    48fa:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    48fe:	4a1b      	ldr	r2, [pc, #108]	; (496c <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4900:	2301      	movs	r3, #1
    4902:	4083      	lsls	r3, r0
    4904:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4908:	2308      	movs	r3, #8
    490a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    490e:	f898 3008 	ldrb.w	r3, [r8, #8]
    4912:	b95b      	cbnz	r3, 492c <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4914:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4918:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    491c:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4920:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4924:	2301      	movs	r3, #1
    4926:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    492a:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    492c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4930:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    4932:	bf5c      	itt	pl
    4934:	f44f 7280 	movpl.w	r2, #256	; 0x100
    4938:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    493c:	06db      	lsls	r3, r3, #27
    493e:	bf44      	itt	mi
    4940:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    4944:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    4948:	3714      	adds	r7, #20
    p_reg->TXD.MAXCNT = length;
    494a:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    494c:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4950:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4954:	2301      	movs	r3, #1
    4956:	60a3      	str	r3, [r4, #8]
    4958:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    495a:	4628      	mov	r0, r5
    495c:	b003      	add	sp, #12
    495e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    4962:	f06f 0504 	mvn.w	r5, #4
    4966:	e7f8      	b.n	495a <uarte_instance_init.isra.0+0x182>
    4968:	0bad0000 	.word	0x0bad0000
    496c:	4001f000 	.word	0x4001f000

00004970 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4970:	4919      	ldr	r1, [pc, #100]	; (49d8 <sys_clock_timeout_handler+0x68>)
{
    4972:	b570      	push	{r4, r5, r6, lr}
    4974:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4976:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    497a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    497c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4980:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4984:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4986:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    498a:	f04f 0500 	mov.w	r5, #0
    498e:	d20a      	bcs.n	49a6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4990:	4b12      	ldr	r3, [pc, #72]	; (49dc <sys_clock_timeout_handler+0x6c>)
    4992:	6819      	ldr	r1, [r3, #0]
    4994:	060a      	lsls	r2, r1, #24
    4996:	0a0b      	lsrs	r3, r1, #8
    4998:	1992      	adds	r2, r2, r6
    499a:	4911      	ldr	r1, [pc, #68]	; (49e0 <sys_clock_timeout_handler+0x70>)
    499c:	f143 0300 	adc.w	r3, r3, #0
    49a0:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    49a4:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    49a6:	f003 fecb 	bl	8740 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    49aa:	00a3      	lsls	r3, r4, #2
    49ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    49b0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    49b4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    49b8:	42b2      	cmp	r2, r6
    49ba:	d10b      	bne.n	49d4 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    49bc:	b91d      	cbnz	r5, 49c6 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    49be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    49c2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    49c6:	4b07      	ldr	r3, [pc, #28]	; (49e4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    49c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    49cc:	fa00 f404 	lsl.w	r4, r0, r4
    49d0:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    49d4:	bd70      	pop	{r4, r5, r6, pc}
    49d6:	bf00      	nop
    49d8:	200005a8 	.word	0x200005a8
    49dc:	20000e60 	.word	0x20000e60
    49e0:	20000590 	.word	0x20000590
    49e4:	40011000 	.word	0x40011000

000049e8 <compare_int_lock>:
{
    49e8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    49ea:	2301      	movs	r3, #1
    49ec:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    49ee:	4a11      	ldr	r2, [pc, #68]	; (4a34 <compare_int_lock+0x4c>)
    49f0:	f3bf 8f5b 	dmb	ish
    49f4:	43dc      	mvns	r4, r3
    49f6:	e852 1f00 	ldrex	r1, [r2]
    49fa:	ea01 0c04 	and.w	ip, r1, r4
    49fe:	e842 ce00 	strex	lr, ip, [r2]
    4a02:	f1be 0f00 	cmp.w	lr, #0
    4a06:	d1f6      	bne.n	49f6 <compare_int_lock+0xe>
    4a08:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4a0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4a10:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    4a14:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4a18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4a1c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4a20:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a24:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    4a28:	420b      	tst	r3, r1
}
    4a2a:	bf14      	ite	ne
    4a2c:	2001      	movne	r0, #1
    4a2e:	2000      	moveq	r0, #0
    4a30:	bd10      	pop	{r4, pc}
    4a32:	bf00      	nop
    4a34:	20000e5c 	.word	0x20000e5c

00004a38 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    4a38:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4a3a:	4a12      	ldr	r2, [pc, #72]	; (4a84 <compare_int_unlock.part.0+0x4c>)
    4a3c:	f3bf 8f5b 	dmb	ish
    4a40:	4083      	lsls	r3, r0
    4a42:	e852 1f00 	ldrex	r1, [r2]
    4a46:	4319      	orrs	r1, r3
    4a48:	e842 1c00 	strex	ip, r1, [r2]
    4a4c:	f1bc 0f00 	cmp.w	ip, #0
    4a50:	d1f7      	bne.n	4a42 <compare_int_unlock.part.0+0xa>
    4a52:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    4a56:	4a0c      	ldr	r2, [pc, #48]	; (4a88 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4a5c:	4083      	lsls	r3, r0
    4a5e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4a62:	4b0a      	ldr	r3, [pc, #40]	; (4a8c <compare_int_unlock.part.0+0x54>)
    4a64:	f3bf 8f5b 	dmb	ish
    4a68:	681b      	ldr	r3, [r3, #0]
    4a6a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    4a6e:	fa23 f000 	lsr.w	r0, r3, r0
    4a72:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a74:	bf42      	ittt	mi
    4a76:	4b06      	ldrmi	r3, [pc, #24]	; (4a90 <compare_int_unlock.part.0+0x58>)
    4a78:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4a7c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    4a80:	4770      	bx	lr
    4a82:	bf00      	nop
    4a84:	20000e5c 	.word	0x20000e5c
    4a88:	40011000 	.word	0x40011000
    4a8c:	20000e58 	.word	0x20000e58
    4a90:	e000e100 	.word	0xe000e100

00004a94 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4a94:	4b0d      	ldr	r3, [pc, #52]	; (4acc <z_nrf_rtc_timer_read+0x38>)
    4a96:	681b      	ldr	r3, [r3, #0]
    4a98:	0a19      	lsrs	r1, r3, #8
    4a9a:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4a9c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    4aa0:	4b0b      	ldr	r3, [pc, #44]	; (4ad0 <z_nrf_rtc_timer_read+0x3c>)
    4aa2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4aa6:	18c0      	adds	r0, r0, r3
    4aa8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4ab0:	d20a      	bcs.n	4ac8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    4ab2:	4b08      	ldr	r3, [pc, #32]	; (4ad4 <z_nrf_rtc_timer_read+0x40>)
    4ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ab8:	4299      	cmp	r1, r3
    4aba:	bf08      	it	eq
    4abc:	4290      	cmpeq	r0, r2
    4abe:	d203      	bcs.n	4ac8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4ac0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4ac4:	f141 0100 	adc.w	r1, r1, #0
}
    4ac8:	4770      	bx	lr
    4aca:	bf00      	nop
    4acc:	20000e60 	.word	0x20000e60
    4ad0:	40011000 	.word	0x40011000
    4ad4:	20000590 	.word	0x20000590

00004ad8 <compare_set>:
{
    4ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4adc:	b085      	sub	sp, #20
    4ade:	4616      	mov	r6, r2
    4ae0:	461f      	mov	r7, r3
    4ae2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4ae4:	f7ff ff80 	bl	49e8 <compare_int_lock>
    4ae8:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4aea:	f7ff ffd3 	bl	4a94 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4aee:	42b9      	cmp	r1, r7
    4af0:	bf08      	it	eq
    4af2:	42b0      	cmpeq	r0, r6
    4af4:	d27f      	bcs.n	4bf6 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    4af6:	ebb6 0800 	subs.w	r8, r6, r0
    4afa:	eb67 0901 	sbc.w	r9, r7, r1
    4afe:	2300      	movs	r3, #0
    4b00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4b04:	454b      	cmp	r3, r9
    4b06:	bf08      	it	eq
    4b08:	4542      	cmpeq	r2, r8
    4b0a:	f0c0 8085 	bcc.w	4c18 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    4b0e:	4b44      	ldr	r3, [pc, #272]	; (4c20 <compare_set+0x148>)
    4b10:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    4b14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4b18:	429f      	cmp	r7, r3
    4b1a:	bf08      	it	eq
    4b1c:	4296      	cmpeq	r6, r2
    4b1e:	d054      	beq.n	4bca <compare_set+0xf2>
    4b20:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b24:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    4b28:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4b2c:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b30:	fa0b f205 	lsl.w	r2, fp, r5
    4b34:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4b38:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4b3c:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b40:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    4b42:	4a38      	ldr	r2, [pc, #224]	; (4c24 <compare_set+0x14c>)
    return p_reg->CC[ch];
    4b44:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    4b48:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4b4c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    4b50:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4b54:	461c      	mov	r4, r3
    4b56:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    4b58:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4b5c:	eba0 000a 	sub.w	r0, r0, sl
    4b60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4b64:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    4b68:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    4b6a:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    4b6e:	d105      	bne.n	4b7c <compare_set+0xa4>
    4b70:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    4b72:	2013      	movs	r0, #19
    4b74:	f005 fc12 	bl	a39c <z_impl_k_busy_wait>
    4b78:	4a2a      	ldr	r2, [pc, #168]	; (4c24 <compare_set+0x14c>)
    4b7a:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    4b7c:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    4b7e:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    4b82:	eba4 000c 	sub.w	r0, r4, ip
    4b86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    4b8a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4b8e:	bf88      	it	hi
    4b90:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4b92:	2000      	movs	r0, #0
    4b94:	f8c8 0000 	str.w	r0, [r8]
    4b98:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    4b9c:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4ba0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4ba4:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4ba8:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    4bac:	4582      	cmp	sl, r0
    4bae:	d006      	beq.n	4bbe <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    4bb0:	1a20      	subs	r0, r4, r0
    4bb2:	3802      	subs	r0, #2
    4bb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    4bb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4bbc:	d819      	bhi.n	4bf2 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    4bbe:	1ae4      	subs	r4, r4, r3
    4bc0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    4bc4:	1932      	adds	r2, r6, r4
    4bc6:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    4bca:	4c15      	ldr	r4, [pc, #84]	; (4c20 <compare_set+0x148>)
    4bcc:	0129      	lsls	r1, r5, #4
    4bce:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    4bd2:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    4bd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    4bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    4bda:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    4bdc:	6043      	str	r3, [r0, #4]
	return ret;
    4bde:	2400      	movs	r4, #0
	if (key) {
    4be0:	9b01      	ldr	r3, [sp, #4]
    4be2:	b113      	cbz	r3, 4bea <compare_set+0x112>
    4be4:	4628      	mov	r0, r5
    4be6:	f7ff ff27 	bl	4a38 <compare_int_unlock.part.0>
}
    4bea:	4620      	mov	r0, r4
    4bec:	b005      	add	sp, #20
    4bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4bf2:	4620      	mov	r0, r4
    4bf4:	e7b0      	b.n	4b58 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    4bf6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4bf8:	4a0b      	ldr	r2, [pc, #44]	; (4c28 <compare_set+0x150>)
    4bfa:	f3bf 8f5b 	dmb	ish
    4bfe:	40ab      	lsls	r3, r5
    4c00:	e852 1f00 	ldrex	r1, [r2]
    4c04:	4319      	orrs	r1, r3
    4c06:	e842 1000 	strex	r0, r1, [r2]
    4c0a:	2800      	cmp	r0, #0
    4c0c:	d1f8      	bne.n	4c00 <compare_set+0x128>
    4c0e:	f3bf 8f5b 	dmb	ish
    4c12:	4632      	mov	r2, r6
    4c14:	463b      	mov	r3, r7
    4c16:	e7d8      	b.n	4bca <compare_set+0xf2>
			return -EINVAL;
    4c18:	f06f 0415 	mvn.w	r4, #21
    4c1c:	e7e0      	b.n	4be0 <compare_set+0x108>
    4c1e:	bf00      	nop
    4c20:	20000598 	.word	0x20000598
    4c24:	40011000 	.word	0x40011000
    4c28:	20000e58 	.word	0x20000e58

00004c2c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4c2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4c2e:	4b19      	ldr	r3, [pc, #100]	; (4c94 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    4c30:	4d19      	ldr	r5, [pc, #100]	; (4c98 <sys_clock_driver_init+0x6c>)
    4c32:	2400      	movs	r4, #0
    4c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4c3c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    4c40:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    4c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4c48:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c4c:	4b13      	ldr	r3, [pc, #76]	; (4c9c <sys_clock_driver_init+0x70>)
    4c4e:	2602      	movs	r6, #2
    4c50:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4c54:	2101      	movs	r1, #1
    4c56:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    4c5a:	2011      	movs	r0, #17
    4c5c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4c60:	4622      	mov	r2, r4
    4c62:	f7fe f977 	bl	2f54 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4c66:	2011      	movs	r0, #17
    4c68:	f7fe f956 	bl	2f18 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4c6c:	4a0c      	ldr	r2, [pc, #48]	; (4ca0 <sys_clock_driver_init+0x74>)
    4c6e:	2301      	movs	r3, #1
    4c70:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4c72:	4a0c      	ldr	r2, [pc, #48]	; (4ca4 <sys_clock_driver_init+0x78>)
    4c74:	602b      	str	r3, [r5, #0]
    4c76:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4c78:	4b0b      	ldr	r3, [pc, #44]	; (4ca8 <sys_clock_driver_init+0x7c>)
    4c7a:	4a0c      	ldr	r2, [pc, #48]	; (4cac <sys_clock_driver_init+0x80>)
    4c7c:	9300      	str	r3, [sp, #0]
    4c7e:	9401      	str	r4, [sp, #4]
    4c80:	2300      	movs	r3, #0
    4c82:	4620      	mov	r0, r4
    4c84:	f7ff ff28 	bl	4ad8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4c88:	4630      	mov	r0, r6
    4c8a:	f7ff f919 	bl	3ec0 <z_nrf_clock_control_lf_on>

	return 0;
}
    4c8e:	4620      	mov	r0, r4
    4c90:	b002      	add	sp, #8
    4c92:	bd70      	pop	{r4, r5, r6, pc}
    4c94:	20000598 	.word	0x20000598
    4c98:	40011000 	.word	0x40011000
    4c9c:	e000e100 	.word	0xe000e100
    4ca0:	40011008 	.word	0x40011008
    4ca4:	20000e5c 	.word	0x20000e5c
    4ca8:	00004971 	.word	0x00004971
    4cac:	007fffff 	.word	0x007fffff

00004cb0 <rtc_nrf_isr>:
{
    4cb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4cb4:	4c34      	ldr	r4, [pc, #208]	; (4d88 <rtc_nrf_isr+0xd8>)
    4cb6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4cba:	079a      	lsls	r2, r3, #30
    4cbc:	d509      	bpl.n	4cd2 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4cbe:	4b33      	ldr	r3, [pc, #204]	; (4d8c <rtc_nrf_isr+0xdc>)
    4cc0:	681a      	ldr	r2, [r3, #0]
    4cc2:	b132      	cbz	r2, 4cd2 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4cc4:	2200      	movs	r2, #0
    4cc6:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    4cc8:	4a31      	ldr	r2, [pc, #196]	; (4d90 <rtc_nrf_isr+0xe0>)
    4cca:	681b      	ldr	r3, [r3, #0]
    4ccc:	6813      	ldr	r3, [r2, #0]
    4cce:	3301      	adds	r3, #1
    4cd0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4cd2:	f04f 0320 	mov.w	r3, #32
    4cd6:	f3ef 8211 	mrs	r2, BASEPRI
    4cda:	f383 8812 	msr	BASEPRI_MAX, r3
    4cde:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    4ce2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4ce6:	03db      	lsls	r3, r3, #15
    4ce8:	d512      	bpl.n	4d10 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4cea:	f3bf 8f5b 	dmb	ish
    4cee:	4b29      	ldr	r3, [pc, #164]	; (4d94 <rtc_nrf_isr+0xe4>)
    4cf0:	e853 1f00 	ldrex	r1, [r3]
    4cf4:	f021 0001 	bic.w	r0, r1, #1
    4cf8:	e843 0600 	strex	r6, r0, [r3]
    4cfc:	2e00      	cmp	r6, #0
    4cfe:	d1f7      	bne.n	4cf0 <rtc_nrf_isr+0x40>
    4d00:	f3bf 8f5b 	dmb	ish
    4d04:	4b24      	ldr	r3, [pc, #144]	; (4d98 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4d06:	2900      	cmp	r1, #0
    4d08:	d136      	bne.n	4d78 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d0a:	6819      	ldr	r1, [r3, #0]
		if (result) {
    4d0c:	2900      	cmp	r1, #0
    4d0e:	d133      	bne.n	4d78 <rtc_nrf_isr+0xc8>
{
    4d10:	2300      	movs	r3, #0
	__asm__ volatile(
    4d12:	f382 8811 	msr	BASEPRI, r2
    4d16:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    4d1a:	b353      	cbz	r3, 4d72 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    4d1c:	f7ff feba 	bl	4a94 <z_nrf_rtc_timer_read>
    4d20:	4606      	mov	r6, r0
	__asm__ volatile(
    4d22:	f04f 0320 	mov.w	r3, #32
    4d26:	f3ef 8011 	mrs	r0, BASEPRI
    4d2a:	f383 8812 	msr	BASEPRI_MAX, r3
    4d2e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    4d32:	4b1a      	ldr	r3, [pc, #104]	; (4d9c <rtc_nrf_isr+0xec>)
    4d34:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    4d38:	4549      	cmp	r1, r9
    4d3a:	bf08      	it	eq
    4d3c:	4546      	cmpeq	r6, r8
    4d3e:	f04f 0200 	mov.w	r2, #0
    4d42:	d31e      	bcc.n	4d82 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4d44:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    4d48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    4d4c:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4d50:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    4d54:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4d5a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    4d5e:	f380 8811 	msr	BASEPRI, r0
    4d62:	f3bf 8f6f 	isb	sy
		if (handler) {
    4d66:	b121      	cbz	r1, 4d72 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    4d68:	9500      	str	r5, [sp, #0]
    4d6a:	4642      	mov	r2, r8
    4d6c:	464b      	mov	r3, r9
    4d6e:	2000      	movs	r0, #0
    4d70:	4788      	blx	r1
}
    4d72:	b003      	add	sp, #12
    4d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4d78:	2100      	movs	r1, #0
    4d7a:	6019      	str	r1, [r3, #0]
    4d7c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4d7e:	2301      	movs	r3, #1
}
    4d80:	e7c7      	b.n	4d12 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4d82:	4611      	mov	r1, r2
    4d84:	e7eb      	b.n	4d5e <rtc_nrf_isr+0xae>
    4d86:	bf00      	nop
    4d88:	40011000 	.word	0x40011000
    4d8c:	40011104 	.word	0x40011104
    4d90:	20000e60 	.word	0x20000e60
    4d94:	20000e58 	.word	0x20000e58
    4d98:	40011140 	.word	0x40011140
    4d9c:	20000598 	.word	0x20000598

00004da0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4da0:	4b14      	ldr	r3, [pc, #80]	; (4df4 <sys_clock_set_timeout+0x54>)
{
    4da2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4da4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4da8:	bf08      	it	eq
    4daa:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4dac:	1e44      	subs	r4, r0, #1
    4dae:	2c00      	cmp	r4, #0
    4db0:	dd1e      	ble.n	4df0 <sys_clock_set_timeout+0x50>
    4db2:	429c      	cmp	r4, r3
    4db4:	bfa8      	it	ge
    4db6:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4db8:	f7ff fe6c 	bl	4a94 <z_nrf_rtc_timer_read>
    4dbc:	4b0e      	ldr	r3, [pc, #56]	; (4df8 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4dbe:	490f      	ldr	r1, [pc, #60]	; (4dfc <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    4dc4:	1a80      	subs	r0, r0, r2
		ticks = 0;
    4dc6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4dca:	bf28      	it	cs
    4dcc:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4dce:	3001      	adds	r0, #1
    4dd0:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    4dd2:	4808      	ldr	r0, [pc, #32]	; (4df4 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4dd4:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    4dd6:	4284      	cmp	r4, r0
    4dd8:	bf28      	it	cs
    4dda:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4ddc:	1912      	adds	r2, r2, r4
    4dde:	f04f 0000 	mov.w	r0, #0
    4de2:	9001      	str	r0, [sp, #4]
    4de4:	f143 0300 	adc.w	r3, r3, #0
    4de8:	f7ff fe76 	bl	4ad8 <compare_set>
}
    4dec:	b002      	add	sp, #8
    4dee:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4df0:	2400      	movs	r4, #0
    4df2:	e7e1      	b.n	4db8 <sys_clock_set_timeout+0x18>
    4df4:	007fffff 	.word	0x007fffff
    4df8:	200005a8 	.word	0x200005a8
    4dfc:	00004971 	.word	0x00004971

00004e00 <sys_clock_elapsed>:
{
    4e00:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4e02:	f7ff fe47 	bl	4a94 <z_nrf_rtc_timer_read>
    4e06:	4b02      	ldr	r3, [pc, #8]	; (4e10 <sys_clock_elapsed+0x10>)
    4e08:	681b      	ldr	r3, [r3, #0]
}
    4e0a:	1ac0      	subs	r0, r0, r3
    4e0c:	bd08      	pop	{r3, pc}
    4e0e:	bf00      	nop
    4e10:	200005a8 	.word	0x200005a8

00004e14 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    4e14:	b508      	push	{r3, lr}
    switch (domain)
    4e16:	b178      	cbz	r0, 4e38 <nrf_clock_is_running.constprop.0+0x24>
    4e18:	2801      	cmp	r0, #1
    4e1a:	d01c      	beq.n	4e56 <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    4e1c:	4a14      	ldr	r2, [pc, #80]	; (4e70 <nrf_clock_is_running.constprop.0+0x5c>)
    4e1e:	4915      	ldr	r1, [pc, #84]	; (4e74 <nrf_clock_is_running.constprop.0+0x60>)
    4e20:	4815      	ldr	r0, [pc, #84]	; (4e78 <nrf_clock_is_running.constprop.0+0x64>)
    4e22:	f44f 734f 	mov.w	r3, #828	; 0x33c
    4e26:	f004 fc74 	bl	9712 <printk>
    4e2a:	4811      	ldr	r0, [pc, #68]	; (4e70 <nrf_clock_is_running.constprop.0+0x5c>)
    4e2c:	f44f 714f 	mov.w	r1, #828	; 0x33c
    4e30:	f004 fb6c 	bl	950c <assert_post_action>
            return false;
    4e34:	2000      	movs	r0, #0
    4e36:	e00d      	b.n	4e54 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    4e38:	b131      	cbz	r1, 4e48 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4e3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e3e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4e42:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4e46:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e4c:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4e50:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    4e54:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    4e56:	b131      	cbz	r1, 4e66 <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e5c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4e60:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4e64:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4e66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e6a:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    4e6e:	e7ef      	b.n	4e50 <nrf_clock_is_running.constprop.0+0x3c>
    4e70:	0000b838 	.word	0x0000b838
    4e74:	0000b9e0 	.word	0x0000b9e0
    4e78:	0000a9a4 	.word	0x0000a9a4

00004e7c <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    4e7c:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    4e7e:	4604      	mov	r4, r0
    4e80:	b948      	cbnz	r0, 4e96 <nrfx_clock_init+0x1a>
    4e82:	490a      	ldr	r1, [pc, #40]	; (4eac <nrfx_clock_init+0x30>)
    4e84:	480a      	ldr	r0, [pc, #40]	; (4eb0 <nrfx_clock_init+0x34>)
    4e86:	4a0b      	ldr	r2, [pc, #44]	; (4eb4 <nrfx_clock_init+0x38>)
    4e88:	23bd      	movs	r3, #189	; 0xbd
    4e8a:	f004 fc42 	bl	9712 <printk>
    4e8e:	4809      	ldr	r0, [pc, #36]	; (4eb4 <nrfx_clock_init+0x38>)
    4e90:	21bd      	movs	r1, #189	; 0xbd
    4e92:	f004 fb3b 	bl	950c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4e96:	4b08      	ldr	r3, [pc, #32]	; (4eb8 <nrfx_clock_init+0x3c>)
    4e98:	791a      	ldrb	r2, [r3, #4]
    4e9a:	b922      	cbnz	r2, 4ea6 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4e9c:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    4e9e:	4807      	ldr	r0, [pc, #28]	; (4ebc <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    4ea0:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    4ea2:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4ea4:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4ea6:	4806      	ldr	r0, [pc, #24]	; (4ec0 <nrfx_clock_init+0x44>)
    return err_code;
    4ea8:	e7fc      	b.n	4ea4 <nrfx_clock_init+0x28>
    4eaa:	bf00      	nop
    4eac:	0000b8a9 	.word	0x0000b8a9
    4eb0:	0000a9a4 	.word	0x0000a9a4
    4eb4:	0000b86c 	.word	0x0000b86c
    4eb8:	20000e64 	.word	0x20000e64
    4ebc:	0bad0000 	.word	0x0bad0000
    4ec0:	0bad000c 	.word	0x0bad000c

00004ec4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    4ec4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4ec6:	4b0b      	ldr	r3, [pc, #44]	; (4ef4 <nrfx_clock_enable+0x30>)
    4ec8:	791b      	ldrb	r3, [r3, #4]
    4eca:	b94b      	cbnz	r3, 4ee0 <nrfx_clock_enable+0x1c>
    4ecc:	490a      	ldr	r1, [pc, #40]	; (4ef8 <nrfx_clock_enable+0x34>)
    4ece:	480b      	ldr	r0, [pc, #44]	; (4efc <nrfx_clock_enable+0x38>)
    4ed0:	4a0b      	ldr	r2, [pc, #44]	; (4f00 <nrfx_clock_enable+0x3c>)
    4ed2:	23d6      	movs	r3, #214	; 0xd6
    4ed4:	f004 fc1d 	bl	9712 <printk>
    4ed8:	4809      	ldr	r0, [pc, #36]	; (4f00 <nrfx_clock_enable+0x3c>)
    4eda:	21d6      	movs	r1, #214	; 0xd6
    4edc:	f004 fb16 	bl	950c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4ee0:	2000      	movs	r0, #0
    4ee2:	f7fe f829 	bl	2f38 <arch_irq_is_enabled>
    4ee6:	b918      	cbnz	r0, 4ef0 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    4ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4eec:	f7fe b814 	b.w	2f18 <arch_irq_enable>
    4ef0:	bd08      	pop	{r3, pc}
    4ef2:	bf00      	nop
    4ef4:	20000e64 	.word	0x20000e64
    4ef8:	0000b8b7 	.word	0x0000b8b7
    4efc:	0000a9a4 	.word	0x0000a9a4
    4f00:	0000b86c 	.word	0x0000b86c

00004f04 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4f04:	4b22      	ldr	r3, [pc, #136]	; (4f90 <nrfx_clock_start+0x8c>)
    4f06:	791b      	ldrb	r3, [r3, #4]
{
    4f08:	b513      	push	{r0, r1, r4, lr}
    4f0a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4f0c:	b95b      	cbnz	r3, 4f26 <nrfx_clock_start+0x22>
    4f0e:	4921      	ldr	r1, [pc, #132]	; (4f94 <nrfx_clock_start+0x90>)
    4f10:	4821      	ldr	r0, [pc, #132]	; (4f98 <nrfx_clock_start+0x94>)
    4f12:	4a22      	ldr	r2, [pc, #136]	; (4f9c <nrfx_clock_start+0x98>)
    4f14:	f44f 7389 	mov.w	r3, #274	; 0x112
    4f18:	f004 fbfb 	bl	9712 <printk>
    4f1c:	481f      	ldr	r0, [pc, #124]	; (4f9c <nrfx_clock_start+0x98>)
    4f1e:	f44f 7189 	mov.w	r1, #274	; 0x112
    4f22:	f004 faf3 	bl	950c <assert_post_action>
    switch (domain)
    4f26:	b174      	cbz	r4, 4f46 <nrfx_clock_start+0x42>
    4f28:	2c01      	cmp	r4, #1
    4f2a:	d027      	beq.n	4f7c <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4f2c:	4a1b      	ldr	r2, [pc, #108]	; (4f9c <nrfx_clock_start+0x98>)
    4f2e:	491c      	ldr	r1, [pc, #112]	; (4fa0 <nrfx_clock_start+0x9c>)
    4f30:	4819      	ldr	r0, [pc, #100]	; (4f98 <nrfx_clock_start+0x94>)
    4f32:	f44f 73a2 	mov.w	r3, #324	; 0x144
    4f36:	f004 fbec 	bl	9712 <printk>
    4f3a:	4818      	ldr	r0, [pc, #96]	; (4f9c <nrfx_clock_start+0x98>)
    4f3c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    4f40:	f004 fae4 	bl	950c <assert_post_action>
            break;
    }
}
    4f44:	e016      	b.n	4f74 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    4f46:	a901      	add	r1, sp, #4
    4f48:	4620      	mov	r0, r4
    4f4a:	f7ff ff63 	bl	4e14 <nrf_clock_is_running.constprop.0>
    4f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f52:	b188      	cbz	r0, 4f78 <nrfx_clock_start+0x74>
    4f54:	9a01      	ldr	r2, [sp, #4]
    4f56:	2a01      	cmp	r2, #1
    4f58:	d10e      	bne.n	4f78 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4f5a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f5e:	4b11      	ldr	r3, [pc, #68]	; (4fa4 <nrfx_clock_start+0xa0>)
    4f60:	2200      	movs	r2, #0
    4f62:	601a      	str	r2, [r3, #0]
    4f64:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4f66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f6a:	2202      	movs	r2, #2
    4f6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f70:	2201      	movs	r2, #1
    4f72:	609a      	str	r2, [r3, #8]
}
    4f74:	b002      	add	sp, #8
    4f76:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    4f78:	2200      	movs	r2, #0
    4f7a:	e7ee      	b.n	4f5a <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f7c:	4b0a      	ldr	r3, [pc, #40]	; (4fa8 <nrfx_clock_start+0xa4>)
    4f7e:	2200      	movs	r2, #0
    4f80:	601a      	str	r2, [r3, #0]
    4f82:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f88:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f8c:	601c      	str	r4, [r3, #0]
}
    4f8e:	e7f1      	b.n	4f74 <nrfx_clock_start+0x70>
    4f90:	20000e64 	.word	0x20000e64
    4f94:	0000b8b7 	.word	0x0000b8b7
    4f98:	0000a9a4 	.word	0x0000a9a4
    4f9c:	0000b86c 	.word	0x0000b86c
    4fa0:	0000b9e0 	.word	0x0000b9e0
    4fa4:	40000104 	.word	0x40000104
    4fa8:	40000100 	.word	0x40000100

00004fac <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    4fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4fae:	4d2f      	ldr	r5, [pc, #188]	; (506c <nrfx_clock_stop+0xc0>)
    4fb0:	792a      	ldrb	r2, [r5, #4]
{
    4fb2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4fb4:	b95a      	cbnz	r2, 4fce <nrfx_clock_stop+0x22>
    4fb6:	492e      	ldr	r1, [pc, #184]	; (5070 <nrfx_clock_stop+0xc4>)
    4fb8:	482e      	ldr	r0, [pc, #184]	; (5074 <nrfx_clock_stop+0xc8>)
    4fba:	4a2f      	ldr	r2, [pc, #188]	; (5078 <nrfx_clock_stop+0xcc>)
    4fbc:	f240 134b 	movw	r3, #331	; 0x14b
    4fc0:	f004 fba7 	bl	9712 <printk>
    4fc4:	482c      	ldr	r0, [pc, #176]	; (5078 <nrfx_clock_stop+0xcc>)
    4fc6:	f240 114b 	movw	r1, #331	; 0x14b
    4fca:	f004 fa9f 	bl	950c <assert_post_action>
    switch (domain)
    4fce:	b17c      	cbz	r4, 4ff0 <nrfx_clock_stop+0x44>
    4fd0:	2c01      	cmp	r4, #1
    4fd2:	d028      	beq.n	5026 <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4fd4:	4929      	ldr	r1, [pc, #164]	; (507c <nrfx_clock_stop+0xd0>)
    4fd6:	4827      	ldr	r0, [pc, #156]	; (5074 <nrfx_clock_stop+0xc8>)
    4fd8:	4a27      	ldr	r2, [pc, #156]	; (5078 <nrfx_clock_stop+0xcc>)
    4fda:	f240 1367 	movw	r3, #359	; 0x167
    4fde:	f004 fb98 	bl	9712 <printk>
    4fe2:	4825      	ldr	r0, [pc, #148]	; (5078 <nrfx_clock_stop+0xcc>)
    4fe4:	f240 1167 	movw	r1, #359	; 0x167
    4fe8:	f004 fa90 	bl	950c <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4fec:	b003      	add	sp, #12
    4fee:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    4ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ff4:	2202      	movs	r2, #2
    4ff6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ffa:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    4ffe:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5002:	2201      	movs	r2, #1
    5004:	681b      	ldr	r3, [r3, #0]
    5006:	4b1e      	ldr	r3, [pc, #120]	; (5080 <nrfx_clock_stop+0xd4>)
    5008:	f242 7410 	movw	r4, #10000	; 0x2710
    500c:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    500e:	2100      	movs	r1, #0
    5010:	4608      	mov	r0, r1
    5012:	f7ff feff 	bl	4e14 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5016:	2800      	cmp	r0, #0
    5018:	d0e8      	beq.n	4fec <nrfx_clock_stop+0x40>
    501a:	2001      	movs	r0, #1
    501c:	f005 f8a6 	bl	a16c <nrfx_busy_wait>
    5020:	3c01      	subs	r4, #1
    5022:	d1f4      	bne.n	500e <nrfx_clock_stop+0x62>
    5024:	e7e2      	b.n	4fec <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    5026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    502a:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    502c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5030:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5034:	f503 7380 	add.w	r3, r3, #256	; 0x100
    5038:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    503a:	4b12      	ldr	r3, [pc, #72]	; (5084 <nrfx_clock_stop+0xd8>)
    503c:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    503e:	f88d 4007 	strb.w	r4, [sp, #7]
    5042:	f242 7410 	movw	r4, #10000	; 0x2710
    5046:	f10d 0107 	add.w	r1, sp, #7
    504a:	2001      	movs	r0, #1
    504c:	f7ff fee2 	bl	4e14 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    5050:	b910      	cbnz	r0, 5058 <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    5052:	2300      	movs	r3, #0
    5054:	716b      	strb	r3, [r5, #5]
    5056:	e7c9      	b.n	4fec <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    5058:	f89d 0007 	ldrb.w	r0, [sp, #7]
    505c:	2801      	cmp	r0, #1
    505e:	d1f8      	bne.n	5052 <nrfx_clock_stop+0xa6>
    5060:	f005 f884 	bl	a16c <nrfx_busy_wait>
    5064:	3c01      	subs	r4, #1
    5066:	d1ee      	bne.n	5046 <nrfx_clock_stop+0x9a>
    5068:	e7f3      	b.n	5052 <nrfx_clock_stop+0xa6>
    506a:	bf00      	nop
    506c:	20000e64 	.word	0x20000e64
    5070:	0000b8b7 	.word	0x0000b8b7
    5074:	0000a9a4 	.word	0x0000a9a4
    5078:	0000b86c 	.word	0x0000b86c
    507c:	0000b9e0 	.word	0x0000b9e0
    5080:	4000000c 	.word	0x4000000c
    5084:	40000004 	.word	0x40000004

00005088 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5088:	4b16      	ldr	r3, [pc, #88]	; (50e4 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    508a:	b507      	push	{r0, r1, r2, lr}
    508c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    508e:	b16a      	cbz	r2, 50ac <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5090:	2200      	movs	r2, #0
    5092:	601a      	str	r2, [r3, #0]
    5094:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    509a:	2201      	movs	r2, #1
    509c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    50a0:	4b11      	ldr	r3, [pc, #68]	; (50e8 <nrfx_power_clock_irq_handler+0x60>)
    50a2:	7958      	ldrb	r0, [r3, #5]
    50a4:	b910      	cbnz	r0, 50ac <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    50a6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    50a8:	681b      	ldr	r3, [r3, #0]
    50aa:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    50ac:	4b0f      	ldr	r3, [pc, #60]	; (50ec <nrfx_power_clock_irq_handler+0x64>)
    50ae:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    50b0:	b16a      	cbz	r2, 50ce <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    50b2:	2000      	movs	r0, #0
    50b4:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    50b6:	a901      	add	r1, sp, #4
    50b8:	681b      	ldr	r3, [r3, #0]
    50ba:	f7ff feab 	bl	4e14 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    50be:	9a01      	ldr	r2, [sp, #4]
    50c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    50c4:	b932      	cbnz	r2, 50d4 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    50c6:	2201      	movs	r2, #1
    50c8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    50cc:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    50ce:	b003      	add	sp, #12
    50d0:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    50d4:	2202      	movs	r2, #2
    50d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    50da:	4b03      	ldr	r3, [pc, #12]	; (50e8 <nrfx_power_clock_irq_handler+0x60>)
    50dc:	2001      	movs	r0, #1
    50de:	681b      	ldr	r3, [r3, #0]
    50e0:	4798      	blx	r3
}
    50e2:	e7f4      	b.n	50ce <nrfx_power_clock_irq_handler+0x46>
    50e4:	40000100 	.word	0x40000100
    50e8:	20000e64 	.word	0x20000e64
    50ec:	40000104 	.word	0x40000104

000050f0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    50f0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    50f2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    50f4:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    50f6:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    50fa:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    50fc:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    5100:	d014      	beq.n	512c <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5102:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5106:	fa05 f204 	lsl.w	r2, r5, r4
    510a:	ea23 0202 	bic.w	r2, r3, r2
    510e:	e850 6f00 	ldrex	r6, [r0]
    5112:	429e      	cmp	r6, r3
    5114:	d104      	bne.n	5120 <nrfx_flag32_alloc+0x30>
    5116:	e840 2c00 	strex	ip, r2, [r0]
    511a:	f1bc 0f00 	cmp.w	ip, #0
    511e:	d1f6      	bne.n	510e <nrfx_flag32_alloc+0x1e>
    5120:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5124:	d1e6      	bne.n	50f4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    5126:	4802      	ldr	r0, [pc, #8]	; (5130 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    5128:	700c      	strb	r4, [r1, #0]
}
    512a:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    512c:	4801      	ldr	r0, [pc, #4]	; (5134 <nrfx_flag32_alloc+0x44>)
    512e:	e7fc      	b.n	512a <nrfx_flag32_alloc+0x3a>
    5130:	0bad0000 	.word	0x0bad0000
    5134:	0bad0002 	.word	0x0bad0002

00005138 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5138:	6803      	ldr	r3, [r0, #0]
    513a:	40cb      	lsrs	r3, r1
    513c:	07db      	lsls	r3, r3, #31
{
    513e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    5140:	d415      	bmi.n	516e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    5142:	2301      	movs	r3, #1
    5144:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    5148:	6803      	ldr	r3, [r0, #0]
    514a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    514e:	ea41 0203 	orr.w	r2, r1, r3
    5152:	e850 4f00 	ldrex	r4, [r0]
    5156:	429c      	cmp	r4, r3
    5158:	d104      	bne.n	5164 <nrfx_flag32_free+0x2c>
    515a:	e840 2c00 	strex	ip, r2, [r0]
    515e:	f1bc 0f00 	cmp.w	ip, #0
    5162:	d1f6      	bne.n	5152 <nrfx_flag32_free+0x1a>
    5164:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5168:	d1ee      	bne.n	5148 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    516a:	4802      	ldr	r0, [pc, #8]	; (5174 <nrfx_flag32_free+0x3c>)
}
    516c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    516e:	4802      	ldr	r0, [pc, #8]	; (5178 <nrfx_flag32_free+0x40>)
    5170:	e7fc      	b.n	516c <nrfx_flag32_free+0x34>
    5172:	bf00      	nop
    5174:	0bad0000 	.word	0x0bad0000
    5178:	0bad0004 	.word	0x0bad0004

0000517c <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    517c:	4b05      	ldr	r3, [pc, #20]	; (5194 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    517e:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5180:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    5184:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    5188:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    518c:	4258      	negs	r0, r3
    518e:	4158      	adcs	r0, r3
    5190:	4770      	bx	lr
    5192:	bf00      	nop
    5194:	20000134 	.word	0x20000134

00005198 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5198:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    519a:	f100 0308 	add.w	r3, r0, #8
    519e:	4c0c      	ldr	r4, [pc, #48]	; (51d0 <call_handler+0x38>)
    51a0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    51a4:	05da      	lsls	r2, r3, #23
{
    51a6:	4605      	mov	r5, r0
    51a8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    51aa:	d507      	bpl.n	51bc <call_handler+0x24>
    51ac:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    51b0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    51b4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    51b8:	6852      	ldr	r2, [r2, #4]
    51ba:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    51bc:	68a3      	ldr	r3, [r4, #8]
    51be:	b12b      	cbz	r3, 51cc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    51c0:	68e2      	ldr	r2, [r4, #12]
    51c2:	4631      	mov	r1, r6
    51c4:	4628      	mov	r0, r5
    }
}
    51c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    51ca:	4718      	bx	r3
}
    51cc:	bd70      	pop	{r4, r5, r6, pc}
    51ce:	bf00      	nop
    51d0:	20000134 	.word	0x20000134

000051d4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    51d4:	4b19      	ldr	r3, [pc, #100]	; (523c <release_handler+0x68>)
    51d6:	3008      	adds	r0, #8
{
    51d8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    51da:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    51de:	05d1      	lsls	r1, r2, #23
    51e0:	d51d      	bpl.n	521e <release_handler+0x4a>
    51e2:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    51e6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    51ea:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    51ee:	f103 0410 	add.w	r4, r3, #16
    51f2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    51f4:	f834 2b02 	ldrh.w	r2, [r4], #2
    51f8:	f412 7f80 	tst.w	r2, #256	; 0x100
    51fc:	d003      	beq.n	5206 <release_handler+0x32>
    51fe:	f3c2 2243 	ubfx	r2, r2, #9, #4
    5202:	4291      	cmp	r1, r2
    5204:	d00b      	beq.n	521e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5206:	3001      	adds	r0, #1
    5208:	2830      	cmp	r0, #48	; 0x30
    520a:	d1f3      	bne.n	51f4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    520c:	2200      	movs	r2, #0
    520e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5212:	480b      	ldr	r0, [pc, #44]	; (5240 <release_handler+0x6c>)
    5214:	f7ff ff90 	bl	5138 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5218:	4b0a      	ldr	r3, [pc, #40]	; (5244 <release_handler+0x70>)
    521a:	4298      	cmp	r0, r3
    521c:	d100      	bne.n	5220 <release_handler+0x4c>
}
    521e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5220:	4909      	ldr	r1, [pc, #36]	; (5248 <release_handler+0x74>)
    5222:	480a      	ldr	r0, [pc, #40]	; (524c <release_handler+0x78>)
    5224:	4a0a      	ldr	r2, [pc, #40]	; (5250 <release_handler+0x7c>)
    5226:	f44f 7399 	mov.w	r3, #306	; 0x132
    522a:	f004 fa72 	bl	9712 <printk>
}
    522e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5232:	4807      	ldr	r0, [pc, #28]	; (5250 <release_handler+0x7c>)
    5234:	f44f 7199 	mov.w	r1, #306	; 0x132
    5238:	f004 b968 	b.w	950c <assert_post_action>
    523c:	20000134 	.word	0x20000134
    5240:	200001a8 	.word	0x200001a8
    5244:	0bad0000 	.word	0x0bad0000
    5248:	0000b939 	.word	0x0000b939
    524c:	0000a9a4 	.word	0x0000a9a4
    5250:	0000b8d5 	.word	0x0000b8d5

00005254 <pin_handler_trigger_uninit>:
{
    5254:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5256:	4c0a      	ldr	r4, [pc, #40]	; (5280 <pin_handler_trigger_uninit+0x2c>)
    5258:	f100 0508 	add.w	r5, r0, #8
    525c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    5260:	069a      	lsls	r2, r3, #26
    5262:	d506      	bpl.n	5272 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5264:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5266:	4a07      	ldr	r2, [pc, #28]	; (5284 <pin_handler_trigger_uninit+0x30>)
    5268:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    526c:	2100      	movs	r1, #0
    526e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    5272:	f7ff ffaf 	bl	51d4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5276:	2300      	movs	r3, #0
    5278:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    527c:	bd38      	pop	{r3, r4, r5, pc}
    527e:	bf00      	nop
    5280:	20000134 	.word	0x20000134
    5284:	40006000 	.word	0x40006000

00005288 <nrf_gpio_pin_port_decode>:
{
    5288:	b510      	push	{r4, lr}
    528a:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    528c:	6800      	ldr	r0, [r0, #0]
    528e:	f004 ff6f 	bl	a170 <nrf_gpio_pin_present_check>
    5292:	b958      	cbnz	r0, 52ac <nrf_gpio_pin_port_decode+0x24>
    5294:	4912      	ldr	r1, [pc, #72]	; (52e0 <nrf_gpio_pin_port_decode+0x58>)
    5296:	4813      	ldr	r0, [pc, #76]	; (52e4 <nrf_gpio_pin_port_decode+0x5c>)
    5298:	4a13      	ldr	r2, [pc, #76]	; (52e8 <nrf_gpio_pin_port_decode+0x60>)
    529a:	f240 2329 	movw	r3, #553	; 0x229
    529e:	f004 fa38 	bl	9712 <printk>
    52a2:	4811      	ldr	r0, [pc, #68]	; (52e8 <nrf_gpio_pin_port_decode+0x60>)
    52a4:	f240 2129 	movw	r1, #553	; 0x229
    52a8:	f004 f930 	bl	950c <assert_post_action>
    uint32_t pin_number = *p_pin;
    52ac:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    52ae:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52b2:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    52b4:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52b6:	d00d      	beq.n	52d4 <nrf_gpio_pin_port_decode+0x4c>
    52b8:	2b01      	cmp	r3, #1
    52ba:	d00e      	beq.n	52da <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    52bc:	490b      	ldr	r1, [pc, #44]	; (52ec <nrf_gpio_pin_port_decode+0x64>)
    52be:	4809      	ldr	r0, [pc, #36]	; (52e4 <nrf_gpio_pin_port_decode+0x5c>)
    52c0:	4a09      	ldr	r2, [pc, #36]	; (52e8 <nrf_gpio_pin_port_decode+0x60>)
    52c2:	f240 232e 	movw	r3, #558	; 0x22e
    52c6:	f004 fa24 	bl	9712 <printk>
    52ca:	4807      	ldr	r0, [pc, #28]	; (52e8 <nrf_gpio_pin_port_decode+0x60>)
    52cc:	f240 212e 	movw	r1, #558	; 0x22e
    52d0:	f004 f91c 	bl	950c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    52d8:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    52da:	4805      	ldr	r0, [pc, #20]	; (52f0 <nrf_gpio_pin_port_decode+0x68>)
    52dc:	e7fc      	b.n	52d8 <nrf_gpio_pin_port_decode+0x50>
    52de:	bf00      	nop
    52e0:	0000b800 	.word	0x0000b800
    52e4:	0000a9a4 	.word	0x0000a9a4
    52e8:	0000b7cd 	.word	0x0000b7cd
    52ec:	0000b9e0 	.word	0x0000b9e0
    52f0:	50000300 	.word	0x50000300

000052f4 <nrfx_gpiote_input_configure>:
{
    52f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    52f6:	4604      	mov	r4, r0
    52f8:	b085      	sub	sp, #20
    52fa:	4617      	mov	r7, r2
    52fc:	461d      	mov	r5, r3
    if (p_input_config)
    52fe:	b1f1      	cbz	r1, 533e <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    5300:	f7ff ff3c 	bl	517c <pin_is_task_output>
    5304:	b110      	cbz	r0, 530c <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    5306:	484a      	ldr	r0, [pc, #296]	; (5430 <nrfx_gpiote_input_configure+0x13c>)
}
    5308:	b005      	add	sp, #20
    530a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    530c:	460b      	mov	r3, r1
    530e:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5312:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5316:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    531a:	f10d 020f 	add.w	r2, sp, #15
    531e:	f10d 010e 	add.w	r1, sp, #14
    5322:	4620      	mov	r0, r4
    5324:	f004 ff39 	bl	a19a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5328:	4a42      	ldr	r2, [pc, #264]	; (5434 <nrfx_gpiote_input_configure+0x140>)
    532a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    532e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5332:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5336:	f043 0301 	orr.w	r3, r3, #1
    533a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    533e:	b197      	cbz	r7, 5366 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5340:	4b3c      	ldr	r3, [pc, #240]	; (5434 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5342:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5344:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5346:	f104 0008 	add.w	r0, r4, #8
    534a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    534e:	078f      	lsls	r7, r1, #30
    5350:	d50c      	bpl.n	536c <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    5352:	2a00      	cmp	r2, #0
    5354:	d1d7      	bne.n	5306 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5356:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    535a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    535e:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    5362:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    5366:	bbcd      	cbnz	r5, 53dc <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    5368:	4833      	ldr	r0, [pc, #204]	; (5438 <nrfx_gpiote_input_configure+0x144>)
    536a:	e7cd      	b.n	5308 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    536c:	f021 0120 	bic.w	r1, r1, #32
    5370:	04c9      	lsls	r1, r1, #19
    5372:	0cc9      	lsrs	r1, r1, #19
    5374:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    5378:	2a00      	cmp	r2, #0
    537a:	d0ec      	beq.n	5356 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    537c:	2e03      	cmp	r6, #3
    537e:	d8c2      	bhi.n	5306 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5380:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5382:	b92e      	cbnz	r6, 5390 <nrfx_gpiote_input_configure+0x9c>
    5384:	4a2d      	ldr	r2, [pc, #180]	; (543c <nrfx_gpiote_input_configure+0x148>)
    5386:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    538a:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    538e:	e7e2      	b.n	5356 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5390:	00ba      	lsls	r2, r7, #2
    5392:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5396:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    539a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    539e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    53a2:	f02c 0c03 	bic.w	ip, ip, #3
    53a6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    53aa:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    53ae:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    53b2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    53b6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    53ba:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    53be:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    53c2:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    53c6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    53ca:	ea4c 0c0e 	orr.w	ip, ip, lr
    53ce:	f041 0120 	orr.w	r1, r1, #32
    53d2:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    53d6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    53da:	e7bc      	b.n	5356 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    53dc:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    53e0:	4620      	mov	r0, r4
    53e2:	f7ff fef7 	bl	51d4 <release_handler>
    if (!handler)
    53e6:	2e00      	cmp	r6, #0
    53e8:	d0be      	beq.n	5368 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    53ea:	4d12      	ldr	r5, [pc, #72]	; (5434 <nrfx_gpiote_input_configure+0x140>)
    53ec:	682b      	ldr	r3, [r5, #0]
    53ee:	429e      	cmp	r6, r3
    53f0:	d104      	bne.n	53fc <nrfx_gpiote_input_configure+0x108>
    53f2:	686b      	ldr	r3, [r5, #4]
    53f4:	429f      	cmp	r7, r3
    53f6:	d101      	bne.n	53fc <nrfx_gpiote_input_configure+0x108>
    53f8:	2200      	movs	r2, #0
    53fa:	e00a      	b.n	5412 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    53fc:	4810      	ldr	r0, [pc, #64]	; (5440 <nrfx_gpiote_input_configure+0x14c>)
    53fe:	f10d 010f 	add.w	r1, sp, #15
    5402:	f7ff fe75 	bl	50f0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5406:	4b0c      	ldr	r3, [pc, #48]	; (5438 <nrfx_gpiote_input_configure+0x144>)
    5408:	4298      	cmp	r0, r3
    540a:	f47f af7d 	bne.w	5308 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    540e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5412:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5416:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    541a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    541c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    541e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5422:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    5426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    542a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    542e:	e79b      	b.n	5368 <nrfx_gpiote_input_configure+0x74>
    5430:	0bad0004 	.word	0x0bad0004
    5434:	20000134 	.word	0x20000134
    5438:	0bad0000 	.word	0x0bad0000
    543c:	40006000 	.word	0x40006000
    5440:	200001a8 	.word	0x200001a8

00005444 <nrfx_gpiote_output_configure>:
{
    5444:	b5f0      	push	{r4, r5, r6, r7, lr}
    5446:	4604      	mov	r4, r0
    5448:	b085      	sub	sp, #20
    544a:	4615      	mov	r5, r2
    if (p_config)
    544c:	b309      	cbz	r1, 5492 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    544e:	f100 0708 	add.w	r7, r0, #8
    5452:	4e31      	ldr	r6, [pc, #196]	; (5518 <nrfx_gpiote_output_configure+0xd4>)
    5454:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5458:	0798      	lsls	r0, r3, #30
    545a:	d401      	bmi.n	5460 <nrfx_gpiote_output_configure+0x1c>
    545c:	069a      	lsls	r2, r3, #26
    545e:	d458      	bmi.n	5512 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5460:	f013 0f1c 	tst.w	r3, #28
    5464:	d002      	beq.n	546c <nrfx_gpiote_output_configure+0x28>
    5466:	784b      	ldrb	r3, [r1, #1]
    5468:	2b01      	cmp	r3, #1
    546a:	d052      	beq.n	5512 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    546c:	2301      	movs	r3, #1
    546e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    5472:	2300      	movs	r3, #0
    5474:	e9cd 1300 	strd	r1, r3, [sp]
    5478:	1c4a      	adds	r2, r1, #1
    547a:	1c8b      	adds	r3, r1, #2
    547c:	4620      	mov	r0, r4
    547e:	f10d 010f 	add.w	r1, sp, #15
    5482:	f004 fe8a 	bl	a19a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5486:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    548a:	f043 0303 	orr.w	r3, r3, #3
    548e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    5492:	b915      	cbnz	r5, 549a <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    5494:	4821      	ldr	r0, [pc, #132]	; (551c <nrfx_gpiote_output_configure+0xd8>)
}
    5496:	b005      	add	sp, #20
    5498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    549a:	4e1f      	ldr	r6, [pc, #124]	; (5518 <nrfx_gpiote_output_configure+0xd4>)
    549c:	f104 0708 	add.w	r7, r4, #8
    54a0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    54a4:	0783      	lsls	r3, r0, #30
    54a6:	d534      	bpl.n	5512 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    54a8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    54ac:	4661      	mov	r1, ip
    54ae:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    54b0:	f020 0020 	bic.w	r0, r0, #32
    54b4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    54b8:	04c0      	lsls	r0, r0, #19
    54ba:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    54be:	0cc0      	lsrs	r0, r0, #19
    54c0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    54c4:	2300      	movs	r3, #0
    54c6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    54ca:	786a      	ldrb	r2, [r5, #1]
    54cc:	2a00      	cmp	r2, #0
    54ce:	d0e1      	beq.n	5494 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    54d0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    54d4:	78ad      	ldrb	r5, [r5, #2]
    54d6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    54da:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    54de:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    54e2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    54e6:	0223      	lsls	r3, r4, #8
    54e8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    54ec:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    54ee:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    54f2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    54f6:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    54f8:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    54fa:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    54fe:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5502:	432b      	orrs	r3, r5
    5504:	f040 0020 	orr.w	r0, r0, #32
    5508:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    550c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    5510:	e7c0      	b.n	5494 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    5512:	4803      	ldr	r0, [pc, #12]	; (5520 <nrfx_gpiote_output_configure+0xdc>)
    5514:	e7bf      	b.n	5496 <nrfx_gpiote_output_configure+0x52>
    5516:	bf00      	nop
    5518:	20000134 	.word	0x20000134
    551c:	0bad0000 	.word	0x0bad0000
    5520:	0bad0004 	.word	0x0bad0004

00005524 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5524:	4b01      	ldr	r3, [pc, #4]	; (552c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5526:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    552a:	4770      	bx	lr
    552c:	20000134 	.word	0x20000134

00005530 <nrfx_gpiote_channel_get>:
{
    5530:	b538      	push	{r3, r4, r5, lr}
    5532:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    5534:	460d      	mov	r5, r1
    5536:	b959      	cbnz	r1, 5550 <nrfx_gpiote_channel_get+0x20>
    5538:	490b      	ldr	r1, [pc, #44]	; (5568 <nrfx_gpiote_channel_get+0x38>)
    553a:	480c      	ldr	r0, [pc, #48]	; (556c <nrfx_gpiote_channel_get+0x3c>)
    553c:	4a0c      	ldr	r2, [pc, #48]	; (5570 <nrfx_gpiote_channel_get+0x40>)
    553e:	f240 2335 	movw	r3, #565	; 0x235
    5542:	f004 f8e6 	bl	9712 <printk>
    5546:	480a      	ldr	r0, [pc, #40]	; (5570 <nrfx_gpiote_channel_get+0x40>)
    5548:	f240 2135 	movw	r1, #565	; 0x235
    554c:	f003 ffde 	bl	950c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5550:	3408      	adds	r4, #8
    5552:	4b08      	ldr	r3, [pc, #32]	; (5574 <nrfx_gpiote_channel_get+0x44>)
    5554:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    5558:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    555a:	bf43      	ittte	mi
    555c:	0b5b      	lsrmi	r3, r3, #13
    555e:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    5560:	4805      	ldrmi	r0, [pc, #20]	; (5578 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    5562:	4806      	ldrpl	r0, [pc, #24]	; (557c <nrfx_gpiote_channel_get+0x4c>)
}
    5564:	bd38      	pop	{r3, r4, r5, pc}
    5566:	bf00      	nop
    5568:	0000b94d 	.word	0x0000b94d
    556c:	0000a9a4 	.word	0x0000a9a4
    5570:	0000b8d5 	.word	0x0000b8d5
    5574:	20000134 	.word	0x20000134
    5578:	0bad0000 	.word	0x0bad0000
    557c:	0bad0004 	.word	0x0bad0004

00005580 <nrfx_gpiote_init>:
{
    5580:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5582:	4c0e      	ldr	r4, [pc, #56]	; (55bc <nrfx_gpiote_init+0x3c>)
    5584:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5588:	b9b5      	cbnz	r5, 55b8 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    558a:	2260      	movs	r2, #96	; 0x60
    558c:	4629      	mov	r1, r5
    558e:	f104 0010 	add.w	r0, r4, #16
    5592:	f004 fab0 	bl	9af6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5596:	2006      	movs	r0, #6
    5598:	f7fd fcbe 	bl	2f18 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    559c:	4b08      	ldr	r3, [pc, #32]	; (55c0 <nrfx_gpiote_init+0x40>)
    return err_code;
    559e:	4809      	ldr	r0, [pc, #36]	; (55c4 <nrfx_gpiote_init+0x44>)
    55a0:	601d      	str	r5, [r3, #0]
    55a2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    55a4:	4b08      	ldr	r3, [pc, #32]	; (55c8 <nrfx_gpiote_init+0x48>)
    55a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    55aa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    55ae:	2301      	movs	r3, #1
    55b0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    55b4:	6763      	str	r3, [r4, #116]	; 0x74
}
    55b6:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    55b8:	4804      	ldr	r0, [pc, #16]	; (55cc <nrfx_gpiote_init+0x4c>)
    55ba:	e7fc      	b.n	55b6 <nrfx_gpiote_init+0x36>
    55bc:	20000134 	.word	0x20000134
    55c0:	4000617c 	.word	0x4000617c
    55c4:	0bad0000 	.word	0x0bad0000
    55c8:	40006000 	.word	0x40006000
    55cc:	0bad0005 	.word	0x0bad0005

000055d0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    55d0:	4b03      	ldr	r3, [pc, #12]	; (55e0 <nrfx_gpiote_is_init+0x10>)
    55d2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    55d6:	3800      	subs	r0, #0
    55d8:	bf18      	it	ne
    55da:	2001      	movne	r0, #1
    55dc:	4770      	bx	lr
    55de:	bf00      	nop
    55e0:	20000134 	.word	0x20000134

000055e4 <nrfx_gpiote_channel_free>:
{
    55e4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    55e6:	4801      	ldr	r0, [pc, #4]	; (55ec <nrfx_gpiote_channel_free+0x8>)
    55e8:	f7ff bda6 	b.w	5138 <nrfx_flag32_free>
    55ec:	200001a4 	.word	0x200001a4

000055f0 <nrfx_gpiote_channel_alloc>:
{
    55f0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    55f2:	4801      	ldr	r0, [pc, #4]	; (55f8 <nrfx_gpiote_channel_alloc+0x8>)
    55f4:	f7ff bd7c 	b.w	50f0 <nrfx_flag32_alloc>
    55f8:	200001a4 	.word	0x200001a4

000055fc <nrfx_gpiote_trigger_enable>:
{
    55fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    55fe:	4d31      	ldr	r5, [pc, #196]	; (56c4 <nrfx_gpiote_trigger_enable+0xc8>)
    5600:	f100 0708 	add.w	r7, r0, #8
{
    5604:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5606:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    560a:	f013 0f1c 	tst.w	r3, #28
{
    560e:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    5610:	d10b      	bne.n	562a <nrfx_gpiote_trigger_enable+0x2e>
    5612:	492d      	ldr	r1, [pc, #180]	; (56c8 <nrfx_gpiote_trigger_enable+0xcc>)
    5614:	482d      	ldr	r0, [pc, #180]	; (56cc <nrfx_gpiote_trigger_enable+0xd0>)
    5616:	4a2e      	ldr	r2, [pc, #184]	; (56d0 <nrfx_gpiote_trigger_enable+0xd4>)
    5618:	f240 33df 	movw	r3, #991	; 0x3df
    561c:	f004 f879 	bl	9712 <printk>
    5620:	482b      	ldr	r0, [pc, #172]	; (56d0 <nrfx_gpiote_trigger_enable+0xd4>)
    5622:	f240 31df 	movw	r1, #991	; 0x3df
    5626:	f003 ff71 	bl	950c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    562a:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    562e:	0683      	lsls	r3, r0, #26
    5630:	d51f      	bpl.n	5672 <nrfx_gpiote_trigger_enable+0x76>
    5632:	f010 0302 	ands.w	r3, r0, #2
    5636:	d11c      	bne.n	5672 <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5638:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    563a:	4608      	mov	r0, r1
    563c:	f004 fda9 	bl	a192 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    5640:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    5644:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5648:	6003      	str	r3, [r0, #0]
    564a:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    564c:	008b      	lsls	r3, r1, #2
    564e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5652:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5656:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    565a:	f042 0201 	orr.w	r2, r2, #1
    565e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    5662:	b126      	cbz	r6, 566e <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    5664:	4a1b      	ldr	r2, [pc, #108]	; (56d4 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5666:	2301      	movs	r3, #1
    5668:	408b      	lsls	r3, r1
    566a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    566e:	b003      	add	sp, #12
    5670:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    5672:	b95e      	cbnz	r6, 568c <nrfx_gpiote_trigger_enable+0x90>
    5674:	4918      	ldr	r1, [pc, #96]	; (56d8 <nrfx_gpiote_trigger_enable+0xdc>)
    5676:	4815      	ldr	r0, [pc, #84]	; (56cc <nrfx_gpiote_trigger_enable+0xd0>)
    5678:	4a15      	ldr	r2, [pc, #84]	; (56d0 <nrfx_gpiote_trigger_enable+0xd4>)
    567a:	f240 33ee 	movw	r3, #1006	; 0x3ee
    567e:	f004 f848 	bl	9712 <printk>
    5682:	4813      	ldr	r0, [pc, #76]	; (56d0 <nrfx_gpiote_trigger_enable+0xd4>)
    5684:	f240 31ee 	movw	r1, #1006	; 0x3ee
    5688:	f003 ff40 	bl	950c <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    568c:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    5690:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5694:	2b04      	cmp	r3, #4
    5696:	d010      	beq.n	56ba <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5698:	2b05      	cmp	r3, #5
    569a:	d010      	beq.n	56be <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    569c:	a801      	add	r0, sp, #4
    569e:	9401      	str	r4, [sp, #4]
    56a0:	f7ff fdf2 	bl	5288 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    56a4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    56a6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    56aa:	40d9      	lsrs	r1, r3
    56ac:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    56b0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    56b2:	4620      	mov	r0, r4
    56b4:	f004 fdbc 	bl	a230 <nrf_gpio_cfg_sense_set>
}
    56b8:	e7d9      	b.n	566e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    56ba:	2103      	movs	r1, #3
    56bc:	e7f9      	b.n	56b2 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    56be:	2102      	movs	r1, #2
    56c0:	e7f7      	b.n	56b2 <nrfx_gpiote_trigger_enable+0xb6>
    56c2:	bf00      	nop
    56c4:	20000134 	.word	0x20000134
    56c8:	0000b957 	.word	0x0000b957
    56cc:	0000a9a4 	.word	0x0000a9a4
    56d0:	0000b8d5 	.word	0x0000b8d5
    56d4:	40006000 	.word	0x40006000
    56d8:	0000b96c 	.word	0x0000b96c

000056dc <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    56dc:	4b0e      	ldr	r3, [pc, #56]	; (5718 <nrfx_gpiote_trigger_disable+0x3c>)
    56de:	f100 0208 	add.w	r2, r0, #8
    56e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    56e6:	0699      	lsls	r1, r3, #26
    56e8:	d513      	bpl.n	5712 <nrfx_gpiote_trigger_disable+0x36>
    56ea:	079a      	lsls	r2, r3, #30
    56ec:	d411      	bmi.n	5712 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    56ee:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    56f0:	2201      	movs	r2, #1
    56f2:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    56f4:	009b      	lsls	r3, r3, #2
    56f6:	4909      	ldr	r1, [pc, #36]	; (571c <nrfx_gpiote_trigger_disable+0x40>)
    56f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    56fc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5700:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5704:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5708:	f022 0203 	bic.w	r2, r2, #3
    570c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5710:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5712:	2100      	movs	r1, #0
    5714:	f004 bd8c 	b.w	a230 <nrf_gpio_cfg_sense_set>
    5718:	20000134 	.word	0x20000134
    571c:	40006000 	.word	0x40006000

00005720 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5720:	4b0e      	ldr	r3, [pc, #56]	; (575c <nrfx_gpiote_pin_uninit+0x3c>)
    5722:	f100 0208 	add.w	r2, r0, #8
{
    5726:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5728:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    572c:	07db      	lsls	r3, r3, #31
{
    572e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5730:	d511      	bpl.n	5756 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    5732:	f7ff ffd3 	bl	56dc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5736:	4620      	mov	r0, r4
    5738:	f7ff fd8c 	bl	5254 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    573c:	a801      	add	r0, sp, #4
    573e:	9401      	str	r4, [sp, #4]
    5740:	f7ff fda2 	bl	5288 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5744:	9b01      	ldr	r3, [sp, #4]
    5746:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    574a:	2202      	movs	r2, #2
    574c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    5750:	4803      	ldr	r0, [pc, #12]	; (5760 <nrfx_gpiote_pin_uninit+0x40>)
}
    5752:	b002      	add	sp, #8
    5754:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5756:	4803      	ldr	r0, [pc, #12]	; (5764 <nrfx_gpiote_pin_uninit+0x44>)
    5758:	e7fb      	b.n	5752 <nrfx_gpiote_pin_uninit+0x32>
    575a:	bf00      	nop
    575c:	20000134 	.word	0x20000134
    5760:	0bad0000 	.word	0x0bad0000
    5764:	0bad0004 	.word	0x0bad0004

00005768 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    576c:	4b65      	ldr	r3, [pc, #404]	; (5904 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    576e:	4866      	ldr	r0, [pc, #408]	; (5908 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5770:	4966      	ldr	r1, [pc, #408]	; (590c <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    5772:	2500      	movs	r5, #0
{
    5774:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5776:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5778:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    577a:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    577c:	b136      	cbz	r6, 578c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    577e:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    5782:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5784:	bf1e      	ittt	ne
    5786:	601c      	strne	r4, [r3, #0]
    5788:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    578a:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    578c:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    578e:	428b      	cmp	r3, r1
        mask <<= 1;
    5790:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5794:	d1f1      	bne.n	577a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5796:	4f5e      	ldr	r7, [pc, #376]	; (5910 <nrfx_gpiote_irq_handler+0x1a8>)
    5798:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    579a:	b37b      	cbz	r3, 57fc <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    579c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    57a0:	4e5c      	ldr	r6, [pc, #368]	; (5914 <nrfx_gpiote_irq_handler+0x1ac>)
    57a2:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    57a6:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    57a8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    57ac:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    57b0:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    57b2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    57b6:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    57b8:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    57bc:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    57c0:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    57c4:	f8d9 3000 	ldr.w	r3, [r9]
    57c8:	b9f3      	cbnz	r3, 5808 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    57ca:	f108 0820 	add.w	r8, r8, #32
    57ce:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    57d2:	f109 0904 	add.w	r9, r9, #4
    57d6:	d1f5      	bne.n	57c4 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    57d8:	603b      	str	r3, [r7, #0]
    57da:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    57dc:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    57de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    57e2:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    57e6:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    57e8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    57ec:	9b01      	ldr	r3, [sp, #4]
    57ee:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    57f2:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    57f4:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    57f8:	4313      	orrs	r3, r2
    57fa:	d1dd      	bne.n	57b8 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    57fc:	2401      	movs	r4, #1
    while (mask)
    57fe:	2d00      	cmp	r5, #0
    5800:	d168      	bne.n	58d4 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5802:	b009      	add	sp, #36	; 0x24
    5804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    5808:	fa93 f3a3 	rbit	r3, r3
    580c:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    5810:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5814:	f106 0208 	add.w	r2, r6, #8
    5818:	4b3f      	ldr	r3, [pc, #252]	; (5918 <nrfx_gpiote_irq_handler+0x1b0>)
    581a:	9605      	str	r6, [sp, #20]
    581c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    5820:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5824:	08f4      	lsrs	r4, r6, #3
    5826:	9302      	str	r3, [sp, #8]
    5828:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    582a:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    582c:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5830:	fa0b fc00 	lsl.w	ip, fp, r0
    5834:	5d18      	ldrb	r0, [r3, r4]
    5836:	ea20 000c 	bic.w	r0, r0, ip
    583a:	5518      	strb	r0, [r3, r4]
    583c:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    583e:	a805      	add	r0, sp, #20
    5840:	9103      	str	r1, [sp, #12]
    5842:	f7ff fd21 	bl	5288 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5846:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    5848:	9903      	ldr	r1, [sp, #12]
    584a:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    584e:	074b      	lsls	r3, r1, #29
    5850:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5854:	f3c4 4401 	ubfx	r4, r4, #16, #2
    5858:	d523      	bpl.n	58a2 <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    585a:	4651      	mov	r1, sl
    585c:	4630      	mov	r0, r6
    585e:	f7ff fc9b 	bl	5198 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5862:	a805      	add	r0, sp, #20
    5864:	9605      	str	r6, [sp, #20]
    5866:	f7ff fd0f 	bl	5288 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    586a:	9a05      	ldr	r2, [sp, #20]
    586c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    5870:	b2e4      	uxtb	r4, r4
    5872:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5876:	f3c2 4201 	ubfx	r2, r2, #16, #2
    587a:	4294      	cmp	r4, r2
    587c:	d107      	bne.n	588e <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    587e:	2100      	movs	r1, #0
    5880:	4630      	mov	r0, r6
    5882:	f004 fcd5 	bl	a230 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5886:	4621      	mov	r1, r4
    5888:	4630      	mov	r0, r6
    588a:	f004 fcd1 	bl	a230 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    588e:	a805      	add	r0, sp, #20
    5890:	9605      	str	r6, [sp, #20]
    5892:	f7ff fcf9 	bl	5288 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    5896:	9b05      	ldr	r3, [sp, #20]
    5898:	fa0b f303 	lsl.w	r3, fp, r3
    589c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    58a0:	e790      	b.n	57c4 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    58a2:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    58a4:	bf0c      	ite	eq
    58a6:	2103      	moveq	r1, #3
    58a8:	2102      	movne	r1, #2
    58aa:	4630      	mov	r0, r6
    58ac:	f004 fcc0 	bl	a230 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    58b0:	9b02      	ldr	r3, [sp, #8]
    58b2:	2b03      	cmp	r3, #3
    58b4:	d004      	beq.n	58c0 <nrfx_gpiote_irq_handler+0x158>
    58b6:	2c02      	cmp	r4, #2
    58b8:	d107      	bne.n	58ca <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    58ba:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    58be:	d1e6      	bne.n	588e <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    58c0:	4651      	mov	r1, sl
    58c2:	4630      	mov	r0, r6
    58c4:	f7ff fc68 	bl	5198 <call_handler>
    58c8:	e7e1      	b.n	588e <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    58ca:	2c03      	cmp	r4, #3
    58cc:	d1df      	bne.n	588e <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    58ce:	f1ba 0f02 	cmp.w	sl, #2
    58d2:	e7f4      	b.n	58be <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    58d4:	fa95 f3a5 	rbit	r3, r5
    58d8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    58dc:	fa04 f203 	lsl.w	r2, r4, r3
    58e0:	009b      	lsls	r3, r3, #2
    58e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    58e6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    58ea:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    58ee:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    58f2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    58f6:	f3c0 2005 	ubfx	r0, r0, #8, #6
    58fa:	f3c1 4101 	ubfx	r1, r1, #16, #2
    58fe:	f7ff fc4b 	bl	5198 <call_handler>
    5902:	e77c      	b.n	57fe <nrfx_gpiote_irq_handler+0x96>
    5904:	40006100 	.word	0x40006100
    5908:	40006000 	.word	0x40006000
    590c:	40006120 	.word	0x40006120
    5910:	4000617c 	.word	0x4000617c
    5914:	50000300 	.word	0x50000300
    5918:	20000134 	.word	0x20000134

0000591c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    591c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    591e:	4801      	ldr	r0, [pc, #4]	; (5924 <nrfx_ppi_channel_alloc+0x8>)
    5920:	f7ff bbe6 	b.w	50f0 <nrfx_flag32_alloc>
    5924:	200001b0 	.word	0x200001b0

00005928 <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    5928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    592c:	4604      	mov	r4, r0
    592e:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
    5930:	4615      	mov	r5, r2
    5932:	b95a      	cbnz	r2, 594c <nrf_pwm_sequence_set+0x24>
    5934:	4932      	ldr	r1, [pc, #200]	; (5a00 <nrf_pwm_sequence_set+0xd8>)
    5936:	4833      	ldr	r0, [pc, #204]	; (5a04 <nrf_pwm_sequence_set+0xdc>)
    5938:	4a33      	ldr	r2, [pc, #204]	; (5a08 <nrf_pwm_sequence_set+0xe0>)
    593a:	f240 23a7 	movw	r3, #679	; 0x2a7
    593e:	f003 fee8 	bl	9712 <printk>
    5942:	4831      	ldr	r0, [pc, #196]	; (5a08 <nrf_pwm_sequence_set+0xe0>)
    5944:	f240 21a7 	movw	r1, #679	; 0x2a7
    5948:	f003 fde0 	bl	950c <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    594c:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    594e:	b95f      	cbnz	r7, 5968 <nrf_pwm_sequence_set+0x40>
    5950:	492e      	ldr	r1, [pc, #184]	; (5a0c <nrf_pwm_sequence_set+0xe4>)
    5952:	482c      	ldr	r0, [pc, #176]	; (5a04 <nrf_pwm_sequence_set+0xdc>)
    5954:	4a2c      	ldr	r2, [pc, #176]	; (5a08 <nrf_pwm_sequence_set+0xe0>)
    5956:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    595a:	f003 feda 	bl	9712 <printk>
    595e:	482a      	ldr	r0, [pc, #168]	; (5a08 <nrf_pwm_sequence_set+0xe0>)
    5960:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    5964:	f003 fdd2 	bl	950c <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    5968:	eb04 1846 	add.w	r8, r4, r6, lsl #5
    596c:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    5970:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
    5972:	2f00      	cmp	r7, #0
    5974:	d138      	bne.n	59e8 <nrf_pwm_sequence_set+0xc0>
    5976:	4926      	ldr	r1, [pc, #152]	; (5a10 <nrf_pwm_sequence_set+0xe8>)
    5978:	4a23      	ldr	r2, [pc, #140]	; (5a08 <nrf_pwm_sequence_set+0xe0>)
    597a:	4822      	ldr	r0, [pc, #136]	; (5a04 <nrf_pwm_sequence_set+0xdc>)
    597c:	f240 23bd 	movw	r3, #701	; 0x2bd
    5980:	f003 fec7 	bl	9712 <printk>
    5984:	f240 21bd 	movw	r1, #701	; 0x2bd
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    5988:	481f      	ldr	r0, [pc, #124]	; (5a08 <nrf_pwm_sequence_set+0xe0>)
    598a:	f003 fdbf 	bl	950c <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
    598e:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    5992:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    5994:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    5998:	d30b      	bcc.n	59b2 <nrf_pwm_sequence_set+0x8a>
    599a:	491e      	ldr	r1, [pc, #120]	; (5a14 <nrf_pwm_sequence_set+0xec>)
    599c:	4819      	ldr	r0, [pc, #100]	; (5a04 <nrf_pwm_sequence_set+0xdc>)
    599e:	4a1a      	ldr	r2, [pc, #104]	; (5a08 <nrf_pwm_sequence_set+0xe0>)
    59a0:	f240 23c7 	movw	r3, #711	; 0x2c7
    59a4:	f003 feb5 	bl	9712 <printk>
    59a8:	4817      	ldr	r0, [pc, #92]	; (5a08 <nrf_pwm_sequence_set+0xe0>)
    59aa:	f240 21c7 	movw	r1, #711	; 0x2c7
    59ae:	f003 fdad 	bl	950c <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    59b2:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    59b4:	ea4f 1846 	mov.w	r8, r6, lsl #5
    59b8:	eb04 1646 	add.w	r6, r4, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    59bc:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    59c0:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    59c4:	d30b      	bcc.n	59de <nrf_pwm_sequence_set+0xb6>
    59c6:	4914      	ldr	r1, [pc, #80]	; (5a18 <nrf_pwm_sequence_set+0xf0>)
    59c8:	480e      	ldr	r0, [pc, #56]	; (5a04 <nrf_pwm_sequence_set+0xdc>)
    59ca:	4a0f      	ldr	r2, [pc, #60]	; (5a08 <nrf_pwm_sequence_set+0xe0>)
    59cc:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    59d0:	f003 fe9f 	bl	9712 <printk>
    59d4:	480c      	ldr	r0, [pc, #48]	; (5a08 <nrf_pwm_sequence_set+0xe0>)
    59d6:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    59da:	f003 fd97 	bl	950c <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    59de:	4444      	add	r4, r8
    59e0:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
    59e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    59e8:	043b      	lsls	r3, r7, #16
    59ea:	d5d0      	bpl.n	598e <nrf_pwm_sequence_set+0x66>
    59ec:	490b      	ldr	r1, [pc, #44]	; (5a1c <nrf_pwm_sequence_set+0xf4>)
    59ee:	4a06      	ldr	r2, [pc, #24]	; (5a08 <nrf_pwm_sequence_set+0xe0>)
    59f0:	4804      	ldr	r0, [pc, #16]	; (5a04 <nrf_pwm_sequence_set+0xdc>)
    59f2:	f240 23be 	movw	r3, #702	; 0x2be
    59f6:	f003 fe8c 	bl	9712 <printk>
    59fa:	f240 21be 	movw	r1, #702	; 0x2be
    59fe:	e7c3      	b.n	5988 <nrf_pwm_sequence_set+0x60>
    5a00:	0000b9a9 	.word	0x0000b9a9
    5a04:	0000a9a4 	.word	0x0000a9a4
    5a08:	0000b977 	.word	0x0000b977
    5a0c:	0000b9be 	.word	0x0000b9be
    5a10:	0000b9d6 	.word	0x0000b9d6
    5a14:	0000ba00 	.word	0x0000ba00
    5a18:	0000ba21 	.word	0x0000ba21
    5a1c:	0000b9e2 	.word	0x0000b9e2

00005a20 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5a20:	6802      	ldr	r2, [r0, #0]
    switch (port)
    5a22:	0953      	lsrs	r3, r2, #5
{
    5a24:	b510      	push	{r4, lr}
    5a26:	4604      	mov	r4, r0
    switch (port)
    5a28:	d02c      	beq.n	5a84 <nrf_gpio_pin_port_decode+0x64>
    5a2a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    5a2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5a30:	bf18      	it	ne
    5a32:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    5a34:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5a38:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5a3a:	07db      	lsls	r3, r3, #31
    5a3c:	d40b      	bmi.n	5a56 <nrf_gpio_pin_port_decode+0x36>
    5a3e:	4914      	ldr	r1, [pc, #80]	; (5a90 <nrf_gpio_pin_port_decode+0x70>)
    5a40:	4814      	ldr	r0, [pc, #80]	; (5a94 <nrf_gpio_pin_port_decode+0x74>)
    5a42:	4a15      	ldr	r2, [pc, #84]	; (5a98 <nrf_gpio_pin_port_decode+0x78>)
    5a44:	f240 2329 	movw	r3, #553	; 0x229
    5a48:	f003 fe63 	bl	9712 <printk>
    5a4c:	4812      	ldr	r0, [pc, #72]	; (5a98 <nrf_gpio_pin_port_decode+0x78>)
    5a4e:	f240 2129 	movw	r1, #553	; 0x229
    5a52:	f003 fd5b 	bl	950c <assert_post_action>
    uint32_t pin_number = *p_pin;
    5a56:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    5a58:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5a5c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    5a5e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5a60:	d00d      	beq.n	5a7e <nrf_gpio_pin_port_decode+0x5e>
    5a62:	2b01      	cmp	r3, #1
    5a64:	d011      	beq.n	5a8a <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    5a66:	490d      	ldr	r1, [pc, #52]	; (5a9c <nrf_gpio_pin_port_decode+0x7c>)
    5a68:	480a      	ldr	r0, [pc, #40]	; (5a94 <nrf_gpio_pin_port_decode+0x74>)
    5a6a:	4a0b      	ldr	r2, [pc, #44]	; (5a98 <nrf_gpio_pin_port_decode+0x78>)
    5a6c:	f240 232e 	movw	r3, #558	; 0x22e
    5a70:	f003 fe4f 	bl	9712 <printk>
    5a74:	4808      	ldr	r0, [pc, #32]	; (5a98 <nrf_gpio_pin_port_decode+0x78>)
    5a76:	f240 212e 	movw	r1, #558	; 0x22e
    5a7a:	f003 fd47 	bl	950c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5a7e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    5a82:	bd10      	pop	{r4, pc}
    switch (port)
    5a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a88:	e7d4      	b.n	5a34 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    5a8a:	4805      	ldr	r0, [pc, #20]	; (5aa0 <nrf_gpio_pin_port_decode+0x80>)
    5a8c:	e7f9      	b.n	5a82 <nrf_gpio_pin_port_decode+0x62>
    5a8e:	bf00      	nop
    5a90:	0000b800 	.word	0x0000b800
    5a94:	0000a9a4 	.word	0x0000a9a4
    5a98:	0000b7cd 	.word	0x0000b7cd
    5a9c:	0000b9e0 	.word	0x0000b9e0
    5aa0:	50000300 	.word	0x50000300

00005aa4 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    5aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5aa8:	4606      	mov	r6, r0
    5aaa:	b087      	sub	sp, #28
    5aac:	4691      	mov	r9, r2
    5aae:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    5ab0:	460c      	mov	r4, r1
    5ab2:	b949      	cbnz	r1, 5ac8 <nrfx_pwm_init+0x24>
    5ab4:	4959      	ldr	r1, [pc, #356]	; (5c1c <nrfx_pwm_init+0x178>)
    5ab6:	485a      	ldr	r0, [pc, #360]	; (5c20 <nrfx_pwm_init+0x17c>)
    5ab8:	4a5a      	ldr	r2, [pc, #360]	; (5c24 <nrfx_pwm_init+0x180>)
    5aba:	238c      	movs	r3, #140	; 0x8c
    5abc:	f003 fe29 	bl	9712 <printk>
    5ac0:	4858      	ldr	r0, [pc, #352]	; (5c24 <nrfx_pwm_init+0x180>)
    5ac2:	218c      	movs	r1, #140	; 0x8c
    5ac4:	f003 fd22 	bl	950c <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5ac8:	7937      	ldrb	r7, [r6, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    5aca:	4d57      	ldr	r5, [pc, #348]	; (5c28 <nrfx_pwm_init+0x184>)
    5acc:	210c      	movs	r1, #12
    5ace:	4379      	muls	r1, r7
    5ad0:	186b      	adds	r3, r5, r1
    5ad2:	7a1a      	ldrb	r2, [r3, #8]
    5ad4:	2a00      	cmp	r2, #0
    5ad6:	f040 809f 	bne.w	5c18 <nrfx_pwm_init+0x174>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5ada:	7b22      	ldrb	r2, [r4, #12]
    p_cb->handler = handler;
    5adc:	f845 9001 	str.w	r9, [r5, r1]
    p_cb->p_context = p_context;
    5ae0:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5ae4:	729a      	strb	r2, [r3, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    5ae6:	2a00      	cmp	r2, #0
    5ae8:	d04d      	beq.n	5b86 <nrfx_pwm_init+0xe2>
    5aea:	7b63      	ldrb	r3, [r4, #13]
    5aec:	2b00      	cmp	r3, #0
    5aee:	d04a      	beq.n	5b86 <nrfx_pwm_init+0xe2>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    5af0:	f8d6 8000 	ldr.w	r8, [r6]
    nrf_pwm_configure(p_instance->p_registers,
    5af4:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    5af8:	2301      	movs	r3, #1
    5afa:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    5afe:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    5b02:	f894 b005 	ldrb.w	fp, [r4, #5]
    5b06:	f894 a006 	ldrb.w	sl, [r4, #6]
    5b0a:	2b00      	cmp	r3, #0
    5b0c:	da0b      	bge.n	5b26 <nrfx_pwm_init+0x82>
    5b0e:	4947      	ldr	r1, [pc, #284]	; (5c2c <nrfx_pwm_init+0x188>)
    5b10:	4843      	ldr	r0, [pc, #268]	; (5c20 <nrfx_pwm_init+0x17c>)
    5b12:	4a47      	ldr	r2, [pc, #284]	; (5c30 <nrfx_pwm_init+0x18c>)
    5b14:	f44f 7327 	mov.w	r3, #668	; 0x29c
    5b18:	f003 fdfb 	bl	9712 <printk>
    5b1c:	4844      	ldr	r0, [pc, #272]	; (5c30 <nrfx_pwm_init+0x18c>)
    5b1e:	f44f 7127 	mov.w	r1, #668	; 0x29c
    5b22:	f003 fcf3 	bl	950c <assert_post_action>
    p_reg->PRESCALER  = base_clock;
    5b26:	f8c8 b50c 	str.w	fp, [r8, #1292]	; 0x50c
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
    5b2a:	6830      	ldr	r0, [r6, #0]
    p_reg->MODE       = mode;
    5b2c:	f8c8 a504 	str.w	sl, [r8, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    5b30:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    5b34:	8963      	ldrh	r3, [r4, #10]
    5b36:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    5b3a:	2300      	movs	r3, #0
    5b3c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    5b40:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b44:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    5b48:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    5b4c:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    5b50:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    5b54:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    5b58:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    5b5c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    5b60:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    5b64:	230c      	movs	r3, #12
    5b66:	437b      	muls	r3, r7
    5b68:	58eb      	ldr	r3, [r5, r3]
    5b6a:	b11b      	cbz	r3, 5b74 <nrfx_pwm_init+0xd0>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    5b6c:	f340 3007 	sbfx	r0, r0, #12, #8
    5b70:	f7fd f9d2 	bl	2f18 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5b74:	230c      	movs	r3, #12
    5b76:	fb03 5507 	mla	r5, r3, r7, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    5b7a:	482e      	ldr	r0, [pc, #184]	; (5c34 <nrfx_pwm_init+0x190>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5b7c:	2301      	movs	r3, #1
    5b7e:	722b      	strb	r3, [r5, #8]
}
    5b80:	b007      	add	sp, #28
    5b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b86:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    5b8a:	f10d 0808 	add.w	r8, sp, #8
    5b8e:	f104 0a03 	add.w	sl, r4, #3
        uint8_t output_pin = p_config->output_pins[i];
    5b92:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    5b96:	2aff      	cmp	r2, #255	; 0xff
    5b98:	d039      	beq.n	5c0e <nrfx_pwm_init+0x16a>
            if (!p_config->skip_gpio_cfg)
    5b9a:	7b21      	ldrb	r1, [r4, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    5b9c:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
    5ba0:	f8c8 b000 	str.w	fp, [r8]
            if (!p_config->skip_gpio_cfg)
    5ba4:	b9b1      	cbnz	r1, 5bd4 <nrfx_pwm_init+0x130>
    if (value == 0)
    5ba6:	0613      	lsls	r3, r2, #24
    5ba8:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5bac:	a801      	add	r0, sp, #4
    if (value == 0)
    5bae:	d426      	bmi.n	5bfe <nrfx_pwm_init+0x15a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5bb0:	f7ff ff36 	bl	5a20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5bb4:	9901      	ldr	r1, [sp, #4]
    5bb6:	2201      	movs	r2, #1
    5bb8:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    5bba:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5bbe:	a801      	add	r0, sp, #4
    5bc0:	f8cd b004 	str.w	fp, [sp, #4]
    5bc4:	f7ff ff2c 	bl	5a20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5bc8:	9b01      	ldr	r3, [sp, #4]
    5bca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5bce:	2203      	movs	r2, #3
    5bd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    5bd4:	45d1      	cmp	r9, sl
    5bd6:	f108 0804 	add.w	r8, r8, #4
    5bda:	d1da      	bne.n	5b92 <nrfx_pwm_init+0xee>
    if (!p_config->skip_psel_cfg)
    5bdc:	7b63      	ldrb	r3, [r4, #13]
    5bde:	2b00      	cmp	r3, #0
    5be0:	d186      	bne.n	5af0 <nrfx_pwm_init+0x4c>
    5be2:	6833      	ldr	r3, [r6, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    5be4:	9a02      	ldr	r2, [sp, #8]
    5be6:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    5bea:	9a03      	ldr	r2, [sp, #12]
    5bec:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    5bf0:	9a04      	ldr	r2, [sp, #16]
    5bf2:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    5bf6:	9a05      	ldr	r2, [sp, #20]
    5bf8:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    5bfc:	e778      	b.n	5af0 <nrfx_pwm_init+0x4c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5bfe:	f7ff ff0f 	bl	5a20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5c02:	9901      	ldr	r1, [sp, #4]
    5c04:	2201      	movs	r2, #1
    5c06:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    5c08:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    5c0c:	e7d7      	b.n	5bbe <nrfx_pwm_init+0x11a>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    5c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c12:	f8c8 3000 	str.w	r3, [r8]
    5c16:	e7dd      	b.n	5bd4 <nrfx_pwm_init+0x130>
        return err_code;
    5c18:	4807      	ldr	r0, [pc, #28]	; (5c38 <nrfx_pwm_init+0x194>)
    5c1a:	e7b1      	b.n	5b80 <nrfx_pwm_init+0xdc>
    5c1c:	0000ba7f 	.word	0x0000ba7f
    5c20:	0000a9a4 	.word	0x0000a9a4
    5c24:	0000ba44 	.word	0x0000ba44
    5c28:	20000e6c 	.word	0x20000e6c
    5c2c:	0000ba88 	.word	0x0000ba88
    5c30:	0000b977 	.word	0x0000b977
    5c34:	0bad0000 	.word	0x0bad0000
    5c38:	0bad0005 	.word	0x0bad0005

00005c3c <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    5c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c40:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5c42:	7903      	ldrb	r3, [r0, #4]
{
    5c44:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5c46:	4a31      	ldr	r2, [pc, #196]	; (5d0c <nrfx_pwm_simple_playback+0xd0>)
{
    5c48:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5c4a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    5c4e:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    5c52:	210c      	movs	r1, #12
    5c54:	fb01 2303 	mla	r3, r1, r3, r2
{
    5c58:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    5c5a:	7a1b      	ldrb	r3, [r3, #8]
    5c5c:	b95b      	cbnz	r3, 5c76 <nrfx_pwm_simple_playback+0x3a>
    5c5e:	492c      	ldr	r1, [pc, #176]	; (5d10 <nrfx_pwm_simple_playback+0xd4>)
    5c60:	482c      	ldr	r0, [pc, #176]	; (5d14 <nrfx_pwm_simple_playback+0xd8>)
    5c62:	4a2d      	ldr	r2, [pc, #180]	; (5d18 <nrfx_pwm_simple_playback+0xdc>)
    5c64:	f44f 7396 	mov.w	r3, #300	; 0x12c
    5c68:	f003 fd53 	bl	9712 <printk>
    5c6c:	482a      	ldr	r0, [pc, #168]	; (5d18 <nrfx_pwm_simple_playback+0xdc>)
    5c6e:	f44f 7196 	mov.w	r1, #300	; 0x12c
    5c72:	f003 fc4b 	bl	950c <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
    5c76:	b95c      	cbnz	r4, 5c90 <nrfx_pwm_simple_playback+0x54>
    5c78:	4928      	ldr	r1, [pc, #160]	; (5d1c <nrfx_pwm_simple_playback+0xe0>)
    5c7a:	4826      	ldr	r0, [pc, #152]	; (5d14 <nrfx_pwm_simple_playback+0xd8>)
    5c7c:	4a26      	ldr	r2, [pc, #152]	; (5d18 <nrfx_pwm_simple_playback+0xdc>)
    5c7e:	f240 132d 	movw	r3, #301	; 0x12d
    5c82:	f003 fd46 	bl	9712 <printk>
    5c86:	4824      	ldr	r0, [pc, #144]	; (5d18 <nrfx_pwm_simple_playback+0xdc>)
    5c88:	f240 112d 	movw	r1, #301	; 0x12d
    5c8c:	f003 fc3e 	bl	950c <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    5c90:	6833      	ldr	r3, [r6, #0]
    5c92:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    5c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5c9a:	d00b      	beq.n	5cb4 <nrfx_pwm_simple_playback+0x78>
    5c9c:	4920      	ldr	r1, [pc, #128]	; (5d20 <nrfx_pwm_simple_playback+0xe4>)
    5c9e:	481d      	ldr	r0, [pc, #116]	; (5d14 <nrfx_pwm_simple_playback+0xd8>)
    5ca0:	4a1d      	ldr	r2, [pc, #116]	; (5d18 <nrfx_pwm_simple_playback+0xdc>)
    5ca2:	f44f 7397 	mov.w	r3, #302	; 0x12e
    5ca6:	f003 fd34 	bl	9712 <printk>
    5caa:	481b      	ldr	r0, [pc, #108]	; (5d18 <nrfx_pwm_simple_playback+0xdc>)
    5cac:	f44f 7197 	mov.w	r1, #302	; 0x12e
    5cb0:	f003 fc2c 	bl	950c <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    5cb4:	6828      	ldr	r0, [r5, #0]
    5cb6:	4632      	mov	r2, r6
    5cb8:	2100      	movs	r1, #0
    5cba:	f7ff fe35 	bl	5928 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    5cbe:	6828      	ldr	r0, [r5, #0]
    5cc0:	4632      	mov	r2, r6
    5cc2:	2101      	movs	r1, #1
    5cc4:	f7ff fe30 	bl	5928 <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    5cc8:	6828      	ldr	r0, [r5, #0]
    5cca:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    5cce:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    5cd2:	f018 0f01 	tst.w	r8, #1
    5cd6:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
    5cda:	d114      	bne.n	5d06 <nrfx_pwm_simple_playback+0xca>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    5cdc:	f018 0202 	ands.w	r2, r8, #2
    5ce0:	d003      	beq.n	5cea <nrfx_pwm_simple_playback+0xae>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    5ce2:	2b00      	cmp	r3, #0
    5ce4:	bf14      	ite	ne
    5ce6:	2208      	movne	r2, #8
    5ce8:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    5cea:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    5cec:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    5cf0:	4639      	mov	r1, r7
    5cf2:	fa5f f288 	uxtb.w	r2, r8
    5cf6:	bf18      	it	ne
    5cf8:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    5cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
    5cfe:	bf08      	it	eq
    5d00:	2308      	moveq	r3, #8
    5d02:	f004 baa4 	b.w	a24e <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    5d06:	2210      	movs	r2, #16
    5d08:	e7ef      	b.n	5cea <nrfx_pwm_simple_playback+0xae>
    5d0a:	bf00      	nop
    5d0c:	20000e6c 	.word	0x20000e6c
    5d10:	0000baa9 	.word	0x0000baa9
    5d14:	0000a9a4 	.word	0x0000a9a4
    5d18:	0000ba44 	.word	0x0000ba44
    5d1c:	0000bad5 	.word	0x0000bad5
    5d20:	0000bae8 	.word	0x0000bae8

00005d24 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    5d24:	b570      	push	{r4, r5, r6, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    5d26:	4e12      	ldr	r6, [pc, #72]	; (5d70 <nrfx_pwm_is_stopped+0x4c>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5d28:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    5d2a:	220c      	movs	r2, #12
    5d2c:	fb02 6204 	mla	r2, r2, r4, r6
{
    5d30:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    5d32:	7a12      	ldrb	r2, [r2, #8]
    5d34:	b95a      	cbnz	r2, 5d4e <nrfx_pwm_is_stopped+0x2a>
    5d36:	490f      	ldr	r1, [pc, #60]	; (5d74 <nrfx_pwm_is_stopped+0x50>)
    5d38:	480f      	ldr	r0, [pc, #60]	; (5d78 <nrfx_pwm_is_stopped+0x54>)
    5d3a:	4a10      	ldr	r2, [pc, #64]	; (5d7c <nrfx_pwm_is_stopped+0x58>)
    5d3c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    5d40:	f003 fce7 	bl	9712 <printk>
    5d44:	480d      	ldr	r0, [pc, #52]	; (5d7c <nrfx_pwm_is_stopped+0x58>)
    5d46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    5d4a:	f003 fbdf 	bl	950c <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    5d4e:	230c      	movs	r3, #12
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    5d50:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    5d52:	fb03 6404 	mla	r4, r3, r4, r6
    5d56:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d58:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    5d5c:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    5d5e:	b91a      	cbnz	r2, 5d68 <nrfx_pwm_is_stopped+0x44>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    5d60:	1e98      	subs	r0, r3, #2
    5d62:	bf18      	it	ne
    5d64:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    5d66:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5d68:	2001      	movs	r0, #1
    5d6a:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    5d6c:	e7fb      	b.n	5d66 <nrfx_pwm_is_stopped+0x42>
    5d6e:	bf00      	nop
    5d70:	20000e6c 	.word	0x20000e6c
    5d74:	0000baa9 	.word	0x0000baa9
    5d78:	0000a9a4 	.word	0x0000a9a4
    5d7c:	0000ba44 	.word	0x0000ba44

00005d80 <nrfx_pwm_stop>:
{
    5d80:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    5d82:	4a14      	ldr	r2, [pc, #80]	; (5dd4 <nrfx_pwm_stop+0x54>)
    5d84:	7903      	ldrb	r3, [r0, #4]
{
    5d86:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    5d88:	210c      	movs	r1, #12
    5d8a:	fb01 2303 	mla	r3, r1, r3, r2
{
    5d8e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    5d90:	7a1b      	ldrb	r3, [r3, #8]
    5d92:	b95b      	cbnz	r3, 5dac <nrfx_pwm_stop+0x2c>
    5d94:	4910      	ldr	r1, [pc, #64]	; (5dd8 <nrfx_pwm_stop+0x58>)
    5d96:	4811      	ldr	r0, [pc, #68]	; (5ddc <nrfx_pwm_stop+0x5c>)
    5d98:	4a11      	ldr	r2, [pc, #68]	; (5de0 <nrfx_pwm_stop+0x60>)
    5d9a:	f240 1385 	movw	r3, #389	; 0x185
    5d9e:	f003 fcb8 	bl	9712 <printk>
    5da2:	480f      	ldr	r0, [pc, #60]	; (5de0 <nrfx_pwm_stop+0x60>)
    5da4:	f240 1185 	movw	r1, #389	; 0x185
    5da8:	f003 fbb0 	bl	950c <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    5dac:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    5dae:	2200      	movs	r2, #0
    5db0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5db4:	2201      	movs	r2, #1
    5db6:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    5db8:	4620      	mov	r0, r4
    5dba:	f7ff ffb3 	bl	5d24 <nrfx_pwm_is_stopped>
    5dbe:	b938      	cbnz	r0, 5dd0 <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
    5dc0:	4620      	mov	r0, r4
    5dc2:	f7ff ffaf 	bl	5d24 <nrfx_pwm_is_stopped>
    5dc6:	b918      	cbnz	r0, 5dd0 <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
    5dc8:	2d00      	cmp	r5, #0
    5dca:	d1f9      	bne.n	5dc0 <nrfx_pwm_stop+0x40>
}
    5dcc:	4628      	mov	r0, r5
    5dce:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    5dd0:	2501      	movs	r5, #1
    5dd2:	e7fb      	b.n	5dcc <nrfx_pwm_stop+0x4c>
    5dd4:	20000e6c 	.word	0x20000e6c
    5dd8:	0000bb11 	.word	0x0000bb11
    5ddc:	0000a9a4 	.word	0x0000a9a4
    5de0:	0000ba44 	.word	0x0000ba44

00005de4 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5de4:	4b03      	ldr	r3, [pc, #12]	; (5df4 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    5de6:	6818      	ldr	r0, [r3, #0]
}
    5de8:	f1a0 0308 	sub.w	r3, r0, #8
    5dec:	4258      	negs	r0, r3
    5dee:	4158      	adcs	r0, r3
    5df0:	4770      	bx	lr
    5df2:	bf00      	nop
    5df4:	10000130 	.word	0x10000130

00005df8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5df8:	4b06      	ldr	r3, [pc, #24]	; (5e14 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    5dfa:	681b      	ldr	r3, [r3, #0]
    5dfc:	2b08      	cmp	r3, #8
    5dfe:	d106      	bne.n	5e0e <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5e00:	4b05      	ldr	r3, [pc, #20]	; (5e18 <nrf52_errata_103+0x20>)
    5e02:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    5e04:	2b05      	cmp	r3, #5
    5e06:	d802      	bhi.n	5e0e <nrf52_errata_103+0x16>
    5e08:	4a04      	ldr	r2, [pc, #16]	; (5e1c <nrf52_errata_103+0x24>)
    5e0a:	5cd0      	ldrb	r0, [r2, r3]
    5e0c:	4770      	bx	lr
        return false;
    5e0e:	2000      	movs	r0, #0
}
    5e10:	4770      	bx	lr
    5e12:	bf00      	nop
    5e14:	10000130 	.word	0x10000130
    5e18:	10000134 	.word	0x10000134
    5e1c:	0000bb5c 	.word	0x0000bb5c

00005e20 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5e20:	4a02      	ldr	r2, [pc, #8]	; (5e2c <nvmc_wait+0xc>)
    5e22:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    5e26:	2b00      	cmp	r3, #0
    5e28:	d0fb      	beq.n	5e22 <nvmc_wait+0x2>
}
    5e2a:	4770      	bx	lr
    5e2c:	4001e000 	.word	0x4001e000

00005e30 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    5e30:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    5e32:	f7ff ffd7 	bl	5de4 <nrf52_errata_136>
    5e36:	b140      	cbz	r0, 5e4a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    5e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e3c:	2200      	movs	r2, #0
    5e3e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5e42:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5e46:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    5e4a:	f7ff ffcb 	bl	5de4 <nrf52_errata_136>
    5e4e:	2800      	cmp	r0, #0
    5e50:	d046      	beq.n	5ee0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5e56:	4b5b      	ldr	r3, [pc, #364]	; (5fc4 <SystemInit+0x194>)
    5e58:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    5e5c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5e60:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    5e64:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5e68:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    5e6c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5e70:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5e74:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5e78:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    5e7c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5e80:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5e84:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5e88:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5e8c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5e90:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5e94:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5e98:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5e9c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5ea0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5ea4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5ea8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5eac:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5eb0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5eb4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5eb8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5ebc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5ec0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5ec4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5ec8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5ecc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5ed0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5ed4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5ed8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5edc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5ee0:	f7ff ff8a 	bl	5df8 <nrf52_errata_103>
    5ee4:	b110      	cbz	r0, 5eec <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5ee6:	4b38      	ldr	r3, [pc, #224]	; (5fc8 <SystemInit+0x198>)
    5ee8:	4a38      	ldr	r2, [pc, #224]	; (5fcc <SystemInit+0x19c>)
    5eea:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5eec:	f7ff ff84 	bl	5df8 <nrf52_errata_103>
    5ef0:	b118      	cbz	r0, 5efa <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5ef2:	4b37      	ldr	r3, [pc, #220]	; (5fd0 <SystemInit+0x1a0>)
    5ef4:	22fb      	movs	r2, #251	; 0xfb
    5ef6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5efa:	f7ff ff7d 	bl	5df8 <nrf52_errata_103>
    5efe:	b148      	cbz	r0, 5f14 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5f00:	4934      	ldr	r1, [pc, #208]	; (5fd4 <SystemInit+0x1a4>)
    5f02:	4b35      	ldr	r3, [pc, #212]	; (5fd8 <SystemInit+0x1a8>)
    5f04:	680a      	ldr	r2, [r1, #0]
    5f06:	681b      	ldr	r3, [r3, #0]
    5f08:	f022 020f 	bic.w	r2, r2, #15
    5f0c:	f003 030f 	and.w	r3, r3, #15
    5f10:	4313      	orrs	r3, r2
    5f12:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5f14:	f7ff ff70 	bl	5df8 <nrf52_errata_103>
    5f18:	b118      	cbz	r0, 5f22 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5f1a:	4b30      	ldr	r3, [pc, #192]	; (5fdc <SystemInit+0x1ac>)
    5f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5f20:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5f22:	f7ff ff5f 	bl	5de4 <nrf52_errata_136>
    5f26:	b148      	cbz	r0, 5f3c <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5f28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f2c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    5f30:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5f32:	bf44      	itt	mi
    5f34:	f06f 0201 	mvnmi.w	r2, #1
    5f38:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5f3c:	4b28      	ldr	r3, [pc, #160]	; (5fe0 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5f3e:	681b      	ldr	r3, [r3, #0]
    5f40:	2b08      	cmp	r3, #8
    5f42:	d10e      	bne.n	5f62 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5f44:	4b27      	ldr	r3, [pc, #156]	; (5fe4 <SystemInit+0x1b4>)
    5f46:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    5f48:	2b05      	cmp	r3, #5
    5f4a:	d802      	bhi.n	5f52 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5f4c:	4a26      	ldr	r2, [pc, #152]	; (5fe8 <SystemInit+0x1b8>)
    5f4e:	5cd3      	ldrb	r3, [r2, r3]
    5f50:	b13b      	cbz	r3, 5f62 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5f52:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5f56:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f5e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5f62:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5f66:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    5f6a:	2a00      	cmp	r2, #0
    5f6c:	db03      	blt.n	5f76 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5f6e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5f72:	2b00      	cmp	r3, #0
    5f74:	da22      	bge.n	5fbc <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5f76:	491d      	ldr	r1, [pc, #116]	; (5fec <SystemInit+0x1bc>)
    5f78:	2301      	movs	r3, #1
    5f7a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5f7e:	f7ff ff4f 	bl	5e20 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5f82:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    5f86:	2412      	movs	r4, #18
    5f88:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    5f8c:	f7ff ff48 	bl	5e20 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5f90:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    5f94:	f7ff ff44 	bl	5e20 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5f98:	2300      	movs	r3, #0
    5f9a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5f9e:	f7ff ff3f 	bl	5e20 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    5fa2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5fa6:	4912      	ldr	r1, [pc, #72]	; (5ff0 <SystemInit+0x1c0>)
    5fa8:	4b12      	ldr	r3, [pc, #72]	; (5ff4 <SystemInit+0x1c4>)
    5faa:	68ca      	ldr	r2, [r1, #12]
    5fac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5fb0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5fb2:	60cb      	str	r3, [r1, #12]
    5fb4:	f3bf 8f4f 	dsb	sy
    __NOP();
    5fb8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5fba:	e7fd      	b.n	5fb8 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5fbc:	4b0e      	ldr	r3, [pc, #56]	; (5ff8 <SystemInit+0x1c8>)
    5fbe:	4a0f      	ldr	r2, [pc, #60]	; (5ffc <SystemInit+0x1cc>)
    5fc0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    5fc2:	bd10      	pop	{r4, pc}
    5fc4:	4000c000 	.word	0x4000c000
    5fc8:	4000568c 	.word	0x4000568c
    5fcc:	00038148 	.word	0x00038148
    5fd0:	4000f000 	.word	0x4000f000
    5fd4:	40000ee4 	.word	0x40000ee4
    5fd8:	10000258 	.word	0x10000258
    5fdc:	40029640 	.word	0x40029640
    5fe0:	10000130 	.word	0x10000130
    5fe4:	10000134 	.word	0x10000134
    5fe8:	0000bb56 	.word	0x0000bb56
    5fec:	4001e000 	.word	0x4001e000
    5ff0:	e000ed00 	.word	0xe000ed00
    5ff4:	05fa0004 	.word	0x05fa0004
    5ff8:	200001b4 	.word	0x200001b4
    5ffc:	03d09000 	.word	0x03d09000

00006000 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6000:	4b0e      	ldr	r3, [pc, #56]	; (603c <z_sys_init_run_level+0x3c>)
{
    6002:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6004:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    6008:	3001      	adds	r0, #1
    600a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    600e:	42a6      	cmp	r6, r4
    6010:	d800      	bhi.n	6014 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    6012:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    6014:	e9d4 3500 	ldrd	r3, r5, [r4]
    6018:	4628      	mov	r0, r5
    601a:	4798      	blx	r3
		if (dev != NULL) {
    601c:	b165      	cbz	r5, 6038 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    601e:	68eb      	ldr	r3, [r5, #12]
    6020:	b130      	cbz	r0, 6030 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    6022:	2800      	cmp	r0, #0
    6024:	bfb8      	it	lt
    6026:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    6028:	28ff      	cmp	r0, #255	; 0xff
    602a:	bfa8      	it	ge
    602c:	20ff      	movge	r0, #255	; 0xff
    602e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    6030:	785a      	ldrb	r2, [r3, #1]
    6032:	f042 0201 	orr.w	r2, r2, #1
    6036:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6038:	3408      	adds	r4, #8
    603a:	e7e8      	b.n	600e <z_sys_init_run_level+0xe>
    603c:	0000a894 	.word	0x0000a894

00006040 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    6040:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    6042:	4605      	mov	r5, r0
    6044:	b910      	cbnz	r0, 604c <z_impl_device_get_binding+0xc>
		return NULL;
    6046:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    6048:	4620      	mov	r0, r4
    604a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    604c:	7803      	ldrb	r3, [r0, #0]
    604e:	2b00      	cmp	r3, #0
    6050:	d0f9      	beq.n	6046 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    6052:	4a0f      	ldr	r2, [pc, #60]	; (6090 <z_impl_device_get_binding+0x50>)
    6054:	4c0f      	ldr	r4, [pc, #60]	; (6094 <z_impl_device_get_binding+0x54>)
    6056:	4616      	mov	r6, r2
    6058:	4294      	cmp	r4, r2
    605a:	d108      	bne.n	606e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    605c:	4c0d      	ldr	r4, [pc, #52]	; (6094 <z_impl_device_get_binding+0x54>)
    605e:	42b4      	cmp	r4, r6
    6060:	d0f1      	beq.n	6046 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    6062:	4620      	mov	r0, r4
    6064:	f004 f917 	bl	a296 <z_device_ready>
    6068:	b950      	cbnz	r0, 6080 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    606a:	3418      	adds	r4, #24
    606c:	e7f7      	b.n	605e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    606e:	4620      	mov	r0, r4
    6070:	f004 f911 	bl	a296 <z_device_ready>
    6074:	b110      	cbz	r0, 607c <z_impl_device_get_binding+0x3c>
    6076:	6823      	ldr	r3, [r4, #0]
    6078:	42ab      	cmp	r3, r5
    607a:	d0e5      	beq.n	6048 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    607c:	3418      	adds	r4, #24
    607e:	e7eb      	b.n	6058 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    6080:	6821      	ldr	r1, [r4, #0]
    6082:	4628      	mov	r0, r5
    6084:	f003 fd20 	bl	9ac8 <strcmp>
    6088:	2800      	cmp	r0, #0
    608a:	d1ee      	bne.n	606a <z_impl_device_get_binding+0x2a>
    608c:	e7dc      	b.n	6048 <z_impl_device_get_binding+0x8>
    608e:	bf00      	nop
    6090:	0000a528 	.word	0x0000a528
    6094:	0000a480 	.word	0x0000a480

00006098 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    6098:	4b01      	ldr	r3, [pc, #4]	; (60a0 <z_impl_z_errno+0x8>)
    609a:	6898      	ldr	r0, [r3, #8]
}
    609c:	3064      	adds	r0, #100	; 0x64
    609e:	4770      	bx	lr
    60a0:	20000e78 	.word	0x20000e78

000060a4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    60a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60a6:	4604      	mov	r4, r0
    60a8:	460e      	mov	r6, r1
	__asm__ volatile(
    60aa:	f04f 0320 	mov.w	r3, #32
    60ae:	f3ef 8711 	mrs	r7, BASEPRI
    60b2:	f383 8812 	msr	BASEPRI_MAX, r3
    60b6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    60ba:	f001 fdb3 	bl	7c24 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    60be:	4631      	mov	r1, r6
    60c0:	4605      	mov	r5, r0
    60c2:	4620      	mov	r0, r4
    60c4:	f004 f842 	bl	a14c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    60c8:	2c04      	cmp	r4, #4
    60ca:	d10c      	bne.n	60e6 <z_fatal_error+0x42>
    60cc:	490a      	ldr	r1, [pc, #40]	; (60f8 <z_fatal_error+0x54>)
    60ce:	4a0b      	ldr	r2, [pc, #44]	; (60fc <z_fatal_error+0x58>)
    60d0:	480b      	ldr	r0, [pc, #44]	; (6100 <z_fatal_error+0x5c>)
    60d2:	238f      	movs	r3, #143	; 0x8f
    60d4:	f003 fb1d 	bl	9712 <printk>
    60d8:	480a      	ldr	r0, [pc, #40]	; (6104 <z_fatal_error+0x60>)
    60da:	f003 fb1a 	bl	9712 <printk>
    60de:	4807      	ldr	r0, [pc, #28]	; (60fc <z_fatal_error+0x58>)
    60e0:	218f      	movs	r1, #143	; 0x8f
    60e2:	f003 fa13 	bl	950c <assert_post_action>
	__asm__ volatile(
    60e6:	f387 8811 	msr	BASEPRI, r7
    60ea:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    60ee:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    60f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    60f4:	f7fd b9bc 	b.w	3470 <z_impl_k_thread_abort>
    60f8:	0000bb84 	.word	0x0000bb84
    60fc:	0000bb62 	.word	0x0000bb62
    6100:	0000a9a4 	.word	0x0000a9a4
    6104:	0000bba1 	.word	0x0000bba1

00006108 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    6108:	4c11      	ldr	r4, [pc, #68]	; (6150 <idle+0x48>)
    610a:	68a2      	ldr	r2, [r4, #8]
    610c:	f992 200e 	ldrsb.w	r2, [r2, #14]
    6110:	2a00      	cmp	r2, #0
{
    6112:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    6114:	da09      	bge.n	612a <idle+0x22>
    6116:	490f      	ldr	r1, [pc, #60]	; (6154 <idle+0x4c>)
    6118:	480f      	ldr	r0, [pc, #60]	; (6158 <idle+0x50>)
    611a:	4a10      	ldr	r2, [pc, #64]	; (615c <idle+0x54>)
    611c:	2327      	movs	r3, #39	; 0x27
    611e:	f003 faf8 	bl	9712 <printk>
    6122:	480e      	ldr	r0, [pc, #56]	; (615c <idle+0x54>)
    6124:	2127      	movs	r1, #39	; 0x27
    6126:	f003 f9f1 	bl	950c <assert_post_action>
	__asm__ volatile(
    612a:	f04f 0220 	mov.w	r2, #32
    612e:	f3ef 8311 	mrs	r3, BASEPRI
    6132:	f382 8812 	msr	BASEPRI_MAX, r2
    6136:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    613a:	f002 fa69 	bl	8610 <z_get_next_timeout_expiry>
    613e:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    6140:	f7fc fd9e 	bl	2c80 <pm_system_suspend>
    6144:	2800      	cmp	r0, #0
    6146:	d1f0      	bne.n	612a <idle+0x22>
	arch_cpu_idle();
    6148:	f7fc fe70 	bl	2e2c <arch_cpu_idle>
}
    614c:	e7ed      	b.n	612a <idle+0x22>
    614e:	bf00      	nop
    6150:	20000e78 	.word	0x20000e78
    6154:	0000bbf7 	.word	0x0000bbf7
    6158:	0000a9a4 	.word	0x0000a9a4
    615c:	0000bbd6 	.word	0x0000bbd6

00006160 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    6160:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    6162:	2300      	movs	r3, #0
{
    6164:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    6166:	2201      	movs	r2, #1
    6168:	e9cd 2304 	strd	r2, r3, [sp, #16]
    616c:	220f      	movs	r2, #15
    616e:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    6172:	4c0d      	ldr	r4, [pc, #52]	; (61a8 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6174:	4a0d      	ldr	r2, [pc, #52]	; (61ac <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    6176:	9301      	str	r3, [sp, #4]
    6178:	490d      	ldr	r1, [pc, #52]	; (61b0 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    617a:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    617c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6180:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    6184:	f44f 75b0 	mov.w	r5, #352	; 0x160
    6188:	9300      	str	r3, [sp, #0]
    618a:	fb05 1100 	mla	r1, r5, r0, r1
    618e:	4b09      	ldr	r3, [pc, #36]	; (61b4 <init_idle_thread+0x54>)
    6190:	f44f 72a0 	mov.w	r2, #320	; 0x140
    6194:	4620      	mov	r0, r4
    6196:	f001 ff61 	bl	805c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    619a:	7b63      	ldrb	r3, [r4, #13]
    619c:	f023 0304 	bic.w	r3, r3, #4
    61a0:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    61a2:	b007      	add	sp, #28
    61a4:	bd30      	pop	{r4, r5, pc}
    61a6:	bf00      	nop
    61a8:	200005b0 	.word	0x200005b0
    61ac:	20000e78 	.word	0x20000e78
    61b0:	200032c0 	.word	0x200032c0
    61b4:	00006109 	.word	0x00006109

000061b8 <bg_thread_main>:
{
    61b8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    61ba:	4b0a      	ldr	r3, [pc, #40]	; (61e4 <bg_thread_main+0x2c>)
    61bc:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    61be:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    61c0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    61c2:	f7ff ff1d 	bl	6000 <z_sys_init_run_level>
	boot_banner();
    61c6:	f002 ff53 	bl	9070 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    61ca:	2003      	movs	r0, #3
    61cc:	f7ff ff18 	bl	6000 <z_sys_init_run_level>
	z_init_static_threads();
    61d0:	f001 fff6 	bl	81c0 <z_init_static_threads>
	main();
    61d4:	f7fb fad2 	bl	177c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    61d8:	4a03      	ldr	r2, [pc, #12]	; (61e8 <bg_thread_main+0x30>)
    61da:	7b13      	ldrb	r3, [r2, #12]
    61dc:	f023 0301 	bic.w	r3, r3, #1
    61e0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    61e2:	bd08      	pop	{r3, pc}
    61e4:	20001407 	.word	0x20001407
    61e8:	20000630 	.word	0x20000630

000061ec <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    61ec:	4802      	ldr	r0, [pc, #8]	; (61f8 <z_bss_zero+0xc>)
    61ee:	4a03      	ldr	r2, [pc, #12]	; (61fc <z_bss_zero+0x10>)
    61f0:	2100      	movs	r1, #0
    61f2:	1a12      	subs	r2, r2, r0
    61f4:	f003 bc7f 	b.w	9af6 <memset>
    61f8:	20000290 	.word	0x20000290
    61fc:	200015c4 	.word	0x200015c4

00006200 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6200:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    6202:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 62dc <z_cstart+0xdc>
    6206:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    6208:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    620c:	4d2d      	ldr	r5, [pc, #180]	; (62c4 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    620e:	4e2e      	ldr	r6, [pc, #184]	; (62c8 <z_cstart+0xc8>)
    6210:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6212:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 62e0 <z_cstart+0xe0>
    6216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    621a:	2400      	movs	r4, #0
    621c:	616b      	str	r3, [r5, #20]
    621e:	23e0      	movs	r3, #224	; 0xe0
    6220:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    6224:	77ec      	strb	r4, [r5, #31]
    6226:	762c      	strb	r4, [r5, #24]
    6228:	766c      	strb	r4, [r5, #25]
    622a:	76ac      	strb	r4, [r5, #26]
    622c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6230:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6232:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6236:	626b      	str	r3, [r5, #36]	; 0x24
    6238:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    623c:	f7fd f8c2 	bl	33c4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6240:	f7fc fdee 	bl	2e20 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6248:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    624a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    624c:	f7fd f9ea 	bl	3624 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    6250:	f7fd f920 	bl	3494 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    6254:	f240 1301 	movw	r3, #257	; 0x101
    6258:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    625c:	ab06      	add	r3, sp, #24
    625e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    6260:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    6264:	f004 f816 	bl	a294 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6268:	4620      	mov	r0, r4
    626a:	f7ff fec9 	bl	6000 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    626e:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    6270:	4d16      	ldr	r5, [pc, #88]	; (62cc <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6272:	f7ff fec5 	bl	6000 <z_sys_init_run_level>
	z_sched_init();
    6276:	f001 fb3f 	bl	78f8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    627a:	4b15      	ldr	r3, [pc, #84]	; (62d0 <z_cstart+0xd0>)
    627c:	9305      	str	r3, [sp, #20]
    627e:	2301      	movs	r3, #1
    6280:	4914      	ldr	r1, [pc, #80]	; (62d4 <z_cstart+0xd4>)
    6282:	9400      	str	r4, [sp, #0]
    6284:	e9cd 4303 	strd	r4, r3, [sp, #12]
    6288:	f44f 6280 	mov.w	r2, #1024	; 0x400
    628c:	464b      	mov	r3, r9
    628e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    6292:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    6294:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6296:	f001 fee1 	bl	805c <z_setup_new_thread>
    629a:	7b6a      	ldrb	r2, [r5, #13]
    629c:	f022 0204 	bic.w	r2, r2, #4
    62a0:	736a      	strb	r2, [r5, #13]
    62a2:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    62a4:	4628      	mov	r0, r5
    62a6:	f000 ff27 	bl	70f8 <z_ready_thread>
		init_idle_thread(i);
    62aa:	4620      	mov	r0, r4
    62ac:	f7ff ff58 	bl	6160 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    62b0:	4b09      	ldr	r3, [pc, #36]	; (62d8 <z_cstart+0xd8>)
    62b2:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    62b4:	464a      	mov	r2, r9
    62b6:	4639      	mov	r1, r7
    62b8:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    62ba:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    62bc:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    62c0:	f7fc fee8 	bl	3094 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    62c4:	e000ed00 	.word	0xe000ed00
    62c8:	20000e78 	.word	0x20000e78
    62cc:	20000630 	.word	0x20000630
    62d0:	0000bc1f 	.word	0x0000bc1f
    62d4:	20002ea0 	.word	0x20002ea0
    62d8:	200005b0 	.word	0x200005b0
    62dc:	20003c40 	.word	0x20003c40
    62e0:	000061b9 	.word	0x000061b9

000062e4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    62e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    62e8:	4d16      	ldr	r5, [pc, #88]	; (6344 <init_mem_slab_module+0x60>)
    62ea:	4c17      	ldr	r4, [pc, #92]	; (6348 <init_mem_slab_module+0x64>)
    62ec:	4e17      	ldr	r6, [pc, #92]	; (634c <init_mem_slab_module+0x68>)
    62ee:	46a8      	mov	r8, r5
    62f0:	42ac      	cmp	r4, r5
    62f2:	d90c      	bls.n	630e <init_mem_slab_module+0x2a>
    62f4:	4916      	ldr	r1, [pc, #88]	; (6350 <init_mem_slab_module+0x6c>)
    62f6:	4817      	ldr	r0, [pc, #92]	; (6354 <init_mem_slab_module+0x70>)
    62f8:	233c      	movs	r3, #60	; 0x3c
    62fa:	4632      	mov	r2, r6
    62fc:	f003 fa09 	bl	9712 <printk>
    6300:	4815      	ldr	r0, [pc, #84]	; (6358 <init_mem_slab_module+0x74>)
    6302:	f003 fa06 	bl	9712 <printk>
    6306:	213c      	movs	r1, #60	; 0x3c
    6308:	4630      	mov	r0, r6
    630a:	f003 f8ff 	bl	950c <assert_post_action>
    630e:	4544      	cmp	r4, r8
    6310:	d302      	bcc.n	6318 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    6312:	2000      	movs	r0, #0
	return rc;
}
    6314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6318:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    631c:	ea41 0302 	orr.w	r3, r1, r2
    6320:	f013 0303 	ands.w	r3, r3, #3
    6324:	d10b      	bne.n	633e <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    6326:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    6328:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    632a:	4283      	cmp	r3, r0
    632c:	d101      	bne.n	6332 <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    632e:	3420      	adds	r4, #32
    6330:	e7de      	b.n	62f0 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    6332:	69a7      	ldr	r7, [r4, #24]
    6334:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6336:	3301      	adds	r3, #1
		slab->free_list = p;
    6338:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    633a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    633c:	e7f5      	b.n	632a <init_mem_slab_module+0x46>
		return -EINVAL;
    633e:	f06f 0015 	mvn.w	r0, #21
	return rc;
    6342:	e7e7      	b.n	6314 <init_mem_slab_module+0x30>
    6344:	20000240 	.word	0x20000240
    6348:	20000240 	.word	0x20000240
    634c:	0000bc24 	.word	0x0000bc24
    6350:	0000bc49 	.word	0x0000bc49
    6354:	0000a9a4 	.word	0x0000a9a4
    6358:	0000bc66 	.word	0x0000bc66

0000635c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    635c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6360:	4604      	mov	r4, r0
    6362:	460e      	mov	r6, r1
    6364:	4690      	mov	r8, r2
    6366:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6368:	f100 0508 	add.w	r5, r0, #8
    636c:	f04f 0320 	mov.w	r3, #32
    6370:	f3ef 8711 	mrs	r7, BASEPRI
    6374:	f383 8812 	msr	BASEPRI_MAX, r3
    6378:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    637c:	4628      	mov	r0, r5
    637e:	f001 ffaf 	bl	82e0 <z_spin_lock_valid>
    6382:	b968      	cbnz	r0, 63a0 <k_mem_slab_alloc+0x44>
    6384:	4a24      	ldr	r2, [pc, #144]	; (6418 <k_mem_slab_alloc+0xbc>)
    6386:	4925      	ldr	r1, [pc, #148]	; (641c <k_mem_slab_alloc+0xc0>)
    6388:	4825      	ldr	r0, [pc, #148]	; (6420 <k_mem_slab_alloc+0xc4>)
    638a:	2381      	movs	r3, #129	; 0x81
    638c:	f003 f9c1 	bl	9712 <printk>
    6390:	4824      	ldr	r0, [pc, #144]	; (6424 <k_mem_slab_alloc+0xc8>)
    6392:	4629      	mov	r1, r5
    6394:	f003 f9bd 	bl	9712 <printk>
    6398:	481f      	ldr	r0, [pc, #124]	; (6418 <k_mem_slab_alloc+0xbc>)
    639a:	2181      	movs	r1, #129	; 0x81
    639c:	f003 f8b6 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    63a0:	4628      	mov	r0, r5
    63a2:	f001 ffbb 	bl	831c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    63a6:	69a3      	ldr	r3, [r4, #24]
    63a8:	b1eb      	cbz	r3, 63e6 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    63aa:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    63ac:	681b      	ldr	r3, [r3, #0]
    63ae:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    63b0:	69e3      	ldr	r3, [r4, #28]
    63b2:	3301      	adds	r3, #1
    63b4:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    63b6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    63b8:	4628      	mov	r0, r5
    63ba:	f001 ff9f 	bl	82fc <z_spin_unlock_valid>
    63be:	b968      	cbnz	r0, 63dc <k_mem_slab_alloc+0x80>
    63c0:	4a15      	ldr	r2, [pc, #84]	; (6418 <k_mem_slab_alloc+0xbc>)
    63c2:	4919      	ldr	r1, [pc, #100]	; (6428 <k_mem_slab_alloc+0xcc>)
    63c4:	4816      	ldr	r0, [pc, #88]	; (6420 <k_mem_slab_alloc+0xc4>)
    63c6:	23ac      	movs	r3, #172	; 0xac
    63c8:	f003 f9a3 	bl	9712 <printk>
    63cc:	4817      	ldr	r0, [pc, #92]	; (642c <k_mem_slab_alloc+0xd0>)
    63ce:	4629      	mov	r1, r5
    63d0:	f003 f99f 	bl	9712 <printk>
    63d4:	4810      	ldr	r0, [pc, #64]	; (6418 <k_mem_slab_alloc+0xbc>)
    63d6:	21ac      	movs	r1, #172	; 0xac
    63d8:	f003 f898 	bl	950c <assert_post_action>
	__asm__ volatile(
    63dc:	f387 8811 	msr	BASEPRI, r7
    63e0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    63e4:	e013      	b.n	640e <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    63e6:	ea58 0209 	orrs.w	r2, r8, r9
    63ea:	d103      	bne.n	63f4 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    63ec:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    63ee:	f06f 040b 	mvn.w	r4, #11
    63f2:	e7e1      	b.n	63b8 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    63f4:	4622      	mov	r2, r4
    63f6:	e9cd 8900 	strd	r8, r9, [sp]
    63fa:	4639      	mov	r1, r7
    63fc:	4628      	mov	r0, r5
    63fe:	f001 f82d 	bl	745c <z_pend_curr>
		if (result == 0) {
    6402:	4604      	mov	r4, r0
    6404:	b918      	cbnz	r0, 640e <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    6406:	4b0a      	ldr	r3, [pc, #40]	; (6430 <k_mem_slab_alloc+0xd4>)
    6408:	689b      	ldr	r3, [r3, #8]
    640a:	695b      	ldr	r3, [r3, #20]
    640c:	6033      	str	r3, [r6, #0]
}
    640e:	4620      	mov	r0, r4
    6410:	b003      	add	sp, #12
    6412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6416:	bf00      	nop
    6418:	0000b314 	.word	0x0000b314
    641c:	0000b366 	.word	0x0000b366
    6420:	0000a9a4 	.word	0x0000a9a4
    6424:	0000b37b 	.word	0x0000b37b
    6428:	0000b33a 	.word	0x0000b33a
    642c:	0000b351 	.word	0x0000b351
    6430:	20000e78 	.word	0x20000e78

00006434 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6438:	4604      	mov	r4, r0
    643a:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    643c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    6440:	f04f 0320 	mov.w	r3, #32
    6444:	f3ef 8711 	mrs	r7, BASEPRI
    6448:	f383 8812 	msr	BASEPRI_MAX, r3
    644c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6450:	4628      	mov	r0, r5
    6452:	f001 ff45 	bl	82e0 <z_spin_lock_valid>
    6456:	b968      	cbnz	r0, 6474 <k_mem_slab_free+0x40>
    6458:	4a22      	ldr	r2, [pc, #136]	; (64e4 <k_mem_slab_free+0xb0>)
    645a:	4923      	ldr	r1, [pc, #140]	; (64e8 <k_mem_slab_free+0xb4>)
    645c:	4823      	ldr	r0, [pc, #140]	; (64ec <k_mem_slab_free+0xb8>)
    645e:	2381      	movs	r3, #129	; 0x81
    6460:	f003 f957 	bl	9712 <printk>
    6464:	4822      	ldr	r0, [pc, #136]	; (64f0 <k_mem_slab_free+0xbc>)
    6466:	4629      	mov	r1, r5
    6468:	f003 f953 	bl	9712 <printk>
    646c:	481d      	ldr	r0, [pc, #116]	; (64e4 <k_mem_slab_free+0xb0>)
    646e:	2181      	movs	r1, #129	; 0x81
    6470:	f003 f84c 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    6474:	4628      	mov	r0, r5
    6476:	f001 ff51 	bl	831c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    647a:	f8d4 8018 	ldr.w	r8, [r4, #24]
    647e:	f1b8 0f00 	cmp.w	r8, #0
    6482:	d10f      	bne.n	64a4 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6484:	4620      	mov	r0, r4
    6486:	f001 f9e7 	bl	7858 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    648a:	b158      	cbz	r0, 64a4 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    648c:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    648e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    6490:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    6494:	f000 fe30 	bl	70f8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6498:	4639      	mov	r1, r7
    649a:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    649c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    64a0:	f000 bb8a 	b.w	6bb8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    64a4:	6833      	ldr	r3, [r6, #0]
    64a6:	69a2      	ldr	r2, [r4, #24]
    64a8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    64aa:	6833      	ldr	r3, [r6, #0]
    64ac:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    64ae:	69e3      	ldr	r3, [r4, #28]
    64b0:	3b01      	subs	r3, #1
    64b2:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64b4:	4628      	mov	r0, r5
    64b6:	f001 ff21 	bl	82fc <z_spin_unlock_valid>
    64ba:	b968      	cbnz	r0, 64d8 <k_mem_slab_free+0xa4>
    64bc:	4a09      	ldr	r2, [pc, #36]	; (64e4 <k_mem_slab_free+0xb0>)
    64be:	490d      	ldr	r1, [pc, #52]	; (64f4 <k_mem_slab_free+0xc0>)
    64c0:	480a      	ldr	r0, [pc, #40]	; (64ec <k_mem_slab_free+0xb8>)
    64c2:	23ac      	movs	r3, #172	; 0xac
    64c4:	f003 f925 	bl	9712 <printk>
    64c8:	480b      	ldr	r0, [pc, #44]	; (64f8 <k_mem_slab_free+0xc4>)
    64ca:	4629      	mov	r1, r5
    64cc:	f003 f921 	bl	9712 <printk>
    64d0:	4804      	ldr	r0, [pc, #16]	; (64e4 <k_mem_slab_free+0xb0>)
    64d2:	21ac      	movs	r1, #172	; 0xac
    64d4:	f003 f81a 	bl	950c <assert_post_action>
	__asm__ volatile(
    64d8:	f387 8811 	msr	BASEPRI, r7
    64dc:	f3bf 8f6f 	isb	sy
}
    64e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64e4:	0000b314 	.word	0x0000b314
    64e8:	0000b366 	.word	0x0000b366
    64ec:	0000a9a4 	.word	0x0000a9a4
    64f0:	0000b37b 	.word	0x0000b37b
    64f4:	0000b33a 	.word	0x0000b33a
    64f8:	0000b351 	.word	0x0000b351

000064fc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    64fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6500:	4604      	mov	r4, r0
    6502:	4616      	mov	r6, r2
    6504:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6506:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    650a:	b163      	cbz	r3, 6526 <z_impl_k_mutex_lock+0x2a>
    650c:	4970      	ldr	r1, [pc, #448]	; (66d0 <z_impl_k_mutex_lock+0x1d4>)
    650e:	4a71      	ldr	r2, [pc, #452]	; (66d4 <z_impl_k_mutex_lock+0x1d8>)
    6510:	4871      	ldr	r0, [pc, #452]	; (66d8 <z_impl_k_mutex_lock+0x1dc>)
    6512:	2365      	movs	r3, #101	; 0x65
    6514:	f003 f8fd 	bl	9712 <printk>
    6518:	4870      	ldr	r0, [pc, #448]	; (66dc <z_impl_k_mutex_lock+0x1e0>)
    651a:	f003 f8fa 	bl	9712 <printk>
    651e:	486d      	ldr	r0, [pc, #436]	; (66d4 <z_impl_k_mutex_lock+0x1d8>)
    6520:	2165      	movs	r1, #101	; 0x65
    6522:	f002 fff3 	bl	950c <assert_post_action>
	__asm__ volatile(
    6526:	f04f 0320 	mov.w	r3, #32
    652a:	f3ef 8811 	mrs	r8, BASEPRI
    652e:	f383 8812 	msr	BASEPRI_MAX, r3
    6532:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6536:	486a      	ldr	r0, [pc, #424]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    6538:	f001 fed2 	bl	82e0 <z_spin_lock_valid>
    653c:	b968      	cbnz	r0, 655a <z_impl_k_mutex_lock+0x5e>
    653e:	4a69      	ldr	r2, [pc, #420]	; (66e4 <z_impl_k_mutex_lock+0x1e8>)
    6540:	4969      	ldr	r1, [pc, #420]	; (66e8 <z_impl_k_mutex_lock+0x1ec>)
    6542:	4865      	ldr	r0, [pc, #404]	; (66d8 <z_impl_k_mutex_lock+0x1dc>)
    6544:	2381      	movs	r3, #129	; 0x81
    6546:	f003 f8e4 	bl	9712 <printk>
    654a:	4965      	ldr	r1, [pc, #404]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    654c:	4867      	ldr	r0, [pc, #412]	; (66ec <z_impl_k_mutex_lock+0x1f0>)
    654e:	f003 f8e0 	bl	9712 <printk>
    6552:	4864      	ldr	r0, [pc, #400]	; (66e4 <z_impl_k_mutex_lock+0x1e8>)
    6554:	2181      	movs	r1, #129	; 0x81
    6556:	f002 ffd9 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    655a:	4861      	ldr	r0, [pc, #388]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    655c:	f001 fede 	bl	831c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6560:	68e3      	ldr	r3, [r4, #12]
    6562:	4a63      	ldr	r2, [pc, #396]	; (66f0 <z_impl_k_mutex_lock+0x1f4>)
    6564:	b1fb      	cbz	r3, 65a6 <z_impl_k_mutex_lock+0xaa>
    6566:	68a0      	ldr	r0, [r4, #8]
    6568:	6891      	ldr	r1, [r2, #8]
    656a:	4288      	cmp	r0, r1
    656c:	d03d      	beq.n	65ea <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    656e:	ea56 0307 	orrs.w	r3, r6, r7
    6572:	d13c      	bne.n	65ee <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6574:	485a      	ldr	r0, [pc, #360]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    6576:	f001 fec1 	bl	82fc <z_spin_unlock_valid>
    657a:	b968      	cbnz	r0, 6598 <z_impl_k_mutex_lock+0x9c>
    657c:	4a59      	ldr	r2, [pc, #356]	; (66e4 <z_impl_k_mutex_lock+0x1e8>)
    657e:	495d      	ldr	r1, [pc, #372]	; (66f4 <z_impl_k_mutex_lock+0x1f8>)
    6580:	4855      	ldr	r0, [pc, #340]	; (66d8 <z_impl_k_mutex_lock+0x1dc>)
    6582:	23ac      	movs	r3, #172	; 0xac
    6584:	f003 f8c5 	bl	9712 <printk>
    6588:	4955      	ldr	r1, [pc, #340]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    658a:	485b      	ldr	r0, [pc, #364]	; (66f8 <z_impl_k_mutex_lock+0x1fc>)
    658c:	f003 f8c1 	bl	9712 <printk>
    6590:	4854      	ldr	r0, [pc, #336]	; (66e4 <z_impl_k_mutex_lock+0x1e8>)
    6592:	21ac      	movs	r1, #172	; 0xac
    6594:	f002 ffba 	bl	950c <assert_post_action>
	__asm__ volatile(
    6598:	f388 8811 	msr	BASEPRI, r8
    659c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    65a0:	f06f 000f 	mvn.w	r0, #15
    65a4:	e01e      	b.n	65e4 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    65a6:	6891      	ldr	r1, [r2, #8]
    65a8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    65ac:	484c      	ldr	r0, [pc, #304]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    65ae:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    65b0:	3301      	adds	r3, #1
    65b2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    65b4:	6893      	ldr	r3, [r2, #8]
    65b6:	60a3      	str	r3, [r4, #8]
    65b8:	f001 fea0 	bl	82fc <z_spin_unlock_valid>
    65bc:	b968      	cbnz	r0, 65da <z_impl_k_mutex_lock+0xde>
    65be:	4a49      	ldr	r2, [pc, #292]	; (66e4 <z_impl_k_mutex_lock+0x1e8>)
    65c0:	494c      	ldr	r1, [pc, #304]	; (66f4 <z_impl_k_mutex_lock+0x1f8>)
    65c2:	4845      	ldr	r0, [pc, #276]	; (66d8 <z_impl_k_mutex_lock+0x1dc>)
    65c4:	23ac      	movs	r3, #172	; 0xac
    65c6:	f003 f8a4 	bl	9712 <printk>
    65ca:	4945      	ldr	r1, [pc, #276]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    65cc:	484a      	ldr	r0, [pc, #296]	; (66f8 <z_impl_k_mutex_lock+0x1fc>)
    65ce:	f003 f8a0 	bl	9712 <printk>
    65d2:	4844      	ldr	r0, [pc, #272]	; (66e4 <z_impl_k_mutex_lock+0x1e8>)
    65d4:	21ac      	movs	r1, #172	; 0xac
    65d6:	f002 ff99 	bl	950c <assert_post_action>
    65da:	f388 8811 	msr	BASEPRI, r8
    65de:	f3bf 8f6f 	isb	sy
		return 0;
    65e2:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    65e4:	b002      	add	sp, #8
    65e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    65ea:	6921      	ldr	r1, [r4, #16]
    65ec:	e7de      	b.n	65ac <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    65ee:	f991 100e 	ldrsb.w	r1, [r1, #14]
    65f2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    65f6:	4299      	cmp	r1, r3
    65f8:	bfa8      	it	ge
    65fa:	4619      	movge	r1, r3
    65fc:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    6600:	4291      	cmp	r1, r2
    6602:	bfb8      	it	lt
    6604:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6606:	428b      	cmp	r3, r1
    6608:	dd44      	ble.n	6694 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    660a:	f000 ff57 	bl	74bc <z_set_prio>
    660e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6610:	e9cd 6700 	strd	r6, r7, [sp]
    6614:	4832      	ldr	r0, [pc, #200]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    6616:	4622      	mov	r2, r4
    6618:	4641      	mov	r1, r8
    661a:	f000 ff1f 	bl	745c <z_pend_curr>
	if (got_mutex == 0) {
    661e:	2800      	cmp	r0, #0
    6620:	d0e0      	beq.n	65e4 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    6622:	f04f 0320 	mov.w	r3, #32
    6626:	f3ef 8611 	mrs	r6, BASEPRI
    662a:	f383 8812 	msr	BASEPRI_MAX, r3
    662e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6632:	482b      	ldr	r0, [pc, #172]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    6634:	f001 fe54 	bl	82e0 <z_spin_lock_valid>
    6638:	b968      	cbnz	r0, 6656 <z_impl_k_mutex_lock+0x15a>
    663a:	4a2a      	ldr	r2, [pc, #168]	; (66e4 <z_impl_k_mutex_lock+0x1e8>)
    663c:	492a      	ldr	r1, [pc, #168]	; (66e8 <z_impl_k_mutex_lock+0x1ec>)
    663e:	4826      	ldr	r0, [pc, #152]	; (66d8 <z_impl_k_mutex_lock+0x1dc>)
    6640:	2381      	movs	r3, #129	; 0x81
    6642:	f003 f866 	bl	9712 <printk>
    6646:	4926      	ldr	r1, [pc, #152]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    6648:	4828      	ldr	r0, [pc, #160]	; (66ec <z_impl_k_mutex_lock+0x1f0>)
    664a:	f003 f862 	bl	9712 <printk>
    664e:	4825      	ldr	r0, [pc, #148]	; (66e4 <z_impl_k_mutex_lock+0x1e8>)
    6650:	2181      	movs	r1, #129	; 0x81
    6652:	f002 ff5b 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    6656:	4822      	ldr	r0, [pc, #136]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    6658:	f001 fe60 	bl	831c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    665c:	6823      	ldr	r3, [r4, #0]
    665e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6660:	429c      	cmp	r4, r3
    6662:	d00a      	beq.n	667a <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6664:	b14b      	cbz	r3, 667a <z_impl_k_mutex_lock+0x17e>
    6666:	f993 300e 	ldrsb.w	r3, [r3, #14]
    666a:	4299      	cmp	r1, r3
    666c:	bfa8      	it	ge
    666e:	4619      	movge	r1, r3
    6670:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    6674:	4299      	cmp	r1, r3
    6676:	bfb8      	it	lt
    6678:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    667a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    667c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6680:	4299      	cmp	r1, r3
    6682:	d109      	bne.n	6698 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    6684:	b16d      	cbz	r5, 66a2 <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    6686:	4816      	ldr	r0, [pc, #88]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    6688:	4631      	mov	r1, r6
    668a:	f000 fa95 	bl	6bb8 <z_reschedule>
	return -EAGAIN;
    668e:	f06f 000a 	mvn.w	r0, #10
    6692:	e7a7      	b.n	65e4 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    6694:	2500      	movs	r5, #0
    6696:	e7bb      	b.n	6610 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    6698:	f000 ff10 	bl	74bc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    669c:	2800      	cmp	r0, #0
    669e:	d1f2      	bne.n	6686 <z_impl_k_mutex_lock+0x18a>
    66a0:	e7f0      	b.n	6684 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    66a2:	480f      	ldr	r0, [pc, #60]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    66a4:	f001 fe2a 	bl	82fc <z_spin_unlock_valid>
    66a8:	b968      	cbnz	r0, 66c6 <z_impl_k_mutex_lock+0x1ca>
    66aa:	4a0e      	ldr	r2, [pc, #56]	; (66e4 <z_impl_k_mutex_lock+0x1e8>)
    66ac:	4911      	ldr	r1, [pc, #68]	; (66f4 <z_impl_k_mutex_lock+0x1f8>)
    66ae:	480a      	ldr	r0, [pc, #40]	; (66d8 <z_impl_k_mutex_lock+0x1dc>)
    66b0:	23ac      	movs	r3, #172	; 0xac
    66b2:	f003 f82e 	bl	9712 <printk>
    66b6:	490a      	ldr	r1, [pc, #40]	; (66e0 <z_impl_k_mutex_lock+0x1e4>)
    66b8:	480f      	ldr	r0, [pc, #60]	; (66f8 <z_impl_k_mutex_lock+0x1fc>)
    66ba:	f003 f82a 	bl	9712 <printk>
    66be:	4809      	ldr	r0, [pc, #36]	; (66e4 <z_impl_k_mutex_lock+0x1e8>)
    66c0:	21ac      	movs	r1, #172	; 0xac
    66c2:	f002 ff23 	bl	950c <assert_post_action>
	__asm__ volatile(
    66c6:	f386 8811 	msr	BASEPRI, r6
    66ca:	f3bf 8f6f 	isb	sy
    66ce:	e7de      	b.n	668e <z_impl_k_mutex_lock+0x192>
    66d0:	0000bca7 	.word	0x0000bca7
    66d4:	0000bc85 	.word	0x0000bc85
    66d8:	0000a9a4 	.word	0x0000a9a4
    66dc:	0000bcb9 	.word	0x0000bcb9
    66e0:	20000ea0 	.word	0x20000ea0
    66e4:	0000b314 	.word	0x0000b314
    66e8:	0000b366 	.word	0x0000b366
    66ec:	0000b37b 	.word	0x0000b37b
    66f0:	20000e78 	.word	0x20000e78
    66f4:	0000b33a 	.word	0x0000b33a
    66f8:	0000b351 	.word	0x0000b351

000066fc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    66fc:	b538      	push	{r3, r4, r5, lr}
    66fe:	4604      	mov	r4, r0
    6700:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6704:	b163      	cbz	r3, 6720 <z_impl_k_mutex_unlock+0x24>
    6706:	4952      	ldr	r1, [pc, #328]	; (6850 <z_impl_k_mutex_unlock+0x154>)
    6708:	4a52      	ldr	r2, [pc, #328]	; (6854 <z_impl_k_mutex_unlock+0x158>)
    670a:	4853      	ldr	r0, [pc, #332]	; (6858 <z_impl_k_mutex_unlock+0x15c>)
    670c:	23c7      	movs	r3, #199	; 0xc7
    670e:	f003 f800 	bl	9712 <printk>
    6712:	4852      	ldr	r0, [pc, #328]	; (685c <z_impl_k_mutex_unlock+0x160>)
    6714:	f002 fffd 	bl	9712 <printk>
    6718:	484e      	ldr	r0, [pc, #312]	; (6854 <z_impl_k_mutex_unlock+0x158>)
    671a:	21c7      	movs	r1, #199	; 0xc7
    671c:	f002 fef6 	bl	950c <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6720:	68a3      	ldr	r3, [r4, #8]
    6722:	2b00      	cmp	r3, #0
    6724:	f000 808d 	beq.w	6842 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6728:	4d4d      	ldr	r5, [pc, #308]	; (6860 <z_impl_k_mutex_unlock+0x164>)
    672a:	68aa      	ldr	r2, [r5, #8]
    672c:	4293      	cmp	r3, r2
    672e:	f040 808b 	bne.w	6848 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    6732:	68e3      	ldr	r3, [r4, #12]
    6734:	b94b      	cbnz	r3, 674a <z_impl_k_mutex_unlock+0x4e>
    6736:	494b      	ldr	r1, [pc, #300]	; (6864 <z_impl_k_mutex_unlock+0x168>)
    6738:	4847      	ldr	r0, [pc, #284]	; (6858 <z_impl_k_mutex_unlock+0x15c>)
    673a:	4a46      	ldr	r2, [pc, #280]	; (6854 <z_impl_k_mutex_unlock+0x158>)
    673c:	23df      	movs	r3, #223	; 0xdf
    673e:	f002 ffe8 	bl	9712 <printk>
    6742:	4844      	ldr	r0, [pc, #272]	; (6854 <z_impl_k_mutex_unlock+0x158>)
    6744:	21df      	movs	r1, #223	; 0xdf
    6746:	f002 fee1 	bl	950c <assert_post_action>
    674a:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    674e:	b163      	cbz	r3, 676a <z_impl_k_mutex_unlock+0x6e>
    6750:	493f      	ldr	r1, [pc, #252]	; (6850 <z_impl_k_mutex_unlock+0x154>)
    6752:	4a45      	ldr	r2, [pc, #276]	; (6868 <z_impl_k_mutex_unlock+0x16c>)
    6754:	4840      	ldr	r0, [pc, #256]	; (6858 <z_impl_k_mutex_unlock+0x15c>)
    6756:	23fd      	movs	r3, #253	; 0xfd
    6758:	f002 ffdb 	bl	9712 <printk>
    675c:	4843      	ldr	r0, [pc, #268]	; (686c <z_impl_k_mutex_unlock+0x170>)
    675e:	f002 ffd8 	bl	9712 <printk>
    6762:	4841      	ldr	r0, [pc, #260]	; (6868 <z_impl_k_mutex_unlock+0x16c>)
    6764:	21fd      	movs	r1, #253	; 0xfd
    6766:	f002 fed1 	bl	950c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    676a:	68ab      	ldr	r3, [r5, #8]
    676c:	7bdb      	ldrb	r3, [r3, #15]
    676e:	2b01      	cmp	r3, #1
    6770:	d10c      	bne.n	678c <z_impl_k_mutex_unlock+0x90>
    6772:	493f      	ldr	r1, [pc, #252]	; (6870 <z_impl_k_mutex_unlock+0x174>)
    6774:	4a3c      	ldr	r2, [pc, #240]	; (6868 <z_impl_k_mutex_unlock+0x16c>)
    6776:	4838      	ldr	r0, [pc, #224]	; (6858 <z_impl_k_mutex_unlock+0x15c>)
    6778:	23fe      	movs	r3, #254	; 0xfe
    677a:	f002 ffca 	bl	9712 <printk>
    677e:	483b      	ldr	r0, [pc, #236]	; (686c <z_impl_k_mutex_unlock+0x170>)
    6780:	f002 ffc7 	bl	9712 <printk>
    6784:	4838      	ldr	r0, [pc, #224]	; (6868 <z_impl_k_mutex_unlock+0x16c>)
    6786:	21fe      	movs	r1, #254	; 0xfe
    6788:	f002 fec0 	bl	950c <assert_post_action>

	--_current->base.sched_locked;
    678c:	68aa      	ldr	r2, [r5, #8]
    678e:	7bd3      	ldrb	r3, [r2, #15]
    6790:	3b01      	subs	r3, #1
    6792:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    6794:	68e3      	ldr	r3, [r4, #12]
    6796:	2b01      	cmp	r3, #1
    6798:	d905      	bls.n	67a6 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    679a:	3b01      	subs	r3, #1
    679c:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    679e:	f000 ff93 	bl	76c8 <k_sched_unlock>

	return 0;
    67a2:	2000      	movs	r0, #0
}
    67a4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    67a6:	f04f 0320 	mov.w	r3, #32
    67aa:	f3ef 8511 	mrs	r5, BASEPRI
    67ae:	f383 8812 	msr	BASEPRI_MAX, r3
    67b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    67b6:	482f      	ldr	r0, [pc, #188]	; (6874 <z_impl_k_mutex_unlock+0x178>)
    67b8:	f001 fd92 	bl	82e0 <z_spin_lock_valid>
    67bc:	b968      	cbnz	r0, 67da <z_impl_k_mutex_unlock+0xde>
    67be:	4a2e      	ldr	r2, [pc, #184]	; (6878 <z_impl_k_mutex_unlock+0x17c>)
    67c0:	492e      	ldr	r1, [pc, #184]	; (687c <z_impl_k_mutex_unlock+0x180>)
    67c2:	4825      	ldr	r0, [pc, #148]	; (6858 <z_impl_k_mutex_unlock+0x15c>)
    67c4:	2381      	movs	r3, #129	; 0x81
    67c6:	f002 ffa4 	bl	9712 <printk>
    67ca:	492a      	ldr	r1, [pc, #168]	; (6874 <z_impl_k_mutex_unlock+0x178>)
    67cc:	482c      	ldr	r0, [pc, #176]	; (6880 <z_impl_k_mutex_unlock+0x184>)
    67ce:	f002 ffa0 	bl	9712 <printk>
    67d2:	4829      	ldr	r0, [pc, #164]	; (6878 <z_impl_k_mutex_unlock+0x17c>)
    67d4:	2181      	movs	r1, #129	; 0x81
    67d6:	f002 fe99 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    67da:	4826      	ldr	r0, [pc, #152]	; (6874 <z_impl_k_mutex_unlock+0x178>)
    67dc:	f001 fd9e 	bl	831c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    67e0:	68a0      	ldr	r0, [r4, #8]
    67e2:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    67e4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    67e8:	4299      	cmp	r1, r3
    67ea:	d001      	beq.n	67f0 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    67ec:	f000 fe66 	bl	74bc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    67f0:	4620      	mov	r0, r4
    67f2:	f001 f831 	bl	7858 <z_unpend_first_thread>
	mutex->owner = new_owner;
    67f6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    67f8:	b158      	cbz	r0, 6812 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    67fa:	f990 200e 	ldrsb.w	r2, [r0, #14]
    67fe:	6122      	str	r2, [r4, #16]
    6800:	2200      	movs	r2, #0
    6802:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    6804:	f000 fc78 	bl	70f8 <z_ready_thread>
		z_reschedule(&lock, key);
    6808:	481a      	ldr	r0, [pc, #104]	; (6874 <z_impl_k_mutex_unlock+0x178>)
    680a:	4629      	mov	r1, r5
    680c:	f000 f9d4 	bl	6bb8 <z_reschedule>
    6810:	e7c5      	b.n	679e <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    6812:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6814:	4817      	ldr	r0, [pc, #92]	; (6874 <z_impl_k_mutex_unlock+0x178>)
    6816:	f001 fd71 	bl	82fc <z_spin_unlock_valid>
    681a:	b968      	cbnz	r0, 6838 <z_impl_k_mutex_unlock+0x13c>
    681c:	4a16      	ldr	r2, [pc, #88]	; (6878 <z_impl_k_mutex_unlock+0x17c>)
    681e:	4919      	ldr	r1, [pc, #100]	; (6884 <z_impl_k_mutex_unlock+0x188>)
    6820:	480d      	ldr	r0, [pc, #52]	; (6858 <z_impl_k_mutex_unlock+0x15c>)
    6822:	23ac      	movs	r3, #172	; 0xac
    6824:	f002 ff75 	bl	9712 <printk>
    6828:	4912      	ldr	r1, [pc, #72]	; (6874 <z_impl_k_mutex_unlock+0x178>)
    682a:	4817      	ldr	r0, [pc, #92]	; (6888 <z_impl_k_mutex_unlock+0x18c>)
    682c:	f002 ff71 	bl	9712 <printk>
    6830:	4811      	ldr	r0, [pc, #68]	; (6878 <z_impl_k_mutex_unlock+0x17c>)
    6832:	21ac      	movs	r1, #172	; 0xac
    6834:	f002 fe6a 	bl	950c <assert_post_action>
	__asm__ volatile(
    6838:	f385 8811 	msr	BASEPRI, r5
    683c:	f3bf 8f6f 	isb	sy
    6840:	e7ad      	b.n	679e <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    6842:	f06f 0015 	mvn.w	r0, #21
    6846:	e7ad      	b.n	67a4 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    6848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    684c:	e7aa      	b.n	67a4 <z_impl_k_mutex_unlock+0xa8>
    684e:	bf00      	nop
    6850:	0000bca7 	.word	0x0000bca7
    6854:	0000bc85 	.word	0x0000bc85
    6858:	0000a9a4 	.word	0x0000a9a4
    685c:	0000bcb9 	.word	0x0000bcb9
    6860:	20000e78 	.word	0x20000e78
    6864:	0000bcde 	.word	0x0000bcde
    6868:	0000bcf5 	.word	0x0000bcf5
    686c:	0000bd20 	.word	0x0000bd20
    6870:	0000bd23 	.word	0x0000bd23
    6874:	20000ea0 	.word	0x20000ea0
    6878:	0000b314 	.word	0x0000b314
    687c:	0000b366 	.word	0x0000b366
    6880:	0000b37b 	.word	0x0000b37b
    6884:	0000b33a 	.word	0x0000b33a
    6888:	0000b351 	.word	0x0000b351

0000688c <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
    688c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    6890:	6884      	ldr	r4, [r0, #8]
{
    6892:	4605      	mov	r5, r0
    6894:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
    6896:	b1d4      	cbz	r4, 68ce <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
    6898:	7863      	ldrb	r3, [r4, #1]
    689a:	2b01      	cmp	r3, #1
    689c:	d14b      	bne.n	6936 <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
    689e:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
    68a2:	d10e      	bne.n	68c2 <signal_poll_event+0x36>
    68a4:	4a30      	ldr	r2, [pc, #192]	; (6968 <signal_poll_event+0xdc>)
    68a6:	4931      	ldr	r1, [pc, #196]	; (696c <signal_poll_event+0xe0>)
    68a8:	4831      	ldr	r0, [pc, #196]	; (6970 <signal_poll_event+0xe4>)
    68aa:	23f9      	movs	r3, #249	; 0xf9
    68ac:	f002 ff31 	bl	9712 <printk>
    68b0:	4830      	ldr	r0, [pc, #192]	; (6974 <signal_poll_event+0xe8>)
    68b2:	f002 ff2e 	bl	9712 <printk>
    68b6:	482c      	ldr	r0, [pc, #176]	; (6968 <signal_poll_event+0xdc>)
    68b8:	21f9      	movs	r1, #249	; 0xf9
    68ba:	f002 fe27 	bl	950c <assert_post_action>
	if (!z_is_thread_pending(thread)) {
    68be:	7b7b      	ldrb	r3, [r7, #13]
    68c0:	deff      	udf	#255	; 0xff
    68c2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    68c6:	f013 0302 	ands.w	r3, r3, #2
    68ca:	d10a      	bne.n	68e2 <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
    68cc:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    68ce:	68eb      	ldr	r3, [r5, #12]
    68d0:	f3c3 3145 	ubfx	r1, r3, #13, #6
    68d4:	430e      	orrs	r6, r1
	event->poller = NULL;
    68d6:	2000      	movs	r0, #0
	event->state |= state;
    68d8:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    68dc:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    68de:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
    68e0:	e00d      	b.n	68fe <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
    68e2:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    68e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    68ea:	f06f 0001 	mvn.w	r0, #1
    68ee:	428b      	cmp	r3, r1
    68f0:	bf08      	it	eq
    68f2:	4282      	cmpeq	r2, r0
    68f4:	d105      	bne.n	6902 <signal_poll_event+0x76>
		poller->is_polling = false;
    68f6:	2300      	movs	r3, #0
    68f8:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    68fa:	f06f 000a 	mvn.w	r0, #10
}
    68fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
    6902:	4638      	mov	r0, r7
    6904:	f000 fa54 	bl	6db0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    6908:	2e08      	cmp	r6, #8
    690a:	bf0c      	ite	eq
    690c:	f06f 0303 	mvneq.w	r3, #3
    6910:	2300      	movne	r3, #0
    6912:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6914:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    6918:	06db      	lsls	r3, r3, #27
    691a:	d104      	bne.n	6926 <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
    691c:	f854 8c48 	ldr.w	r8, [r4, #-72]
    6920:	f1b8 0f00 	cmp.w	r8, #0
    6924:	d001      	beq.n	692a <signal_poll_event+0x9e>
		poller->is_polling = false;
    6926:	2300      	movs	r3, #0
    6928:	e7d0      	b.n	68cc <signal_poll_event+0x40>
	z_ready_thread(thread);
    692a:	4638      	mov	r0, r7
    692c:	f000 fbe4 	bl	70f8 <z_ready_thread>
		poller->is_polling = false;
    6930:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    6934:	e7cb      	b.n	68ce <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
    6936:	2b02      	cmp	r3, #2
    6938:	d1f5      	bne.n	6926 <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    693a:	7823      	ldrb	r3, [r4, #0]
    693c:	2b00      	cmp	r3, #0
    693e:	d0c6      	beq.n	68ce <signal_poll_event+0x42>
    6940:	f854 7c04 	ldr.w	r7, [r4, #-4]
    6944:	b177      	cbz	r7, 6964 <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
    6946:	f1a4 0914 	sub.w	r9, r4, #20
    694a:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
    694e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    6952:	f001 fe0f 	bl	8574 <z_abort_timeout>
		twork->poll_result = 0;
    6956:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    695a:	4649      	mov	r1, r9
    695c:	4638      	mov	r0, r7
    695e:	f002 fa97 	bl	8e90 <k_work_submit_to_queue>
    6962:	e7e5      	b.n	6930 <signal_poll_event+0xa4>
		poller->is_polling = false;
    6964:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    6966:	e7b2      	b.n	68ce <signal_poll_event+0x42>
    6968:	0000bd54 	.word	0x0000bd54
    696c:	0000be4f 	.word	0x0000be4f
    6970:	0000a9a4 	.word	0x0000a9a4
    6974:	0000be65 	.word	0x0000be65

00006978 <z_impl_k_poll_signal_raise>:
{
    6978:	b570      	push	{r4, r5, r6, lr}
    697a:	4604      	mov	r4, r0
    697c:	460d      	mov	r5, r1
	__asm__ volatile(
    697e:	f04f 0320 	mov.w	r3, #32
    6982:	f3ef 8611 	mrs	r6, BASEPRI
    6986:	f383 8812 	msr	BASEPRI_MAX, r3
    698a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    698e:	4821      	ldr	r0, [pc, #132]	; (6a14 <z_impl_k_poll_signal_raise+0x9c>)
    6990:	f001 fca6 	bl	82e0 <z_spin_lock_valid>
    6994:	b968      	cbnz	r0, 69b2 <z_impl_k_poll_signal_raise+0x3a>
    6996:	4a20      	ldr	r2, [pc, #128]	; (6a18 <z_impl_k_poll_signal_raise+0xa0>)
    6998:	4920      	ldr	r1, [pc, #128]	; (6a1c <z_impl_k_poll_signal_raise+0xa4>)
    699a:	4821      	ldr	r0, [pc, #132]	; (6a20 <z_impl_k_poll_signal_raise+0xa8>)
    699c:	2381      	movs	r3, #129	; 0x81
    699e:	f002 feb8 	bl	9712 <printk>
    69a2:	491c      	ldr	r1, [pc, #112]	; (6a14 <z_impl_k_poll_signal_raise+0x9c>)
    69a4:	481f      	ldr	r0, [pc, #124]	; (6a24 <z_impl_k_poll_signal_raise+0xac>)
    69a6:	f002 feb4 	bl	9712 <printk>
    69aa:	481b      	ldr	r0, [pc, #108]	; (6a18 <z_impl_k_poll_signal_raise+0xa0>)
    69ac:	2181      	movs	r1, #129	; 0x81
    69ae:	f002 fdad 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    69b2:	4818      	ldr	r0, [pc, #96]	; (6a14 <z_impl_k_poll_signal_raise+0x9c>)
    69b4:	f001 fcb2 	bl	831c <z_spin_lock_set_owner>
	return list->head == list;
    69b8:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
    69ba:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
    69bc:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    69be:	4284      	cmp	r4, r0
    69c0:	60a1      	str	r1, [r4, #8]
    69c2:	d117      	bne.n	69f4 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69c4:	4813      	ldr	r0, [pc, #76]	; (6a14 <z_impl_k_poll_signal_raise+0x9c>)
    69c6:	f001 fc99 	bl	82fc <z_spin_unlock_valid>
    69ca:	b968      	cbnz	r0, 69e8 <z_impl_k_poll_signal_raise+0x70>
    69cc:	4a12      	ldr	r2, [pc, #72]	; (6a18 <z_impl_k_poll_signal_raise+0xa0>)
    69ce:	4916      	ldr	r1, [pc, #88]	; (6a28 <z_impl_k_poll_signal_raise+0xb0>)
    69d0:	4813      	ldr	r0, [pc, #76]	; (6a20 <z_impl_k_poll_signal_raise+0xa8>)
    69d2:	23ac      	movs	r3, #172	; 0xac
    69d4:	f002 fe9d 	bl	9712 <printk>
    69d8:	490e      	ldr	r1, [pc, #56]	; (6a14 <z_impl_k_poll_signal_raise+0x9c>)
    69da:	4814      	ldr	r0, [pc, #80]	; (6a2c <z_impl_k_poll_signal_raise+0xb4>)
    69dc:	f002 fe99 	bl	9712 <printk>
    69e0:	480d      	ldr	r0, [pc, #52]	; (6a18 <z_impl_k_poll_signal_raise+0xa0>)
    69e2:	21ac      	movs	r1, #172	; 0xac
    69e4:	f002 fd92 	bl	950c <assert_post_action>
	__asm__ volatile(
    69e8:	f386 8811 	msr	BASEPRI, r6
    69ec:	f3bf 8f6f 	isb	sy
		return 0;
    69f0:	2400      	movs	r4, #0
    69f2:	e00d      	b.n	6a10 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
    69f4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    69f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    69fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    69fc:	2300      	movs	r3, #0
	node->prev = NULL;
    69fe:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    6a02:	f7ff ff43 	bl	688c <signal_poll_event>
	z_reschedule(&lock, key);
    6a06:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    6a08:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    6a0a:	4802      	ldr	r0, [pc, #8]	; (6a14 <z_impl_k_poll_signal_raise+0x9c>)
    6a0c:	f000 f8d4 	bl	6bb8 <z_reschedule>
}
    6a10:	4620      	mov	r0, r4
    6a12:	bd70      	pop	{r4, r5, r6, pc}
    6a14:	20000ea4 	.word	0x20000ea4
    6a18:	0000b314 	.word	0x0000b314
    6a1c:	0000b366 	.word	0x0000b366
    6a20:	0000a9a4 	.word	0x0000a9a4
    6a24:	0000b37b 	.word	0x0000b37b
    6a28:	0000b33a 	.word	0x0000b33a
    6a2c:	0000b351 	.word	0x0000b351

00006a30 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    6a30:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    6a32:	4c08      	ldr	r4, [pc, #32]	; (6a54 <z_reset_time_slice+0x24>)
    6a34:	6823      	ldr	r3, [r4, #0]
    6a36:	b15b      	cbz	r3, 6a50 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    6a38:	f7fe f9e2 	bl	4e00 <sys_clock_elapsed>
    6a3c:	4603      	mov	r3, r0
    6a3e:	6820      	ldr	r0, [r4, #0]
    6a40:	4a05      	ldr	r2, [pc, #20]	; (6a58 <z_reset_time_slice+0x28>)
    6a42:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    6a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    6a48:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    6a4a:	2100      	movs	r1, #0
    6a4c:	f001 be28 	b.w	86a0 <z_set_timeout_expiry>
}
    6a50:	bd10      	pop	{r4, pc}
    6a52:	bf00      	nop
    6a54:	20000eb4 	.word	0x20000eb4
    6a58:	20000e78 	.word	0x20000e78

00006a5c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    6a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a5e:	4604      	mov	r4, r0
    6a60:	460d      	mov	r5, r1
	__asm__ volatile(
    6a62:	f04f 0320 	mov.w	r3, #32
    6a66:	f3ef 8611 	mrs	r6, BASEPRI
    6a6a:	f383 8812 	msr	BASEPRI_MAX, r3
    6a6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a72:	4823      	ldr	r0, [pc, #140]	; (6b00 <k_sched_time_slice_set+0xa4>)
    6a74:	f001 fc34 	bl	82e0 <z_spin_lock_valid>
    6a78:	b968      	cbnz	r0, 6a96 <k_sched_time_slice_set+0x3a>
    6a7a:	4a22      	ldr	r2, [pc, #136]	; (6b04 <k_sched_time_slice_set+0xa8>)
    6a7c:	4922      	ldr	r1, [pc, #136]	; (6b08 <k_sched_time_slice_set+0xac>)
    6a7e:	4823      	ldr	r0, [pc, #140]	; (6b0c <k_sched_time_slice_set+0xb0>)
    6a80:	2381      	movs	r3, #129	; 0x81
    6a82:	f002 fe46 	bl	9712 <printk>
    6a86:	491e      	ldr	r1, [pc, #120]	; (6b00 <k_sched_time_slice_set+0xa4>)
    6a88:	4821      	ldr	r0, [pc, #132]	; (6b10 <k_sched_time_slice_set+0xb4>)
    6a8a:	f002 fe42 	bl	9712 <printk>
    6a8e:	481d      	ldr	r0, [pc, #116]	; (6b04 <k_sched_time_slice_set+0xa8>)
    6a90:	2181      	movs	r1, #129	; 0x81
    6a92:	f002 fd3b 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    6a96:	481a      	ldr	r0, [pc, #104]	; (6b00 <k_sched_time_slice_set+0xa4>)
    6a98:	f001 fc40 	bl	831c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    6a9c:	4b1d      	ldr	r3, [pc, #116]	; (6b14 <k_sched_time_slice_set+0xb8>)
    6a9e:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    6aa0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    6aa4:	f240 30e7 	movw	r0, #999	; 0x3e7
    6aa8:	2100      	movs	r1, #0
    6aaa:	611a      	str	r2, [r3, #16]
    6aac:	fbe7 0104 	umlal	r0, r1, r7, r4
    6ab0:	2300      	movs	r3, #0
    6ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6ab6:	f7f9 ff61 	bl	97c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    6aba:	2c00      	cmp	r4, #0
    6abc:	4b16      	ldr	r3, [pc, #88]	; (6b18 <k_sched_time_slice_set+0xbc>)
    6abe:	dc1b      	bgt.n	6af8 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    6ac0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    6ac2:	4b16      	ldr	r3, [pc, #88]	; (6b1c <k_sched_time_slice_set+0xc0>)
    6ac4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    6ac6:	f7ff ffb3 	bl	6a30 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6aca:	480d      	ldr	r0, [pc, #52]	; (6b00 <k_sched_time_slice_set+0xa4>)
    6acc:	f001 fc16 	bl	82fc <z_spin_unlock_valid>
    6ad0:	b968      	cbnz	r0, 6aee <k_sched_time_slice_set+0x92>
    6ad2:	4a0c      	ldr	r2, [pc, #48]	; (6b04 <k_sched_time_slice_set+0xa8>)
    6ad4:	4912      	ldr	r1, [pc, #72]	; (6b20 <k_sched_time_slice_set+0xc4>)
    6ad6:	480d      	ldr	r0, [pc, #52]	; (6b0c <k_sched_time_slice_set+0xb0>)
    6ad8:	23ac      	movs	r3, #172	; 0xac
    6ada:	f002 fe1a 	bl	9712 <printk>
    6ade:	4908      	ldr	r1, [pc, #32]	; (6b00 <k_sched_time_slice_set+0xa4>)
    6ae0:	4810      	ldr	r0, [pc, #64]	; (6b24 <k_sched_time_slice_set+0xc8>)
    6ae2:	f002 fe16 	bl	9712 <printk>
    6ae6:	4807      	ldr	r0, [pc, #28]	; (6b04 <k_sched_time_slice_set+0xa8>)
    6ae8:	21ac      	movs	r1, #172	; 0xac
    6aea:	f002 fd0f 	bl	950c <assert_post_action>
	__asm__ volatile(
    6aee:	f386 8811 	msr	BASEPRI, r6
    6af2:	f3bf 8f6f 	isb	sy
	}
}
    6af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    6af8:	2802      	cmp	r0, #2
    6afa:	bfb8      	it	lt
    6afc:	2002      	movlt	r0, #2
    6afe:	e7df      	b.n	6ac0 <k_sched_time_slice_set+0x64>
    6b00:	20000eac 	.word	0x20000eac
    6b04:	0000b314 	.word	0x0000b314
    6b08:	0000b366 	.word	0x0000b366
    6b0c:	0000a9a4 	.word	0x0000a9a4
    6b10:	0000b37b 	.word	0x0000b37b
    6b14:	20000e78 	.word	0x20000e78
    6b18:	20000eb4 	.word	0x20000eb4
    6b1c:	20000eb0 	.word	0x20000eb0
    6b20:	0000b33a 	.word	0x0000b33a
    6b24:	0000b351 	.word	0x0000b351

00006b28 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    6b28:	b538      	push	{r3, r4, r5, lr}
    6b2a:	4604      	mov	r4, r0
	__asm__ volatile(
    6b2c:	f04f 0320 	mov.w	r3, #32
    6b30:	f3ef 8511 	mrs	r5, BASEPRI
    6b34:	f383 8812 	msr	BASEPRI_MAX, r3
    6b38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b3c:	4817      	ldr	r0, [pc, #92]	; (6b9c <z_unpend_thread_no_timeout+0x74>)
    6b3e:	f001 fbcf 	bl	82e0 <z_spin_lock_valid>
    6b42:	b968      	cbnz	r0, 6b60 <z_unpend_thread_no_timeout+0x38>
    6b44:	4a16      	ldr	r2, [pc, #88]	; (6ba0 <z_unpend_thread_no_timeout+0x78>)
    6b46:	4917      	ldr	r1, [pc, #92]	; (6ba4 <z_unpend_thread_no_timeout+0x7c>)
    6b48:	4817      	ldr	r0, [pc, #92]	; (6ba8 <z_unpend_thread_no_timeout+0x80>)
    6b4a:	2381      	movs	r3, #129	; 0x81
    6b4c:	f002 fde1 	bl	9712 <printk>
    6b50:	4912      	ldr	r1, [pc, #72]	; (6b9c <z_unpend_thread_no_timeout+0x74>)
    6b52:	4816      	ldr	r0, [pc, #88]	; (6bac <z_unpend_thread_no_timeout+0x84>)
    6b54:	f002 fddd 	bl	9712 <printk>
    6b58:	4811      	ldr	r0, [pc, #68]	; (6ba0 <z_unpend_thread_no_timeout+0x78>)
    6b5a:	2181      	movs	r1, #129	; 0x81
    6b5c:	f002 fcd6 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    6b60:	480e      	ldr	r0, [pc, #56]	; (6b9c <z_unpend_thread_no_timeout+0x74>)
    6b62:	f001 fbdb 	bl	831c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    6b66:	4620      	mov	r0, r4
    6b68:	f000 f900 	bl	6d6c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b6c:	480b      	ldr	r0, [pc, #44]	; (6b9c <z_unpend_thread_no_timeout+0x74>)
    6b6e:	f001 fbc5 	bl	82fc <z_spin_unlock_valid>
    6b72:	b968      	cbnz	r0, 6b90 <z_unpend_thread_no_timeout+0x68>
    6b74:	4a0a      	ldr	r2, [pc, #40]	; (6ba0 <z_unpend_thread_no_timeout+0x78>)
    6b76:	490e      	ldr	r1, [pc, #56]	; (6bb0 <z_unpend_thread_no_timeout+0x88>)
    6b78:	480b      	ldr	r0, [pc, #44]	; (6ba8 <z_unpend_thread_no_timeout+0x80>)
    6b7a:	23ac      	movs	r3, #172	; 0xac
    6b7c:	f002 fdc9 	bl	9712 <printk>
    6b80:	4906      	ldr	r1, [pc, #24]	; (6b9c <z_unpend_thread_no_timeout+0x74>)
    6b82:	480c      	ldr	r0, [pc, #48]	; (6bb4 <z_unpend_thread_no_timeout+0x8c>)
    6b84:	f002 fdc5 	bl	9712 <printk>
    6b88:	4805      	ldr	r0, [pc, #20]	; (6ba0 <z_unpend_thread_no_timeout+0x78>)
    6b8a:	21ac      	movs	r1, #172	; 0xac
    6b8c:	f002 fcbe 	bl	950c <assert_post_action>
	__asm__ volatile(
    6b90:	f385 8811 	msr	BASEPRI, r5
    6b94:	f3bf 8f6f 	isb	sy
	}
}
    6b98:	bd38      	pop	{r3, r4, r5, pc}
    6b9a:	bf00      	nop
    6b9c:	20000eac 	.word	0x20000eac
    6ba0:	0000b314 	.word	0x0000b314
    6ba4:	0000b366 	.word	0x0000b366
    6ba8:	0000a9a4 	.word	0x0000a9a4
    6bac:	0000b37b 	.word	0x0000b37b
    6bb0:	0000b33a 	.word	0x0000b33a
    6bb4:	0000b351 	.word	0x0000b351

00006bb8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    6bb8:	b538      	push	{r3, r4, r5, lr}
    6bba:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6bbc:	460d      	mov	r5, r1
    6bbe:	b9e9      	cbnz	r1, 6bfc <z_reschedule+0x44>
    6bc0:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    6bc4:	b9d3      	cbnz	r3, 6bfc <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    6bc6:	4b19      	ldr	r3, [pc, #100]	; (6c2c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    6bc8:	69da      	ldr	r2, [r3, #28]
    6bca:	689b      	ldr	r3, [r3, #8]
    6bcc:	429a      	cmp	r2, r3
    6bce:	d015      	beq.n	6bfc <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6bd0:	f001 fb94 	bl	82fc <z_spin_unlock_valid>
    6bd4:	b968      	cbnz	r0, 6bf2 <z_reschedule+0x3a>
    6bd6:	4a16      	ldr	r2, [pc, #88]	; (6c30 <z_reschedule+0x78>)
    6bd8:	4916      	ldr	r1, [pc, #88]	; (6c34 <z_reschedule+0x7c>)
    6bda:	4817      	ldr	r0, [pc, #92]	; (6c38 <z_reschedule+0x80>)
    6bdc:	23c3      	movs	r3, #195	; 0xc3
    6bde:	f002 fd98 	bl	9712 <printk>
    6be2:	4816      	ldr	r0, [pc, #88]	; (6c3c <z_reschedule+0x84>)
    6be4:	4621      	mov	r1, r4
    6be6:	f002 fd94 	bl	9712 <printk>
    6bea:	4811      	ldr	r0, [pc, #68]	; (6c30 <z_reschedule+0x78>)
    6bec:	21c3      	movs	r1, #195	; 0xc3
    6bee:	f002 fc8d 	bl	950c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    6bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    6bf6:	2000      	movs	r0, #0
    6bf8:	f7fc b9fc 	b.w	2ff4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6bfc:	4620      	mov	r0, r4
    6bfe:	f001 fb7d 	bl	82fc <z_spin_unlock_valid>
    6c02:	b968      	cbnz	r0, 6c20 <z_reschedule+0x68>
    6c04:	4a0a      	ldr	r2, [pc, #40]	; (6c30 <z_reschedule+0x78>)
    6c06:	490b      	ldr	r1, [pc, #44]	; (6c34 <z_reschedule+0x7c>)
    6c08:	480b      	ldr	r0, [pc, #44]	; (6c38 <z_reschedule+0x80>)
    6c0a:	23ac      	movs	r3, #172	; 0xac
    6c0c:	f002 fd81 	bl	9712 <printk>
    6c10:	480a      	ldr	r0, [pc, #40]	; (6c3c <z_reschedule+0x84>)
    6c12:	4621      	mov	r1, r4
    6c14:	f002 fd7d 	bl	9712 <printk>
    6c18:	4805      	ldr	r0, [pc, #20]	; (6c30 <z_reschedule+0x78>)
    6c1a:	21ac      	movs	r1, #172	; 0xac
    6c1c:	f002 fc76 	bl	950c <assert_post_action>
    6c20:	f385 8811 	msr	BASEPRI, r5
    6c24:	f3bf 8f6f 	isb	sy
    6c28:	bd38      	pop	{r3, r4, r5, pc}
    6c2a:	bf00      	nop
    6c2c:	20000e78 	.word	0x20000e78
    6c30:	0000b314 	.word	0x0000b314
    6c34:	0000b33a 	.word	0x0000b33a
    6c38:	0000a9a4 	.word	0x0000a9a4
    6c3c:	0000b351 	.word	0x0000b351

00006c40 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    6c40:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6c42:	f04f 0320 	mov.w	r3, #32
    6c46:	f3ef 8511 	mrs	r5, BASEPRI
    6c4a:	f383 8812 	msr	BASEPRI_MAX, r3
    6c4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c52:	4829      	ldr	r0, [pc, #164]	; (6cf8 <k_sched_lock+0xb8>)
    6c54:	f001 fb44 	bl	82e0 <z_spin_lock_valid>
    6c58:	b968      	cbnz	r0, 6c76 <k_sched_lock+0x36>
    6c5a:	4a28      	ldr	r2, [pc, #160]	; (6cfc <k_sched_lock+0xbc>)
    6c5c:	4928      	ldr	r1, [pc, #160]	; (6d00 <k_sched_lock+0xc0>)
    6c5e:	4829      	ldr	r0, [pc, #164]	; (6d04 <k_sched_lock+0xc4>)
    6c60:	2381      	movs	r3, #129	; 0x81
    6c62:	f002 fd56 	bl	9712 <printk>
    6c66:	4924      	ldr	r1, [pc, #144]	; (6cf8 <k_sched_lock+0xb8>)
    6c68:	4827      	ldr	r0, [pc, #156]	; (6d08 <k_sched_lock+0xc8>)
    6c6a:	f002 fd52 	bl	9712 <printk>
    6c6e:	4823      	ldr	r0, [pc, #140]	; (6cfc <k_sched_lock+0xbc>)
    6c70:	2181      	movs	r1, #129	; 0x81
    6c72:	f002 fc4b 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    6c76:	4820      	ldr	r0, [pc, #128]	; (6cf8 <k_sched_lock+0xb8>)
    6c78:	f001 fb50 	bl	831c <z_spin_lock_set_owner>
    6c7c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    6c80:	b163      	cbz	r3, 6c9c <k_sched_lock+0x5c>
    6c82:	4922      	ldr	r1, [pc, #136]	; (6d0c <k_sched_lock+0xcc>)
    6c84:	4a22      	ldr	r2, [pc, #136]	; (6d10 <k_sched_lock+0xd0>)
    6c86:	481f      	ldr	r0, [pc, #124]	; (6d04 <k_sched_lock+0xc4>)
    6c88:	23fd      	movs	r3, #253	; 0xfd
    6c8a:	f002 fd42 	bl	9712 <printk>
    6c8e:	4821      	ldr	r0, [pc, #132]	; (6d14 <k_sched_lock+0xd4>)
    6c90:	f002 fd3f 	bl	9712 <printk>
    6c94:	481e      	ldr	r0, [pc, #120]	; (6d10 <k_sched_lock+0xd0>)
    6c96:	21fd      	movs	r1, #253	; 0xfd
    6c98:	f002 fc38 	bl	950c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6c9c:	4c1e      	ldr	r4, [pc, #120]	; (6d18 <k_sched_lock+0xd8>)
    6c9e:	68a2      	ldr	r2, [r4, #8]
    6ca0:	7bd2      	ldrb	r2, [r2, #15]
    6ca2:	2a01      	cmp	r2, #1
    6ca4:	d10c      	bne.n	6cc0 <k_sched_lock+0x80>
    6ca6:	491d      	ldr	r1, [pc, #116]	; (6d1c <k_sched_lock+0xdc>)
    6ca8:	4a19      	ldr	r2, [pc, #100]	; (6d10 <k_sched_lock+0xd0>)
    6caa:	4816      	ldr	r0, [pc, #88]	; (6d04 <k_sched_lock+0xc4>)
    6cac:	23fe      	movs	r3, #254	; 0xfe
    6cae:	f002 fd30 	bl	9712 <printk>
    6cb2:	4818      	ldr	r0, [pc, #96]	; (6d14 <k_sched_lock+0xd4>)
    6cb4:	f002 fd2d 	bl	9712 <printk>
    6cb8:	4815      	ldr	r0, [pc, #84]	; (6d10 <k_sched_lock+0xd0>)
    6cba:	21fe      	movs	r1, #254	; 0xfe
    6cbc:	f002 fc26 	bl	950c <assert_post_action>
	--_current->base.sched_locked;
    6cc0:	68a2      	ldr	r2, [r4, #8]
    6cc2:	7bd3      	ldrb	r3, [r2, #15]
    6cc4:	3b01      	subs	r3, #1
    6cc6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6cc8:	480b      	ldr	r0, [pc, #44]	; (6cf8 <k_sched_lock+0xb8>)
    6cca:	f001 fb17 	bl	82fc <z_spin_unlock_valid>
    6cce:	b968      	cbnz	r0, 6cec <k_sched_lock+0xac>
    6cd0:	4a0a      	ldr	r2, [pc, #40]	; (6cfc <k_sched_lock+0xbc>)
    6cd2:	4913      	ldr	r1, [pc, #76]	; (6d20 <k_sched_lock+0xe0>)
    6cd4:	480b      	ldr	r0, [pc, #44]	; (6d04 <k_sched_lock+0xc4>)
    6cd6:	23ac      	movs	r3, #172	; 0xac
    6cd8:	f002 fd1b 	bl	9712 <printk>
    6cdc:	4906      	ldr	r1, [pc, #24]	; (6cf8 <k_sched_lock+0xb8>)
    6cde:	4811      	ldr	r0, [pc, #68]	; (6d24 <k_sched_lock+0xe4>)
    6ce0:	f002 fd17 	bl	9712 <printk>
    6ce4:	4805      	ldr	r0, [pc, #20]	; (6cfc <k_sched_lock+0xbc>)
    6ce6:	21ac      	movs	r1, #172	; 0xac
    6ce8:	f002 fc10 	bl	950c <assert_post_action>
	__asm__ volatile(
    6cec:	f385 8811 	msr	BASEPRI, r5
    6cf0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6cf4:	bd38      	pop	{r3, r4, r5, pc}
    6cf6:	bf00      	nop
    6cf8:	20000eac 	.word	0x20000eac
    6cfc:	0000b314 	.word	0x0000b314
    6d00:	0000b366 	.word	0x0000b366
    6d04:	0000a9a4 	.word	0x0000a9a4
    6d08:	0000b37b 	.word	0x0000b37b
    6d0c:	0000bca7 	.word	0x0000bca7
    6d10:	0000bcf5 	.word	0x0000bcf5
    6d14:	0000bd20 	.word	0x0000bd20
    6d18:	20000e78 	.word	0x20000e78
    6d1c:	0000bd23 	.word	0x0000bd23
    6d20:	0000b33a 	.word	0x0000b33a
    6d24:	0000b351 	.word	0x0000b351

00006d28 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6d28:	4b0c      	ldr	r3, [pc, #48]	; (6d5c <z_priq_dumb_remove+0x34>)
    6d2a:	4299      	cmp	r1, r3
{
    6d2c:	b510      	push	{r4, lr}
    6d2e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6d30:	d10b      	bne.n	6d4a <z_priq_dumb_remove+0x22>
    6d32:	490b      	ldr	r1, [pc, #44]	; (6d60 <z_priq_dumb_remove+0x38>)
    6d34:	480b      	ldr	r0, [pc, #44]	; (6d64 <z_priq_dumb_remove+0x3c>)
    6d36:	4a0c      	ldr	r2, [pc, #48]	; (6d68 <z_priq_dumb_remove+0x40>)
    6d38:	f240 33e7 	movw	r3, #999	; 0x3e7
    6d3c:	f002 fce9 	bl	9712 <printk>
    6d40:	4809      	ldr	r0, [pc, #36]	; (6d68 <z_priq_dumb_remove+0x40>)
    6d42:	f240 31e7 	movw	r1, #999	; 0x3e7
    6d46:	f002 fbe1 	bl	950c <assert_post_action>
	sys_dnode_t *const next = node->next;
    6d4a:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
    6d4e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6d50:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6d52:	2300      	movs	r3, #0
	node->prev = NULL;
    6d54:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    6d58:	bd10      	pop	{r4, pc}
    6d5a:	bf00      	nop
    6d5c:	200005b0 	.word	0x200005b0
    6d60:	0000bea6 	.word	0x0000bea6
    6d64:	0000a9a4 	.word	0x0000a9a4
    6d68:	0000be84 	.word	0x0000be84

00006d6c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    6d6c:	6883      	ldr	r3, [r0, #8]
{
    6d6e:	b510      	push	{r4, lr}
    6d70:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    6d72:	b95b      	cbnz	r3, 6d8c <unpend_thread_no_timeout+0x20>
    6d74:	490b      	ldr	r1, [pc, #44]	; (6da4 <unpend_thread_no_timeout+0x38>)
    6d76:	480c      	ldr	r0, [pc, #48]	; (6da8 <unpend_thread_no_timeout+0x3c>)
    6d78:	4a0c      	ldr	r2, [pc, #48]	; (6dac <unpend_thread_no_timeout+0x40>)
    6d7a:	f240 2383 	movw	r3, #643	; 0x283
    6d7e:	f002 fcc8 	bl	9712 <printk>
    6d82:	480a      	ldr	r0, [pc, #40]	; (6dac <unpend_thread_no_timeout+0x40>)
    6d84:	f240 2183 	movw	r1, #643	; 0x283
    6d88:	f002 fbc0 	bl	950c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6d8c:	68a0      	ldr	r0, [r4, #8]
    6d8e:	4621      	mov	r1, r4
    6d90:	f7ff ffca 	bl	6d28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6d94:	7b63      	ldrb	r3, [r4, #13]
    6d96:	f023 0302 	bic.w	r3, r3, #2
    6d9a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6d9c:	2300      	movs	r3, #0
    6d9e:	60a3      	str	r3, [r4, #8]
}
    6da0:	bd10      	pop	{r4, pc}
    6da2:	bf00      	nop
    6da4:	0000bec7 	.word	0x0000bec7
    6da8:	0000a9a4 	.word	0x0000a9a4
    6dac:	0000be84 	.word	0x0000be84

00006db0 <z_unpend_thread>:
{
    6db0:	b538      	push	{r3, r4, r5, lr}
    6db2:	4604      	mov	r4, r0
	__asm__ volatile(
    6db4:	f04f 0320 	mov.w	r3, #32
    6db8:	f3ef 8511 	mrs	r5, BASEPRI
    6dbc:	f383 8812 	msr	BASEPRI_MAX, r3
    6dc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6dc4:	4819      	ldr	r0, [pc, #100]	; (6e2c <z_unpend_thread+0x7c>)
    6dc6:	f001 fa8b 	bl	82e0 <z_spin_lock_valid>
    6dca:	b968      	cbnz	r0, 6de8 <z_unpend_thread+0x38>
    6dcc:	4a18      	ldr	r2, [pc, #96]	; (6e30 <z_unpend_thread+0x80>)
    6dce:	4919      	ldr	r1, [pc, #100]	; (6e34 <z_unpend_thread+0x84>)
    6dd0:	4819      	ldr	r0, [pc, #100]	; (6e38 <z_unpend_thread+0x88>)
    6dd2:	2381      	movs	r3, #129	; 0x81
    6dd4:	f002 fc9d 	bl	9712 <printk>
    6dd8:	4914      	ldr	r1, [pc, #80]	; (6e2c <z_unpend_thread+0x7c>)
    6dda:	4818      	ldr	r0, [pc, #96]	; (6e3c <z_unpend_thread+0x8c>)
    6ddc:	f002 fc99 	bl	9712 <printk>
    6de0:	4813      	ldr	r0, [pc, #76]	; (6e30 <z_unpend_thread+0x80>)
    6de2:	2181      	movs	r1, #129	; 0x81
    6de4:	f002 fb92 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    6de8:	4810      	ldr	r0, [pc, #64]	; (6e2c <z_unpend_thread+0x7c>)
    6dea:	f001 fa97 	bl	831c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    6dee:	4620      	mov	r0, r4
    6df0:	f7ff ffbc 	bl	6d6c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6df4:	480d      	ldr	r0, [pc, #52]	; (6e2c <z_unpend_thread+0x7c>)
    6df6:	f001 fa81 	bl	82fc <z_spin_unlock_valid>
    6dfa:	b968      	cbnz	r0, 6e18 <z_unpend_thread+0x68>
    6dfc:	4a0c      	ldr	r2, [pc, #48]	; (6e30 <z_unpend_thread+0x80>)
    6dfe:	4910      	ldr	r1, [pc, #64]	; (6e40 <z_unpend_thread+0x90>)
    6e00:	480d      	ldr	r0, [pc, #52]	; (6e38 <z_unpend_thread+0x88>)
    6e02:	23ac      	movs	r3, #172	; 0xac
    6e04:	f002 fc85 	bl	9712 <printk>
    6e08:	4908      	ldr	r1, [pc, #32]	; (6e2c <z_unpend_thread+0x7c>)
    6e0a:	480e      	ldr	r0, [pc, #56]	; (6e44 <z_unpend_thread+0x94>)
    6e0c:	f002 fc81 	bl	9712 <printk>
    6e10:	4807      	ldr	r0, [pc, #28]	; (6e30 <z_unpend_thread+0x80>)
    6e12:	21ac      	movs	r1, #172	; 0xac
    6e14:	f002 fb7a 	bl	950c <assert_post_action>
	__asm__ volatile(
    6e18:	f385 8811 	msr	BASEPRI, r5
    6e1c:	f3bf 8f6f 	isb	sy
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6e20:	f104 0018 	add.w	r0, r4, #24
}
    6e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6e28:	f001 bba4 	b.w	8574 <z_abort_timeout>
    6e2c:	20000eac 	.word	0x20000eac
    6e30:	0000b314 	.word	0x0000b314
    6e34:	0000b366 	.word	0x0000b366
    6e38:	0000a9a4 	.word	0x0000a9a4
    6e3c:	0000b37b 	.word	0x0000b37b
    6e40:	0000b33a 	.word	0x0000b33a
    6e44:	0000b351 	.word	0x0000b351

00006e48 <update_cache>:
{
    6e48:	b538      	push	{r3, r4, r5, lr}
    6e4a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    6e4c:	4814      	ldr	r0, [pc, #80]	; (6ea0 <update_cache+0x58>)
    6e4e:	4d15      	ldr	r5, [pc, #84]	; (6ea4 <update_cache+0x5c>)
    6e50:	f003 fa79 	bl	a346 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6e54:	4604      	mov	r4, r0
    6e56:	b900      	cbnz	r0, 6e5a <update_cache+0x12>
    6e58:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    6e5a:	b9ca      	cbnz	r2, 6e90 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    6e5c:	68ab      	ldr	r3, [r5, #8]
    6e5e:	b963      	cbnz	r3, 6e7a <update_cache+0x32>
    6e60:	4911      	ldr	r1, [pc, #68]	; (6ea8 <update_cache+0x60>)
    6e62:	4a12      	ldr	r2, [pc, #72]	; (6eac <update_cache+0x64>)
    6e64:	4812      	ldr	r0, [pc, #72]	; (6eb0 <update_cache+0x68>)
    6e66:	2389      	movs	r3, #137	; 0x89
    6e68:	f002 fc53 	bl	9712 <printk>
    6e6c:	4811      	ldr	r0, [pc, #68]	; (6eb4 <update_cache+0x6c>)
    6e6e:	f002 fc50 	bl	9712 <printk>
    6e72:	480e      	ldr	r0, [pc, #56]	; (6eac <update_cache+0x64>)
    6e74:	2189      	movs	r1, #137	; 0x89
    6e76:	f002 fb49 	bl	950c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    6e7a:	68ab      	ldr	r3, [r5, #8]
    6e7c:	7b5a      	ldrb	r2, [r3, #13]
    6e7e:	06d2      	lsls	r2, r2, #27
    6e80:	d106      	bne.n	6e90 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6e82:	69a2      	ldr	r2, [r4, #24]
    6e84:	b922      	cbnz	r2, 6e90 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    6e86:	89da      	ldrh	r2, [r3, #14]
    6e88:	2a7f      	cmp	r2, #127	; 0x7f
    6e8a:	d901      	bls.n	6e90 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    6e8c:	61eb      	str	r3, [r5, #28]
}
    6e8e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    6e90:	68ab      	ldr	r3, [r5, #8]
    6e92:	42a3      	cmp	r3, r4
    6e94:	d001      	beq.n	6e9a <update_cache+0x52>
			z_reset_time_slice();
    6e96:	f7ff fdcb 	bl	6a30 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6e9a:	61ec      	str	r4, [r5, #28]
}
    6e9c:	e7f7      	b.n	6e8e <update_cache+0x46>
    6e9e:	bf00      	nop
    6ea0:	20000e98 	.word	0x20000e98
    6ea4:	20000e78 	.word	0x20000e78
    6ea8:	0000bede 	.word	0x0000bede
    6eac:	0000be84 	.word	0x0000be84
    6eb0:	0000a9a4 	.word	0x0000a9a4
    6eb4:	0000bd20 	.word	0x0000bd20

00006eb8 <move_thread_to_end_of_prio_q>:
{
    6eb8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    6eba:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6ebe:	7b43      	ldrb	r3, [r0, #13]
    6ec0:	2a00      	cmp	r2, #0
{
    6ec2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    6ec4:	da06      	bge.n	6ed4 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6eca:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6ecc:	4601      	mov	r1, r0
    6ece:	481f      	ldr	r0, [pc, #124]	; (6f4c <move_thread_to_end_of_prio_q+0x94>)
    6ed0:	f7ff ff2a 	bl	6d28 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6ed4:	7b63      	ldrb	r3, [r4, #13]
    6ed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6eda:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6edc:	4b1c      	ldr	r3, [pc, #112]	; (6f50 <move_thread_to_end_of_prio_q+0x98>)
    6ede:	429c      	cmp	r4, r3
    6ee0:	d109      	bne.n	6ef6 <move_thread_to_end_of_prio_q+0x3e>
    6ee2:	491c      	ldr	r1, [pc, #112]	; (6f54 <move_thread_to_end_of_prio_q+0x9c>)
    6ee4:	481c      	ldr	r0, [pc, #112]	; (6f58 <move_thread_to_end_of_prio_q+0xa0>)
    6ee6:	4a1d      	ldr	r2, [pc, #116]	; (6f5c <move_thread_to_end_of_prio_q+0xa4>)
    6ee8:	23ba      	movs	r3, #186	; 0xba
    6eea:	f002 fc12 	bl	9712 <printk>
    6eee:	481b      	ldr	r0, [pc, #108]	; (6f5c <move_thread_to_end_of_prio_q+0xa4>)
    6ef0:	21ba      	movs	r1, #186	; 0xba
    6ef2:	f002 fb0b 	bl	950c <assert_post_action>
	return list->head == list;
    6ef6:	4a1a      	ldr	r2, [pc, #104]	; (6f60 <move_thread_to_end_of_prio_q+0xa8>)
    6ef8:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6efa:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    6efc:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f00:	428b      	cmp	r3, r1
    6f02:	bf08      	it	eq
    6f04:	2300      	moveq	r3, #0
    6f06:	2b00      	cmp	r3, #0
    6f08:	bf38      	it	cc
    6f0a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6f0c:	b1cb      	cbz	r3, 6f42 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    6f0e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6f12:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    6f16:	4286      	cmp	r6, r0
    6f18:	d00f      	beq.n	6f3a <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    6f1a:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6f1c:	2800      	cmp	r0, #0
    6f1e:	dd0c      	ble.n	6f3a <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    6f20:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6f22:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    6f26:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    6f28:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    6f2a:	6890      	ldr	r0, [r2, #8]
    6f2c:	1b03      	subs	r3, r0, r4
    6f2e:	4258      	negs	r0, r3
}
    6f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    6f34:	4158      	adcs	r0, r3
    6f36:	f7ff bf87 	b.w	6e48 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6f3a:	42ab      	cmp	r3, r5
    6f3c:	d001      	beq.n	6f42 <move_thread_to_end_of_prio_q+0x8a>
    6f3e:	681b      	ldr	r3, [r3, #0]
    6f40:	e7e4      	b.n	6f0c <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    6f42:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    6f46:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6f48:	6254      	str	r4, [r2, #36]	; 0x24
}
    6f4a:	e7ee      	b.n	6f2a <move_thread_to_end_of_prio_q+0x72>
    6f4c:	20000e98 	.word	0x20000e98
    6f50:	200005b0 	.word	0x200005b0
    6f54:	0000bea6 	.word	0x0000bea6
    6f58:	0000a9a4 	.word	0x0000a9a4
    6f5c:	0000be84 	.word	0x0000be84
    6f60:	20000e78 	.word	0x20000e78

00006f64 <z_time_slice>:
{
    6f64:	b570      	push	{r4, r5, r6, lr}
    6f66:	4604      	mov	r4, r0
	__asm__ volatile(
    6f68:	f04f 0320 	mov.w	r3, #32
    6f6c:	f3ef 8511 	mrs	r5, BASEPRI
    6f70:	f383 8812 	msr	BASEPRI_MAX, r3
    6f74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f78:	482a      	ldr	r0, [pc, #168]	; (7024 <z_time_slice+0xc0>)
    6f7a:	f001 f9b1 	bl	82e0 <z_spin_lock_valid>
    6f7e:	b968      	cbnz	r0, 6f9c <z_time_slice+0x38>
    6f80:	4a29      	ldr	r2, [pc, #164]	; (7028 <z_time_slice+0xc4>)
    6f82:	492a      	ldr	r1, [pc, #168]	; (702c <z_time_slice+0xc8>)
    6f84:	482a      	ldr	r0, [pc, #168]	; (7030 <z_time_slice+0xcc>)
    6f86:	2381      	movs	r3, #129	; 0x81
    6f88:	f002 fbc3 	bl	9712 <printk>
    6f8c:	4925      	ldr	r1, [pc, #148]	; (7024 <z_time_slice+0xc0>)
    6f8e:	4829      	ldr	r0, [pc, #164]	; (7034 <z_time_slice+0xd0>)
    6f90:	f002 fbbf 	bl	9712 <printk>
    6f94:	4824      	ldr	r0, [pc, #144]	; (7028 <z_time_slice+0xc4>)
    6f96:	2181      	movs	r1, #129	; 0x81
    6f98:	f002 fab8 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    6f9c:	4821      	ldr	r0, [pc, #132]	; (7024 <z_time_slice+0xc0>)
    6f9e:	f001 f9bd 	bl	831c <z_spin_lock_set_owner>
	if (pending_current == _current) {
    6fa2:	4b25      	ldr	r3, [pc, #148]	; (7038 <z_time_slice+0xd4>)
    6fa4:	4a25      	ldr	r2, [pc, #148]	; (703c <z_time_slice+0xd8>)
    6fa6:	6898      	ldr	r0, [r3, #8]
    6fa8:	6811      	ldr	r1, [r2, #0]
    6faa:	4288      	cmp	r0, r1
    6fac:	4619      	mov	r1, r3
    6fae:	d118      	bne.n	6fe2 <z_time_slice+0x7e>
			z_reset_time_slice();
    6fb0:	f7ff fd3e 	bl	6a30 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fb4:	481b      	ldr	r0, [pc, #108]	; (7024 <z_time_slice+0xc0>)
    6fb6:	f001 f9a1 	bl	82fc <z_spin_unlock_valid>
    6fba:	b968      	cbnz	r0, 6fd8 <z_time_slice+0x74>
    6fbc:	4a1a      	ldr	r2, [pc, #104]	; (7028 <z_time_slice+0xc4>)
    6fbe:	4920      	ldr	r1, [pc, #128]	; (7040 <z_time_slice+0xdc>)
    6fc0:	481b      	ldr	r0, [pc, #108]	; (7030 <z_time_slice+0xcc>)
    6fc2:	23ac      	movs	r3, #172	; 0xac
    6fc4:	f002 fba5 	bl	9712 <printk>
    6fc8:	4916      	ldr	r1, [pc, #88]	; (7024 <z_time_slice+0xc0>)
    6fca:	481e      	ldr	r0, [pc, #120]	; (7044 <z_time_slice+0xe0>)
    6fcc:	f002 fba1 	bl	9712 <printk>
    6fd0:	4815      	ldr	r0, [pc, #84]	; (7028 <z_time_slice+0xc4>)
    6fd2:	21ac      	movs	r1, #172	; 0xac
    6fd4:	f002 fa9a 	bl	950c <assert_post_action>
	__asm__ volatile(
    6fd8:	f385 8811 	msr	BASEPRI, r5
    6fdc:	f3bf 8f6f 	isb	sy
}
    6fe0:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    6fe2:	2600      	movs	r6, #0
    6fe4:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    6fe6:	4a18      	ldr	r2, [pc, #96]	; (7048 <z_time_slice+0xe4>)
    6fe8:	6812      	ldr	r2, [r2, #0]
    6fea:	b1ba      	cbz	r2, 701c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    6fec:	89c2      	ldrh	r2, [r0, #14]
    6fee:	2a7f      	cmp	r2, #127	; 0x7f
    6ff0:	d814      	bhi.n	701c <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    6ff2:	7b42      	ldrb	r2, [r0, #13]
    6ff4:	06d2      	lsls	r2, r2, #27
    6ff6:	d111      	bne.n	701c <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6ff8:	4a14      	ldr	r2, [pc, #80]	; (704c <z_time_slice+0xe8>)
    6ffa:	f990 600e 	ldrsb.w	r6, [r0, #14]
    6ffe:	6812      	ldr	r2, [r2, #0]
    7000:	4296      	cmp	r6, r2
    7002:	db0b      	blt.n	701c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    7004:	4a12      	ldr	r2, [pc, #72]	; (7050 <z_time_slice+0xec>)
    7006:	4290      	cmp	r0, r2
    7008:	d008      	beq.n	701c <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    700a:	691a      	ldr	r2, [r3, #16]
    700c:	42a2      	cmp	r2, r4
    700e:	dc02      	bgt.n	7016 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    7010:	f7ff ff52 	bl	6eb8 <move_thread_to_end_of_prio_q>
    7014:	e7cc      	b.n	6fb0 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    7016:	1b12      	subs	r2, r2, r4
    7018:	611a      	str	r2, [r3, #16]
    701a:	e7cb      	b.n	6fb4 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    701c:	2300      	movs	r3, #0
    701e:	610b      	str	r3, [r1, #16]
    7020:	e7c8      	b.n	6fb4 <z_time_slice+0x50>
    7022:	bf00      	nop
    7024:	20000eac 	.word	0x20000eac
    7028:	0000b314 	.word	0x0000b314
    702c:	0000b366 	.word	0x0000b366
    7030:	0000a9a4 	.word	0x0000a9a4
    7034:	0000b37b 	.word	0x0000b37b
    7038:	20000e78 	.word	0x20000e78
    703c:	20000ea8 	.word	0x20000ea8
    7040:	0000b33a 	.word	0x0000b33a
    7044:	0000b351 	.word	0x0000b351
    7048:	20000eb4 	.word	0x20000eb4
    704c:	20000eb0 	.word	0x20000eb0
    7050:	200005b0 	.word	0x200005b0

00007054 <ready_thread>:
{
    7054:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7056:	f990 200d 	ldrsb.w	r2, [r0, #13]
    705a:	7b43      	ldrb	r3, [r0, #13]
    705c:	2a00      	cmp	r2, #0
{
    705e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7060:	db3e      	blt.n	70e0 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7062:	06da      	lsls	r2, r3, #27
    7064:	d13c      	bne.n	70e0 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
    7066:	6985      	ldr	r5, [r0, #24]
    7068:	2d00      	cmp	r5, #0
    706a:	d139      	bne.n	70e0 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    706c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7070:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7072:	4b1c      	ldr	r3, [pc, #112]	; (70e4 <ready_thread+0x90>)
    7074:	4298      	cmp	r0, r3
    7076:	d109      	bne.n	708c <ready_thread+0x38>
    7078:	491b      	ldr	r1, [pc, #108]	; (70e8 <ready_thread+0x94>)
    707a:	481c      	ldr	r0, [pc, #112]	; (70ec <ready_thread+0x98>)
    707c:	4a1c      	ldr	r2, [pc, #112]	; (70f0 <ready_thread+0x9c>)
    707e:	23ba      	movs	r3, #186	; 0xba
    7080:	f002 fb47 	bl	9712 <printk>
    7084:	481a      	ldr	r0, [pc, #104]	; (70f0 <ready_thread+0x9c>)
    7086:	21ba      	movs	r1, #186	; 0xba
    7088:	f002 fa40 	bl	950c <assert_post_action>
	return list->head == list;
    708c:	4919      	ldr	r1, [pc, #100]	; (70f4 <ready_thread+0xa0>)
    708e:	460b      	mov	r3, r1
    7090:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7094:	4298      	cmp	r0, r3
    7096:	bf18      	it	ne
    7098:	4605      	movne	r5, r0
    709a:	2d00      	cmp	r5, #0
    709c:	461a      	mov	r2, r3
    709e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    70a0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    70a2:	bf38      	it	cc
    70a4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70a6:	b1b3      	cbz	r3, 70d6 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    70a8:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    70ac:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    70b0:	4286      	cmp	r6, r0
    70b2:	d00c      	beq.n	70ce <ready_thread+0x7a>
		return b2 - b1;
    70b4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    70b6:	2800      	cmp	r0, #0
    70b8:	dd09      	ble.n	70ce <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    70ba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    70bc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    70c0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    70c2:	605c      	str	r4, [r3, #4]
}
    70c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    70c8:	2000      	movs	r0, #0
    70ca:	f7ff bebd 	b.w	6e48 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    70ce:	42ab      	cmp	r3, r5
    70d0:	d001      	beq.n	70d6 <ready_thread+0x82>
    70d2:	681b      	ldr	r3, [r3, #0]
    70d4:	e7e7      	b.n	70a6 <ready_thread+0x52>
	node->prev = tail;
    70d6:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    70da:	602c      	str	r4, [r5, #0]
	list->tail = node;
    70dc:	624c      	str	r4, [r1, #36]	; 0x24
}
    70de:	e7f1      	b.n	70c4 <ready_thread+0x70>
}
    70e0:	bd70      	pop	{r4, r5, r6, pc}
    70e2:	bf00      	nop
    70e4:	200005b0 	.word	0x200005b0
    70e8:	0000bea6 	.word	0x0000bea6
    70ec:	0000a9a4 	.word	0x0000a9a4
    70f0:	0000be84 	.word	0x0000be84
    70f4:	20000e78 	.word	0x20000e78

000070f8 <z_ready_thread>:
{
    70f8:	b538      	push	{r3, r4, r5, lr}
    70fa:	4604      	mov	r4, r0
	__asm__ volatile(
    70fc:	f04f 0320 	mov.w	r3, #32
    7100:	f3ef 8511 	mrs	r5, BASEPRI
    7104:	f383 8812 	msr	BASEPRI_MAX, r3
    7108:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    710c:	4817      	ldr	r0, [pc, #92]	; (716c <z_ready_thread+0x74>)
    710e:	f001 f8e7 	bl	82e0 <z_spin_lock_valid>
    7112:	b968      	cbnz	r0, 7130 <z_ready_thread+0x38>
    7114:	4a16      	ldr	r2, [pc, #88]	; (7170 <z_ready_thread+0x78>)
    7116:	4917      	ldr	r1, [pc, #92]	; (7174 <z_ready_thread+0x7c>)
    7118:	4817      	ldr	r0, [pc, #92]	; (7178 <z_ready_thread+0x80>)
    711a:	2381      	movs	r3, #129	; 0x81
    711c:	f002 faf9 	bl	9712 <printk>
    7120:	4912      	ldr	r1, [pc, #72]	; (716c <z_ready_thread+0x74>)
    7122:	4816      	ldr	r0, [pc, #88]	; (717c <z_ready_thread+0x84>)
    7124:	f002 faf5 	bl	9712 <printk>
    7128:	4811      	ldr	r0, [pc, #68]	; (7170 <z_ready_thread+0x78>)
    712a:	2181      	movs	r1, #129	; 0x81
    712c:	f002 f9ee 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    7130:	480e      	ldr	r0, [pc, #56]	; (716c <z_ready_thread+0x74>)
    7132:	f001 f8f3 	bl	831c <z_spin_lock_set_owner>
			ready_thread(thread);
    7136:	4620      	mov	r0, r4
    7138:	f7ff ff8c 	bl	7054 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    713c:	480b      	ldr	r0, [pc, #44]	; (716c <z_ready_thread+0x74>)
    713e:	f001 f8dd 	bl	82fc <z_spin_unlock_valid>
    7142:	b968      	cbnz	r0, 7160 <z_ready_thread+0x68>
    7144:	4a0a      	ldr	r2, [pc, #40]	; (7170 <z_ready_thread+0x78>)
    7146:	490e      	ldr	r1, [pc, #56]	; (7180 <z_ready_thread+0x88>)
    7148:	480b      	ldr	r0, [pc, #44]	; (7178 <z_ready_thread+0x80>)
    714a:	23ac      	movs	r3, #172	; 0xac
    714c:	f002 fae1 	bl	9712 <printk>
    7150:	4906      	ldr	r1, [pc, #24]	; (716c <z_ready_thread+0x74>)
    7152:	480c      	ldr	r0, [pc, #48]	; (7184 <z_ready_thread+0x8c>)
    7154:	f002 fadd 	bl	9712 <printk>
    7158:	4805      	ldr	r0, [pc, #20]	; (7170 <z_ready_thread+0x78>)
    715a:	21ac      	movs	r1, #172	; 0xac
    715c:	f002 f9d6 	bl	950c <assert_post_action>
	__asm__ volatile(
    7160:	f385 8811 	msr	BASEPRI, r5
    7164:	f3bf 8f6f 	isb	sy
}
    7168:	bd38      	pop	{r3, r4, r5, pc}
    716a:	bf00      	nop
    716c:	20000eac 	.word	0x20000eac
    7170:	0000b314 	.word	0x0000b314
    7174:	0000b366 	.word	0x0000b366
    7178:	0000a9a4 	.word	0x0000a9a4
    717c:	0000b37b 	.word	0x0000b37b
    7180:	0000b33a 	.word	0x0000b33a
    7184:	0000b351 	.word	0x0000b351

00007188 <z_sched_start>:
{
    7188:	b538      	push	{r3, r4, r5, lr}
    718a:	4604      	mov	r4, r0
	__asm__ volatile(
    718c:	f04f 0320 	mov.w	r3, #32
    7190:	f3ef 8511 	mrs	r5, BASEPRI
    7194:	f383 8812 	msr	BASEPRI_MAX, r3
    7198:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    719c:	481d      	ldr	r0, [pc, #116]	; (7214 <z_sched_start+0x8c>)
    719e:	f001 f89f 	bl	82e0 <z_spin_lock_valid>
    71a2:	b968      	cbnz	r0, 71c0 <z_sched_start+0x38>
    71a4:	4a1c      	ldr	r2, [pc, #112]	; (7218 <z_sched_start+0x90>)
    71a6:	491d      	ldr	r1, [pc, #116]	; (721c <z_sched_start+0x94>)
    71a8:	481d      	ldr	r0, [pc, #116]	; (7220 <z_sched_start+0x98>)
    71aa:	2381      	movs	r3, #129	; 0x81
    71ac:	f002 fab1 	bl	9712 <printk>
    71b0:	4918      	ldr	r1, [pc, #96]	; (7214 <z_sched_start+0x8c>)
    71b2:	481c      	ldr	r0, [pc, #112]	; (7224 <z_sched_start+0x9c>)
    71b4:	f002 faad 	bl	9712 <printk>
    71b8:	4817      	ldr	r0, [pc, #92]	; (7218 <z_sched_start+0x90>)
    71ba:	2181      	movs	r1, #129	; 0x81
    71bc:	f002 f9a6 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    71c0:	4814      	ldr	r0, [pc, #80]	; (7214 <z_sched_start+0x8c>)
    71c2:	f001 f8ab 	bl	831c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    71c6:	7b63      	ldrb	r3, [r4, #13]
    71c8:	075a      	lsls	r2, r3, #29
    71ca:	d416      	bmi.n	71fa <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71cc:	4811      	ldr	r0, [pc, #68]	; (7214 <z_sched_start+0x8c>)
    71ce:	f001 f895 	bl	82fc <z_spin_unlock_valid>
    71d2:	b968      	cbnz	r0, 71f0 <z_sched_start+0x68>
    71d4:	4a10      	ldr	r2, [pc, #64]	; (7218 <z_sched_start+0x90>)
    71d6:	4914      	ldr	r1, [pc, #80]	; (7228 <z_sched_start+0xa0>)
    71d8:	4811      	ldr	r0, [pc, #68]	; (7220 <z_sched_start+0x98>)
    71da:	23ac      	movs	r3, #172	; 0xac
    71dc:	f002 fa99 	bl	9712 <printk>
    71e0:	490c      	ldr	r1, [pc, #48]	; (7214 <z_sched_start+0x8c>)
    71e2:	4812      	ldr	r0, [pc, #72]	; (722c <z_sched_start+0xa4>)
    71e4:	f002 fa95 	bl	9712 <printk>
    71e8:	480b      	ldr	r0, [pc, #44]	; (7218 <z_sched_start+0x90>)
    71ea:	21ac      	movs	r1, #172	; 0xac
    71ec:	f002 f98e 	bl	950c <assert_post_action>
	__asm__ volatile(
    71f0:	f385 8811 	msr	BASEPRI, r5
    71f4:	f3bf 8f6f 	isb	sy
}
    71f8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    71fa:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    71fe:	4620      	mov	r0, r4
    7200:	7363      	strb	r3, [r4, #13]
    7202:	f7ff ff27 	bl	7054 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7206:	4629      	mov	r1, r5
    7208:	4802      	ldr	r0, [pc, #8]	; (7214 <z_sched_start+0x8c>)
}
    720a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    720e:	f7ff bcd3 	b.w	6bb8 <z_reschedule>
    7212:	bf00      	nop
    7214:	20000eac 	.word	0x20000eac
    7218:	0000b314 	.word	0x0000b314
    721c:	0000b366 	.word	0x0000b366
    7220:	0000a9a4 	.word	0x0000a9a4
    7224:	0000b37b 	.word	0x0000b37b
    7228:	0000b33a 	.word	0x0000b33a
    722c:	0000b351 	.word	0x0000b351

00007230 <z_thread_timeout>:
{
    7230:	b570      	push	{r4, r5, r6, lr}
    7232:	4604      	mov	r4, r0
	__asm__ volatile(
    7234:	f04f 0320 	mov.w	r3, #32
    7238:	f3ef 8611 	mrs	r6, BASEPRI
    723c:	f383 8812 	msr	BASEPRI_MAX, r3
    7240:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7244:	4820      	ldr	r0, [pc, #128]	; (72c8 <z_thread_timeout+0x98>)
    7246:	f001 f84b 	bl	82e0 <z_spin_lock_valid>
    724a:	b968      	cbnz	r0, 7268 <z_thread_timeout+0x38>
    724c:	4a1f      	ldr	r2, [pc, #124]	; (72cc <z_thread_timeout+0x9c>)
    724e:	4920      	ldr	r1, [pc, #128]	; (72d0 <z_thread_timeout+0xa0>)
    7250:	4820      	ldr	r0, [pc, #128]	; (72d4 <z_thread_timeout+0xa4>)
    7252:	2381      	movs	r3, #129	; 0x81
    7254:	f002 fa5d 	bl	9712 <printk>
    7258:	491b      	ldr	r1, [pc, #108]	; (72c8 <z_thread_timeout+0x98>)
    725a:	481f      	ldr	r0, [pc, #124]	; (72d8 <z_thread_timeout+0xa8>)
    725c:	f002 fa59 	bl	9712 <printk>
    7260:	481a      	ldr	r0, [pc, #104]	; (72cc <z_thread_timeout+0x9c>)
    7262:	2181      	movs	r1, #129	; 0x81
    7264:	f002 f952 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    7268:	4817      	ldr	r0, [pc, #92]	; (72c8 <z_thread_timeout+0x98>)
    726a:	f001 f857 	bl	831c <z_spin_lock_set_owner>
		if (!killed) {
    726e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    7272:	f013 0f28 	tst.w	r3, #40	; 0x28
    7276:	d110      	bne.n	729a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    7278:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    727c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    7280:	b113      	cbz	r3, 7288 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    7282:	4628      	mov	r0, r5
    7284:	f7ff fd72 	bl	6d6c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7288:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    728c:	f023 0314 	bic.w	r3, r3, #20
    7290:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    7294:	4628      	mov	r0, r5
    7296:	f7ff fedd 	bl	7054 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    729a:	480b      	ldr	r0, [pc, #44]	; (72c8 <z_thread_timeout+0x98>)
    729c:	f001 f82e 	bl	82fc <z_spin_unlock_valid>
    72a0:	b968      	cbnz	r0, 72be <z_thread_timeout+0x8e>
    72a2:	4a0a      	ldr	r2, [pc, #40]	; (72cc <z_thread_timeout+0x9c>)
    72a4:	490d      	ldr	r1, [pc, #52]	; (72dc <z_thread_timeout+0xac>)
    72a6:	480b      	ldr	r0, [pc, #44]	; (72d4 <z_thread_timeout+0xa4>)
    72a8:	23ac      	movs	r3, #172	; 0xac
    72aa:	f002 fa32 	bl	9712 <printk>
    72ae:	4906      	ldr	r1, [pc, #24]	; (72c8 <z_thread_timeout+0x98>)
    72b0:	480b      	ldr	r0, [pc, #44]	; (72e0 <z_thread_timeout+0xb0>)
    72b2:	f002 fa2e 	bl	9712 <printk>
    72b6:	4805      	ldr	r0, [pc, #20]	; (72cc <z_thread_timeout+0x9c>)
    72b8:	21ac      	movs	r1, #172	; 0xac
    72ba:	f002 f927 	bl	950c <assert_post_action>
	__asm__ volatile(
    72be:	f386 8811 	msr	BASEPRI, r6
    72c2:	f3bf 8f6f 	isb	sy
}
    72c6:	bd70      	pop	{r4, r5, r6, pc}
    72c8:	20000eac 	.word	0x20000eac
    72cc:	0000b314 	.word	0x0000b314
    72d0:	0000b366 	.word	0x0000b366
    72d4:	0000a9a4 	.word	0x0000a9a4
    72d8:	0000b37b 	.word	0x0000b37b
    72dc:	0000b33a 	.word	0x0000b33a
    72e0:	0000b351 	.word	0x0000b351

000072e4 <unready_thread>:
{
    72e4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    72e6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    72ea:	7b43      	ldrb	r3, [r0, #13]
    72ec:	2a00      	cmp	r2, #0
{
    72ee:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    72f0:	da06      	bge.n	7300 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    72f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    72f6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    72f8:	4601      	mov	r1, r0
    72fa:	4806      	ldr	r0, [pc, #24]	; (7314 <unready_thread+0x30>)
    72fc:	f7ff fd14 	bl	6d28 <z_priq_dumb_remove>
	update_cache(thread == _current);
    7300:	4b05      	ldr	r3, [pc, #20]	; (7318 <unready_thread+0x34>)
    7302:	6898      	ldr	r0, [r3, #8]
    7304:	1b03      	subs	r3, r0, r4
    7306:	4258      	negs	r0, r3
}
    7308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    730c:	4158      	adcs	r0, r3
    730e:	f7ff bd9b 	b.w	6e48 <update_cache>
    7312:	bf00      	nop
    7314:	20000e98 	.word	0x20000e98
    7318:	20000e78 	.word	0x20000e78

0000731c <add_to_waitq_locked>:
{
    731c:	b538      	push	{r3, r4, r5, lr}
    731e:	4604      	mov	r4, r0
    7320:	460d      	mov	r5, r1
	unready_thread(thread);
    7322:	f7ff ffdf 	bl	72e4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7326:	7b63      	ldrb	r3, [r4, #13]
    7328:	f043 0302 	orr.w	r3, r3, #2
    732c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    732e:	b31d      	cbz	r5, 7378 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7330:	4b17      	ldr	r3, [pc, #92]	; (7390 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    7332:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7334:	429c      	cmp	r4, r3
    7336:	d109      	bne.n	734c <add_to_waitq_locked+0x30>
    7338:	4916      	ldr	r1, [pc, #88]	; (7394 <add_to_waitq_locked+0x78>)
    733a:	4817      	ldr	r0, [pc, #92]	; (7398 <add_to_waitq_locked+0x7c>)
    733c:	4a17      	ldr	r2, [pc, #92]	; (739c <add_to_waitq_locked+0x80>)
    733e:	23ba      	movs	r3, #186	; 0xba
    7340:	f002 f9e7 	bl	9712 <printk>
    7344:	4815      	ldr	r0, [pc, #84]	; (739c <add_to_waitq_locked+0x80>)
    7346:	21ba      	movs	r1, #186	; 0xba
    7348:	f002 f8e0 	bl	950c <assert_post_action>
	return list->head == list;
    734c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    734e:	429d      	cmp	r5, r3
    7350:	bf08      	it	eq
    7352:	2300      	moveq	r3, #0
    7354:	2b00      	cmp	r3, #0
    7356:	bf38      	it	cc
    7358:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    735a:	b19b      	cbz	r3, 7384 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    735c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7360:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    7364:	4291      	cmp	r1, r2
    7366:	d008      	beq.n	737a <add_to_waitq_locked+0x5e>
		return b2 - b1;
    7368:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    736a:	2a00      	cmp	r2, #0
    736c:	dd05      	ble.n	737a <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    736e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7370:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7374:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7376:	605c      	str	r4, [r3, #4]
}
    7378:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    737a:	686a      	ldr	r2, [r5, #4]
    737c:	4293      	cmp	r3, r2
    737e:	d001      	beq.n	7384 <add_to_waitq_locked+0x68>
    7380:	681b      	ldr	r3, [r3, #0]
    7382:	e7ea      	b.n	735a <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    7384:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    7386:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    738a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    738c:	606c      	str	r4, [r5, #4]
    738e:	e7f3      	b.n	7378 <add_to_waitq_locked+0x5c>
    7390:	200005b0 	.word	0x200005b0
    7394:	0000bea6 	.word	0x0000bea6
    7398:	0000a9a4 	.word	0x0000a9a4
    739c:	0000be84 	.word	0x0000be84

000073a0 <pend>:
{
    73a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73a4:	4604      	mov	r4, r0
    73a6:	460d      	mov	r5, r1
    73a8:	4616      	mov	r6, r2
    73aa:	461f      	mov	r7, r3
	__asm__ volatile(
    73ac:	f04f 0320 	mov.w	r3, #32
    73b0:	f3ef 8811 	mrs	r8, BASEPRI
    73b4:	f383 8812 	msr	BASEPRI_MAX, r3
    73b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    73bc:	481f      	ldr	r0, [pc, #124]	; (743c <pend+0x9c>)
    73be:	f000 ff8f 	bl	82e0 <z_spin_lock_valid>
    73c2:	b968      	cbnz	r0, 73e0 <pend+0x40>
    73c4:	4a1e      	ldr	r2, [pc, #120]	; (7440 <pend+0xa0>)
    73c6:	491f      	ldr	r1, [pc, #124]	; (7444 <pend+0xa4>)
    73c8:	481f      	ldr	r0, [pc, #124]	; (7448 <pend+0xa8>)
    73ca:	2381      	movs	r3, #129	; 0x81
    73cc:	f002 f9a1 	bl	9712 <printk>
    73d0:	491a      	ldr	r1, [pc, #104]	; (743c <pend+0x9c>)
    73d2:	481e      	ldr	r0, [pc, #120]	; (744c <pend+0xac>)
    73d4:	f002 f99d 	bl	9712 <printk>
    73d8:	4819      	ldr	r0, [pc, #100]	; (7440 <pend+0xa0>)
    73da:	2181      	movs	r1, #129	; 0x81
    73dc:	f002 f896 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    73e0:	4816      	ldr	r0, [pc, #88]	; (743c <pend+0x9c>)
    73e2:	f000 ff9b 	bl	831c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    73e6:	4620      	mov	r0, r4
    73e8:	4629      	mov	r1, r5
    73ea:	f7ff ff97 	bl	731c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    73ee:	4813      	ldr	r0, [pc, #76]	; (743c <pend+0x9c>)
    73f0:	f000 ff84 	bl	82fc <z_spin_unlock_valid>
    73f4:	b968      	cbnz	r0, 7412 <pend+0x72>
    73f6:	4a12      	ldr	r2, [pc, #72]	; (7440 <pend+0xa0>)
    73f8:	4915      	ldr	r1, [pc, #84]	; (7450 <pend+0xb0>)
    73fa:	4813      	ldr	r0, [pc, #76]	; (7448 <pend+0xa8>)
    73fc:	23ac      	movs	r3, #172	; 0xac
    73fe:	f002 f988 	bl	9712 <printk>
    7402:	490e      	ldr	r1, [pc, #56]	; (743c <pend+0x9c>)
    7404:	4813      	ldr	r0, [pc, #76]	; (7454 <pend+0xb4>)
    7406:	f002 f984 	bl	9712 <printk>
    740a:	480d      	ldr	r0, [pc, #52]	; (7440 <pend+0xa0>)
    740c:	21ac      	movs	r1, #172	; 0xac
    740e:	f002 f87d 	bl	950c <assert_post_action>
	__asm__ volatile(
    7412:	f388 8811 	msr	BASEPRI, r8
    7416:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    741a:	1c7b      	adds	r3, r7, #1
    741c:	bf08      	it	eq
    741e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    7422:	d008      	beq.n	7436 <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7424:	4632      	mov	r2, r6
    7426:	463b      	mov	r3, r7
    7428:	f104 0018 	add.w	r0, r4, #24
    742c:	490a      	ldr	r1, [pc, #40]	; (7458 <pend+0xb8>)
}
    742e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7432:	f000 bfcb 	b.w	83cc <z_add_timeout>
    7436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    743a:	bf00      	nop
    743c:	20000eac 	.word	0x20000eac
    7440:	0000b314 	.word	0x0000b314
    7444:	0000b366 	.word	0x0000b366
    7448:	0000a9a4 	.word	0x0000a9a4
    744c:	0000b37b 	.word	0x0000b37b
    7450:	0000b33a 	.word	0x0000b33a
    7454:	0000b351 	.word	0x0000b351
    7458:	00007231 	.word	0x00007231

0000745c <z_pend_curr>:
{
    745c:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    745e:	4b11      	ldr	r3, [pc, #68]	; (74a4 <z_pend_curr+0x48>)
{
    7460:	4604      	mov	r4, r0
	pending_current = _current;
    7462:	6898      	ldr	r0, [r3, #8]
    7464:	4b10      	ldr	r3, [pc, #64]	; (74a8 <z_pend_curr+0x4c>)
{
    7466:	460d      	mov	r5, r1
	pending_current = _current;
    7468:	6018      	str	r0, [r3, #0]
{
    746a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    746c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7470:	f7ff ff96 	bl	73a0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7474:	4620      	mov	r0, r4
    7476:	f000 ff41 	bl	82fc <z_spin_unlock_valid>
    747a:	b968      	cbnz	r0, 7498 <z_pend_curr+0x3c>
    747c:	4a0b      	ldr	r2, [pc, #44]	; (74ac <z_pend_curr+0x50>)
    747e:	490c      	ldr	r1, [pc, #48]	; (74b0 <z_pend_curr+0x54>)
    7480:	480c      	ldr	r0, [pc, #48]	; (74b4 <z_pend_curr+0x58>)
    7482:	23c3      	movs	r3, #195	; 0xc3
    7484:	f002 f945 	bl	9712 <printk>
    7488:	480b      	ldr	r0, [pc, #44]	; (74b8 <z_pend_curr+0x5c>)
    748a:	4621      	mov	r1, r4
    748c:	f002 f941 	bl	9712 <printk>
    7490:	4806      	ldr	r0, [pc, #24]	; (74ac <z_pend_curr+0x50>)
    7492:	21c3      	movs	r1, #195	; 0xc3
    7494:	f002 f83a 	bl	950c <assert_post_action>
    7498:	4628      	mov	r0, r5
}
    749a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    749e:	f7fb bda9 	b.w	2ff4 <arch_swap>
    74a2:	bf00      	nop
    74a4:	20000e78 	.word	0x20000e78
    74a8:	20000ea8 	.word	0x20000ea8
    74ac:	0000b314 	.word	0x0000b314
    74b0:	0000b33a 	.word	0x0000b33a
    74b4:	0000a9a4 	.word	0x0000a9a4
    74b8:	0000b351 	.word	0x0000b351

000074bc <z_set_prio>:
{
    74bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74be:	4604      	mov	r4, r0
    74c0:	460e      	mov	r6, r1
	__asm__ volatile(
    74c2:	f04f 0320 	mov.w	r3, #32
    74c6:	f3ef 8711 	mrs	r7, BASEPRI
    74ca:	f383 8812 	msr	BASEPRI_MAX, r3
    74ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    74d2:	483c      	ldr	r0, [pc, #240]	; (75c4 <z_set_prio+0x108>)
    74d4:	f000 ff04 	bl	82e0 <z_spin_lock_valid>
    74d8:	b968      	cbnz	r0, 74f6 <z_set_prio+0x3a>
    74da:	4a3b      	ldr	r2, [pc, #236]	; (75c8 <z_set_prio+0x10c>)
    74dc:	493b      	ldr	r1, [pc, #236]	; (75cc <z_set_prio+0x110>)
    74de:	483c      	ldr	r0, [pc, #240]	; (75d0 <z_set_prio+0x114>)
    74e0:	2381      	movs	r3, #129	; 0x81
    74e2:	f002 f916 	bl	9712 <printk>
    74e6:	4937      	ldr	r1, [pc, #220]	; (75c4 <z_set_prio+0x108>)
    74e8:	483a      	ldr	r0, [pc, #232]	; (75d4 <z_set_prio+0x118>)
    74ea:	f002 f912 	bl	9712 <printk>
    74ee:	4836      	ldr	r0, [pc, #216]	; (75c8 <z_set_prio+0x10c>)
    74f0:	2181      	movs	r1, #129	; 0x81
    74f2:	f002 f80b 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    74f6:	4833      	ldr	r0, [pc, #204]	; (75c4 <z_set_prio+0x108>)
    74f8:	f000 ff10 	bl	831c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    74fc:	7b63      	ldrb	r3, [r4, #13]
    74fe:	06da      	lsls	r2, r3, #27
    7500:	b276      	sxtb	r6, r6
    7502:	d15c      	bne.n	75be <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    7504:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    7506:	2d00      	cmp	r5, #0
    7508:	d159      	bne.n	75be <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    750a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    750e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7510:	4831      	ldr	r0, [pc, #196]	; (75d8 <z_set_prio+0x11c>)
    7512:	4621      	mov	r1, r4
    7514:	f7ff fc08 	bl	6d28 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7518:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    751a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    751c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7520:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7522:	4b2e      	ldr	r3, [pc, #184]	; (75dc <z_set_prio+0x120>)
    7524:	429c      	cmp	r4, r3
    7526:	d109      	bne.n	753c <z_set_prio+0x80>
    7528:	492d      	ldr	r1, [pc, #180]	; (75e0 <z_set_prio+0x124>)
    752a:	4829      	ldr	r0, [pc, #164]	; (75d0 <z_set_prio+0x114>)
    752c:	4a2d      	ldr	r2, [pc, #180]	; (75e4 <z_set_prio+0x128>)
    752e:	23ba      	movs	r3, #186	; 0xba
    7530:	f002 f8ef 	bl	9712 <printk>
    7534:	482b      	ldr	r0, [pc, #172]	; (75e4 <z_set_prio+0x128>)
    7536:	21ba      	movs	r1, #186	; 0xba
    7538:	f001 ffe8 	bl	950c <assert_post_action>
	return list->head == list;
    753c:	492a      	ldr	r1, [pc, #168]	; (75e8 <z_set_prio+0x12c>)
    753e:	460b      	mov	r3, r1
    7540:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7544:	4298      	cmp	r0, r3
    7546:	bf18      	it	ne
    7548:	4605      	movne	r5, r0
    754a:	2d00      	cmp	r5, #0
    754c:	461a      	mov	r2, r3
    754e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7550:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    7552:	bf38      	it	cc
    7554:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7556:	b36b      	cbz	r3, 75b4 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    7558:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    755c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    7560:	4286      	cmp	r6, r0
    7562:	d023      	beq.n	75ac <z_set_prio+0xf0>
		return b2 - b1;
    7564:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7566:	2800      	cmp	r0, #0
    7568:	dd20      	ble.n	75ac <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    756a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    756c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7570:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7572:	605c      	str	r4, [r3, #4]
			update_cache(1);
    7574:	2001      	movs	r0, #1
    7576:	f7ff fc67 	bl	6e48 <update_cache>
    757a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    757c:	4811      	ldr	r0, [pc, #68]	; (75c4 <z_set_prio+0x108>)
    757e:	f000 febd 	bl	82fc <z_spin_unlock_valid>
    7582:	b968      	cbnz	r0, 75a0 <z_set_prio+0xe4>
    7584:	4a10      	ldr	r2, [pc, #64]	; (75c8 <z_set_prio+0x10c>)
    7586:	4919      	ldr	r1, [pc, #100]	; (75ec <z_set_prio+0x130>)
    7588:	4811      	ldr	r0, [pc, #68]	; (75d0 <z_set_prio+0x114>)
    758a:	23ac      	movs	r3, #172	; 0xac
    758c:	f002 f8c1 	bl	9712 <printk>
    7590:	490c      	ldr	r1, [pc, #48]	; (75c4 <z_set_prio+0x108>)
    7592:	4817      	ldr	r0, [pc, #92]	; (75f0 <z_set_prio+0x134>)
    7594:	f002 f8bd 	bl	9712 <printk>
    7598:	480b      	ldr	r0, [pc, #44]	; (75c8 <z_set_prio+0x10c>)
    759a:	21ac      	movs	r1, #172	; 0xac
    759c:	f001 ffb6 	bl	950c <assert_post_action>
	__asm__ volatile(
    75a0:	f387 8811 	msr	BASEPRI, r7
    75a4:	f3bf 8f6f 	isb	sy
}
    75a8:	4620      	mov	r0, r4
    75aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    75ac:	42ab      	cmp	r3, r5
    75ae:	d001      	beq.n	75b4 <z_set_prio+0xf8>
    75b0:	681b      	ldr	r3, [r3, #0]
    75b2:	e7d0      	b.n	7556 <z_set_prio+0x9a>
	node->prev = tail;
    75b4:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    75b8:	602c      	str	r4, [r5, #0]
	list->tail = node;
    75ba:	624c      	str	r4, [r1, #36]	; 0x24
}
    75bc:	e7da      	b.n	7574 <z_set_prio+0xb8>
			thread->base.prio = prio;
    75be:	73a6      	strb	r6, [r4, #14]
    75c0:	2400      	movs	r4, #0
    75c2:	e7db      	b.n	757c <z_set_prio+0xc0>
    75c4:	20000eac 	.word	0x20000eac
    75c8:	0000b314 	.word	0x0000b314
    75cc:	0000b366 	.word	0x0000b366
    75d0:	0000a9a4 	.word	0x0000a9a4
    75d4:	0000b37b 	.word	0x0000b37b
    75d8:	20000e98 	.word	0x20000e98
    75dc:	200005b0 	.word	0x200005b0
    75e0:	0000bea6 	.word	0x0000bea6
    75e4:	0000be84 	.word	0x0000be84
    75e8:	20000e78 	.word	0x20000e78
    75ec:	0000b33a 	.word	0x0000b33a
    75f0:	0000b351 	.word	0x0000b351

000075f4 <z_impl_k_thread_suspend>:
{
    75f4:	b570      	push	{r4, r5, r6, lr}
    75f6:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
    75f8:	3018      	adds	r0, #24
    75fa:	f000 ffbb 	bl	8574 <z_abort_timeout>
	__asm__ volatile(
    75fe:	f04f 0320 	mov.w	r3, #32
    7602:	f3ef 8611 	mrs	r6, BASEPRI
    7606:	f383 8812 	msr	BASEPRI_MAX, r3
    760a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    760e:	4825      	ldr	r0, [pc, #148]	; (76a4 <z_impl_k_thread_suspend+0xb0>)
    7610:	f000 fe66 	bl	82e0 <z_spin_lock_valid>
    7614:	b968      	cbnz	r0, 7632 <z_impl_k_thread_suspend+0x3e>
    7616:	4a24      	ldr	r2, [pc, #144]	; (76a8 <z_impl_k_thread_suspend+0xb4>)
    7618:	4924      	ldr	r1, [pc, #144]	; (76ac <z_impl_k_thread_suspend+0xb8>)
    761a:	4825      	ldr	r0, [pc, #148]	; (76b0 <z_impl_k_thread_suspend+0xbc>)
    761c:	2381      	movs	r3, #129	; 0x81
    761e:	f002 f878 	bl	9712 <printk>
    7622:	4920      	ldr	r1, [pc, #128]	; (76a4 <z_impl_k_thread_suspend+0xb0>)
    7624:	4823      	ldr	r0, [pc, #140]	; (76b4 <z_impl_k_thread_suspend+0xc0>)
    7626:	f002 f874 	bl	9712 <printk>
    762a:	481f      	ldr	r0, [pc, #124]	; (76a8 <z_impl_k_thread_suspend+0xb4>)
    762c:	2181      	movs	r1, #129	; 0x81
    762e:	f001 ff6d 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    7632:	481c      	ldr	r0, [pc, #112]	; (76a4 <z_impl_k_thread_suspend+0xb0>)
    7634:	f000 fe72 	bl	831c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    7638:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    763c:	7b63      	ldrb	r3, [r4, #13]
    763e:	2a00      	cmp	r2, #0
    7640:	da06      	bge.n	7650 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    7646:	481c      	ldr	r0, [pc, #112]	; (76b8 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7648:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    764a:	4621      	mov	r1, r4
    764c:	f7ff fb6c 	bl	6d28 <z_priq_dumb_remove>
		update_cache(thread == _current);
    7650:	4d1a      	ldr	r5, [pc, #104]	; (76bc <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7652:	7b63      	ldrb	r3, [r4, #13]
    7654:	68a8      	ldr	r0, [r5, #8]
    7656:	f043 0310 	orr.w	r3, r3, #16
    765a:	7363      	strb	r3, [r4, #13]
    765c:	1b03      	subs	r3, r0, r4
    765e:	4258      	negs	r0, r3
    7660:	4158      	adcs	r0, r3
    7662:	f7ff fbf1 	bl	6e48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7666:	480f      	ldr	r0, [pc, #60]	; (76a4 <z_impl_k_thread_suspend+0xb0>)
    7668:	f000 fe48 	bl	82fc <z_spin_unlock_valid>
    766c:	b968      	cbnz	r0, 768a <z_impl_k_thread_suspend+0x96>
    766e:	4a0e      	ldr	r2, [pc, #56]	; (76a8 <z_impl_k_thread_suspend+0xb4>)
    7670:	4913      	ldr	r1, [pc, #76]	; (76c0 <z_impl_k_thread_suspend+0xcc>)
    7672:	480f      	ldr	r0, [pc, #60]	; (76b0 <z_impl_k_thread_suspend+0xbc>)
    7674:	23ac      	movs	r3, #172	; 0xac
    7676:	f002 f84c 	bl	9712 <printk>
    767a:	490a      	ldr	r1, [pc, #40]	; (76a4 <z_impl_k_thread_suspend+0xb0>)
    767c:	4811      	ldr	r0, [pc, #68]	; (76c4 <z_impl_k_thread_suspend+0xd0>)
    767e:	f002 f848 	bl	9712 <printk>
    7682:	4809      	ldr	r0, [pc, #36]	; (76a8 <z_impl_k_thread_suspend+0xb4>)
    7684:	21ac      	movs	r1, #172	; 0xac
    7686:	f001 ff41 	bl	950c <assert_post_action>
	__asm__ volatile(
    768a:	f386 8811 	msr	BASEPRI, r6
    768e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    7692:	68ab      	ldr	r3, [r5, #8]
    7694:	42a3      	cmp	r3, r4
    7696:	d103      	bne.n	76a0 <z_impl_k_thread_suspend+0xac>
}
    7698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    769c:	f002 be49 	b.w	a332 <z_reschedule_unlocked>
}
    76a0:	bd70      	pop	{r4, r5, r6, pc}
    76a2:	bf00      	nop
    76a4:	20000eac 	.word	0x20000eac
    76a8:	0000b314 	.word	0x0000b314
    76ac:	0000b366 	.word	0x0000b366
    76b0:	0000a9a4 	.word	0x0000a9a4
    76b4:	0000b37b 	.word	0x0000b37b
    76b8:	20000e98 	.word	0x20000e98
    76bc:	20000e78 	.word	0x20000e78
    76c0:	0000b33a 	.word	0x0000b33a
    76c4:	0000b351 	.word	0x0000b351

000076c8 <k_sched_unlock>:
{
    76c8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    76ca:	f04f 0320 	mov.w	r3, #32
    76ce:	f3ef 8511 	mrs	r5, BASEPRI
    76d2:	f383 8812 	msr	BASEPRI_MAX, r3
    76d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    76da:	482d      	ldr	r0, [pc, #180]	; (7790 <k_sched_unlock+0xc8>)
    76dc:	f000 fe00 	bl	82e0 <z_spin_lock_valid>
    76e0:	b968      	cbnz	r0, 76fe <k_sched_unlock+0x36>
    76e2:	4a2c      	ldr	r2, [pc, #176]	; (7794 <k_sched_unlock+0xcc>)
    76e4:	492c      	ldr	r1, [pc, #176]	; (7798 <k_sched_unlock+0xd0>)
    76e6:	482d      	ldr	r0, [pc, #180]	; (779c <k_sched_unlock+0xd4>)
    76e8:	2381      	movs	r3, #129	; 0x81
    76ea:	f002 f812 	bl	9712 <printk>
    76ee:	4928      	ldr	r1, [pc, #160]	; (7790 <k_sched_unlock+0xc8>)
    76f0:	482b      	ldr	r0, [pc, #172]	; (77a0 <k_sched_unlock+0xd8>)
    76f2:	f002 f80e 	bl	9712 <printk>
    76f6:	4827      	ldr	r0, [pc, #156]	; (7794 <k_sched_unlock+0xcc>)
    76f8:	2181      	movs	r1, #129	; 0x81
    76fa:	f001 ff07 	bl	950c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    76fe:	4c29      	ldr	r4, [pc, #164]	; (77a4 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    7700:	4823      	ldr	r0, [pc, #140]	; (7790 <k_sched_unlock+0xc8>)
    7702:	f000 fe0b 	bl	831c <z_spin_lock_set_owner>
    7706:	68a2      	ldr	r2, [r4, #8]
    7708:	7bd2      	ldrb	r2, [r2, #15]
    770a:	b972      	cbnz	r2, 772a <k_sched_unlock+0x62>
    770c:	4926      	ldr	r1, [pc, #152]	; (77a8 <k_sched_unlock+0xe0>)
    770e:	4a27      	ldr	r2, [pc, #156]	; (77ac <k_sched_unlock+0xe4>)
    7710:	4822      	ldr	r0, [pc, #136]	; (779c <k_sched_unlock+0xd4>)
    7712:	f240 3385 	movw	r3, #901	; 0x385
    7716:	f001 fffc 	bl	9712 <printk>
    771a:	4825      	ldr	r0, [pc, #148]	; (77b0 <k_sched_unlock+0xe8>)
    771c:	f001 fff9 	bl	9712 <printk>
    7720:	4822      	ldr	r0, [pc, #136]	; (77ac <k_sched_unlock+0xe4>)
    7722:	f240 3185 	movw	r1, #901	; 0x385
    7726:	f001 fef1 	bl	950c <assert_post_action>
    772a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    772e:	b173      	cbz	r3, 774e <k_sched_unlock+0x86>
    7730:	4920      	ldr	r1, [pc, #128]	; (77b4 <k_sched_unlock+0xec>)
    7732:	4a1e      	ldr	r2, [pc, #120]	; (77ac <k_sched_unlock+0xe4>)
    7734:	4819      	ldr	r0, [pc, #100]	; (779c <k_sched_unlock+0xd4>)
    7736:	f240 3386 	movw	r3, #902	; 0x386
    773a:	f001 ffea 	bl	9712 <printk>
    773e:	481c      	ldr	r0, [pc, #112]	; (77b0 <k_sched_unlock+0xe8>)
    7740:	f001 ffe7 	bl	9712 <printk>
    7744:	4819      	ldr	r0, [pc, #100]	; (77ac <k_sched_unlock+0xe4>)
    7746:	f240 3186 	movw	r1, #902	; 0x386
    774a:	f001 fedf 	bl	950c <assert_post_action>
		++_current->base.sched_locked;
    774e:	68a2      	ldr	r2, [r4, #8]
    7750:	7bd3      	ldrb	r3, [r2, #15]
    7752:	3301      	adds	r3, #1
		update_cache(0);
    7754:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    7756:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7758:	f7ff fb76 	bl	6e48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    775c:	480c      	ldr	r0, [pc, #48]	; (7790 <k_sched_unlock+0xc8>)
    775e:	f000 fdcd 	bl	82fc <z_spin_unlock_valid>
    7762:	b968      	cbnz	r0, 7780 <k_sched_unlock+0xb8>
    7764:	4a0b      	ldr	r2, [pc, #44]	; (7794 <k_sched_unlock+0xcc>)
    7766:	4914      	ldr	r1, [pc, #80]	; (77b8 <k_sched_unlock+0xf0>)
    7768:	480c      	ldr	r0, [pc, #48]	; (779c <k_sched_unlock+0xd4>)
    776a:	23ac      	movs	r3, #172	; 0xac
    776c:	f001 ffd1 	bl	9712 <printk>
    7770:	4907      	ldr	r1, [pc, #28]	; (7790 <k_sched_unlock+0xc8>)
    7772:	4812      	ldr	r0, [pc, #72]	; (77bc <k_sched_unlock+0xf4>)
    7774:	f001 ffcd 	bl	9712 <printk>
    7778:	4806      	ldr	r0, [pc, #24]	; (7794 <k_sched_unlock+0xcc>)
    777a:	21ac      	movs	r1, #172	; 0xac
    777c:	f001 fec6 	bl	950c <assert_post_action>
	__asm__ volatile(
    7780:	f385 8811 	msr	BASEPRI, r5
    7784:	f3bf 8f6f 	isb	sy
}
    7788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    778c:	f002 bdd1 	b.w	a332 <z_reschedule_unlocked>
    7790:	20000eac 	.word	0x20000eac
    7794:	0000b314 	.word	0x0000b314
    7798:	0000b366 	.word	0x0000b366
    779c:	0000a9a4 	.word	0x0000a9a4
    77a0:	0000b37b 	.word	0x0000b37b
    77a4:	20000e78 	.word	0x20000e78
    77a8:	0000bf05 	.word	0x0000bf05
    77ac:	0000be84 	.word	0x0000be84
    77b0:	0000bd20 	.word	0x0000bd20
    77b4:	0000bca7 	.word	0x0000bca7
    77b8:	0000b33a 	.word	0x0000b33a
    77bc:	0000b351 	.word	0x0000b351

000077c0 <z_unpend1_no_timeout>:
{
    77c0:	b538      	push	{r3, r4, r5, lr}
    77c2:	4604      	mov	r4, r0
	__asm__ volatile(
    77c4:	f04f 0320 	mov.w	r3, #32
    77c8:	f3ef 8511 	mrs	r5, BASEPRI
    77cc:	f383 8812 	msr	BASEPRI_MAX, r3
    77d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77d4:	4819      	ldr	r0, [pc, #100]	; (783c <z_unpend1_no_timeout+0x7c>)
    77d6:	f000 fd83 	bl	82e0 <z_spin_lock_valid>
    77da:	b968      	cbnz	r0, 77f8 <z_unpend1_no_timeout+0x38>
    77dc:	4a18      	ldr	r2, [pc, #96]	; (7840 <z_unpend1_no_timeout+0x80>)
    77de:	4919      	ldr	r1, [pc, #100]	; (7844 <z_unpend1_no_timeout+0x84>)
    77e0:	4819      	ldr	r0, [pc, #100]	; (7848 <z_unpend1_no_timeout+0x88>)
    77e2:	2381      	movs	r3, #129	; 0x81
    77e4:	f001 ff95 	bl	9712 <printk>
    77e8:	4914      	ldr	r1, [pc, #80]	; (783c <z_unpend1_no_timeout+0x7c>)
    77ea:	4818      	ldr	r0, [pc, #96]	; (784c <z_unpend1_no_timeout+0x8c>)
    77ec:	f001 ff91 	bl	9712 <printk>
    77f0:	4813      	ldr	r0, [pc, #76]	; (7840 <z_unpend1_no_timeout+0x80>)
    77f2:	2181      	movs	r1, #129	; 0x81
    77f4:	f001 fe8a 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    77f8:	4810      	ldr	r0, [pc, #64]	; (783c <z_unpend1_no_timeout+0x7c>)
    77fa:	f000 fd8f 	bl	831c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    77fe:	4620      	mov	r0, r4
    7800:	f002 fda1 	bl	a346 <z_priq_dumb_best>
		if (thread != NULL) {
    7804:	4604      	mov	r4, r0
    7806:	b108      	cbz	r0, 780c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    7808:	f7ff fab0 	bl	6d6c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    780c:	480b      	ldr	r0, [pc, #44]	; (783c <z_unpend1_no_timeout+0x7c>)
    780e:	f000 fd75 	bl	82fc <z_spin_unlock_valid>
    7812:	b968      	cbnz	r0, 7830 <z_unpend1_no_timeout+0x70>
    7814:	4a0a      	ldr	r2, [pc, #40]	; (7840 <z_unpend1_no_timeout+0x80>)
    7816:	490e      	ldr	r1, [pc, #56]	; (7850 <z_unpend1_no_timeout+0x90>)
    7818:	480b      	ldr	r0, [pc, #44]	; (7848 <z_unpend1_no_timeout+0x88>)
    781a:	23ac      	movs	r3, #172	; 0xac
    781c:	f001 ff79 	bl	9712 <printk>
    7820:	4906      	ldr	r1, [pc, #24]	; (783c <z_unpend1_no_timeout+0x7c>)
    7822:	480c      	ldr	r0, [pc, #48]	; (7854 <z_unpend1_no_timeout+0x94>)
    7824:	f001 ff75 	bl	9712 <printk>
    7828:	4805      	ldr	r0, [pc, #20]	; (7840 <z_unpend1_no_timeout+0x80>)
    782a:	21ac      	movs	r1, #172	; 0xac
    782c:	f001 fe6e 	bl	950c <assert_post_action>
	__asm__ volatile(
    7830:	f385 8811 	msr	BASEPRI, r5
    7834:	f3bf 8f6f 	isb	sy
}
    7838:	4620      	mov	r0, r4
    783a:	bd38      	pop	{r3, r4, r5, pc}
    783c:	20000eac 	.word	0x20000eac
    7840:	0000b314 	.word	0x0000b314
    7844:	0000b366 	.word	0x0000b366
    7848:	0000a9a4 	.word	0x0000a9a4
    784c:	0000b37b 	.word	0x0000b37b
    7850:	0000b33a 	.word	0x0000b33a
    7854:	0000b351 	.word	0x0000b351

00007858 <z_unpend_first_thread>:
{
    7858:	b538      	push	{r3, r4, r5, lr}
    785a:	4604      	mov	r4, r0
	__asm__ volatile(
    785c:	f04f 0320 	mov.w	r3, #32
    7860:	f3ef 8511 	mrs	r5, BASEPRI
    7864:	f383 8812 	msr	BASEPRI_MAX, r3
    7868:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    786c:	481b      	ldr	r0, [pc, #108]	; (78dc <z_unpend_first_thread+0x84>)
    786e:	f000 fd37 	bl	82e0 <z_spin_lock_valid>
    7872:	b968      	cbnz	r0, 7890 <z_unpend_first_thread+0x38>
    7874:	4a1a      	ldr	r2, [pc, #104]	; (78e0 <z_unpend_first_thread+0x88>)
    7876:	491b      	ldr	r1, [pc, #108]	; (78e4 <z_unpend_first_thread+0x8c>)
    7878:	481b      	ldr	r0, [pc, #108]	; (78e8 <z_unpend_first_thread+0x90>)
    787a:	2381      	movs	r3, #129	; 0x81
    787c:	f001 ff49 	bl	9712 <printk>
    7880:	4916      	ldr	r1, [pc, #88]	; (78dc <z_unpend_first_thread+0x84>)
    7882:	481a      	ldr	r0, [pc, #104]	; (78ec <z_unpend_first_thread+0x94>)
    7884:	f001 ff45 	bl	9712 <printk>
    7888:	4815      	ldr	r0, [pc, #84]	; (78e0 <z_unpend_first_thread+0x88>)
    788a:	2181      	movs	r1, #129	; 0x81
    788c:	f001 fe3e 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    7890:	4812      	ldr	r0, [pc, #72]	; (78dc <z_unpend_first_thread+0x84>)
    7892:	f000 fd43 	bl	831c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    7896:	4620      	mov	r0, r4
    7898:	f002 fd55 	bl	a346 <z_priq_dumb_best>
		if (thread != NULL) {
    789c:	4604      	mov	r4, r0
    789e:	b128      	cbz	r0, 78ac <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    78a0:	f7ff fa64 	bl	6d6c <unpend_thread_no_timeout>
    78a4:	f104 0018 	add.w	r0, r4, #24
    78a8:	f000 fe64 	bl	8574 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78ac:	480b      	ldr	r0, [pc, #44]	; (78dc <z_unpend_first_thread+0x84>)
    78ae:	f000 fd25 	bl	82fc <z_spin_unlock_valid>
    78b2:	b968      	cbnz	r0, 78d0 <z_unpend_first_thread+0x78>
    78b4:	4a0a      	ldr	r2, [pc, #40]	; (78e0 <z_unpend_first_thread+0x88>)
    78b6:	490e      	ldr	r1, [pc, #56]	; (78f0 <z_unpend_first_thread+0x98>)
    78b8:	480b      	ldr	r0, [pc, #44]	; (78e8 <z_unpend_first_thread+0x90>)
    78ba:	23ac      	movs	r3, #172	; 0xac
    78bc:	f001 ff29 	bl	9712 <printk>
    78c0:	4906      	ldr	r1, [pc, #24]	; (78dc <z_unpend_first_thread+0x84>)
    78c2:	480c      	ldr	r0, [pc, #48]	; (78f4 <z_unpend_first_thread+0x9c>)
    78c4:	f001 ff25 	bl	9712 <printk>
    78c8:	4805      	ldr	r0, [pc, #20]	; (78e0 <z_unpend_first_thread+0x88>)
    78ca:	21ac      	movs	r1, #172	; 0xac
    78cc:	f001 fe1e 	bl	950c <assert_post_action>
	__asm__ volatile(
    78d0:	f385 8811 	msr	BASEPRI, r5
    78d4:	f3bf 8f6f 	isb	sy
}
    78d8:	4620      	mov	r0, r4
    78da:	bd38      	pop	{r3, r4, r5, pc}
    78dc:	20000eac 	.word	0x20000eac
    78e0:	0000b314 	.word	0x0000b314
    78e4:	0000b366 	.word	0x0000b366
    78e8:	0000a9a4 	.word	0x0000a9a4
    78ec:	0000b37b 	.word	0x0000b37b
    78f0:	0000b33a 	.word	0x0000b33a
    78f4:	0000b351 	.word	0x0000b351

000078f8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    78f8:	4b04      	ldr	r3, [pc, #16]	; (790c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    78fa:	2100      	movs	r1, #0
    78fc:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    7900:	e9c3 2208 	strd	r2, r2, [r3, #32]
    7904:	4608      	mov	r0, r1
    7906:	f7ff b8a9 	b.w	6a5c <k_sched_time_slice_set>
    790a:	bf00      	nop
    790c:	20000e78 	.word	0x20000e78

00007910 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    7910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7912:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7916:	b173      	cbz	r3, 7936 <z_impl_k_yield+0x26>
    7918:	4941      	ldr	r1, [pc, #260]	; (7a20 <z_impl_k_yield+0x110>)
    791a:	4a42      	ldr	r2, [pc, #264]	; (7a24 <z_impl_k_yield+0x114>)
    791c:	4842      	ldr	r0, [pc, #264]	; (7a28 <z_impl_k_yield+0x118>)
    791e:	f240 43dc 	movw	r3, #1244	; 0x4dc
    7922:	f001 fef6 	bl	9712 <printk>
    7926:	4841      	ldr	r0, [pc, #260]	; (7a2c <z_impl_k_yield+0x11c>)
    7928:	f001 fef3 	bl	9712 <printk>
    792c:	483d      	ldr	r0, [pc, #244]	; (7a24 <z_impl_k_yield+0x114>)
    792e:	f240 41dc 	movw	r1, #1244	; 0x4dc
    7932:	f001 fdeb 	bl	950c <assert_post_action>
	__asm__ volatile(
    7936:	f04f 0320 	mov.w	r3, #32
    793a:	f3ef 8611 	mrs	r6, BASEPRI
    793e:	f383 8812 	msr	BASEPRI_MAX, r3
    7942:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7946:	483a      	ldr	r0, [pc, #232]	; (7a30 <z_impl_k_yield+0x120>)
    7948:	f000 fcca 	bl	82e0 <z_spin_lock_valid>
    794c:	b968      	cbnz	r0, 796a <z_impl_k_yield+0x5a>
    794e:	4a39      	ldr	r2, [pc, #228]	; (7a34 <z_impl_k_yield+0x124>)
    7950:	4939      	ldr	r1, [pc, #228]	; (7a38 <z_impl_k_yield+0x128>)
    7952:	4835      	ldr	r0, [pc, #212]	; (7a28 <z_impl_k_yield+0x118>)
    7954:	2381      	movs	r3, #129	; 0x81
    7956:	f001 fedc 	bl	9712 <printk>
    795a:	4935      	ldr	r1, [pc, #212]	; (7a30 <z_impl_k_yield+0x120>)
    795c:	4837      	ldr	r0, [pc, #220]	; (7a3c <z_impl_k_yield+0x12c>)
    795e:	f001 fed8 	bl	9712 <printk>
    7962:	4834      	ldr	r0, [pc, #208]	; (7a34 <z_impl_k_yield+0x124>)
    7964:	2181      	movs	r1, #129	; 0x81
    7966:	f001 fdd1 	bl	950c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    796a:	4d35      	ldr	r5, [pc, #212]	; (7a40 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    796c:	4830      	ldr	r0, [pc, #192]	; (7a30 <z_impl_k_yield+0x120>)
    796e:	f000 fcd5 	bl	831c <z_spin_lock_set_owner>
    7972:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7974:	7b4b      	ldrb	r3, [r1, #13]
    7976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    797a:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    797c:	f105 0020 	add.w	r0, r5, #32
    7980:	f7ff f9d2 	bl	6d28 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    7984:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    7986:	7b63      	ldrb	r3, [r4, #13]
    7988:	f063 037f 	orn	r3, r3, #127	; 0x7f
    798c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    798e:	4b2d      	ldr	r3, [pc, #180]	; (7a44 <z_impl_k_yield+0x134>)
    7990:	429c      	cmp	r4, r3
    7992:	d109      	bne.n	79a8 <z_impl_k_yield+0x98>
    7994:	492c      	ldr	r1, [pc, #176]	; (7a48 <z_impl_k_yield+0x138>)
    7996:	4824      	ldr	r0, [pc, #144]	; (7a28 <z_impl_k_yield+0x118>)
    7998:	4a22      	ldr	r2, [pc, #136]	; (7a24 <z_impl_k_yield+0x114>)
    799a:	23ba      	movs	r3, #186	; 0xba
    799c:	f001 feb9 	bl	9712 <printk>
    79a0:	4820      	ldr	r0, [pc, #128]	; (7a24 <z_impl_k_yield+0x114>)
    79a2:	21ba      	movs	r1, #186	; 0xba
    79a4:	f001 fdb2 	bl	950c <assert_post_action>
	return list->head == list;
    79a8:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79aa:	4828      	ldr	r0, [pc, #160]	; (7a4c <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    79ac:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79ae:	4283      	cmp	r3, r0
    79b0:	bf08      	it	eq
    79b2:	2300      	moveq	r3, #0
    79b4:	2b00      	cmp	r3, #0
    79b6:	bf38      	it	cc
    79b8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    79ba:	b35b      	cbz	r3, 7a14 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    79bc:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    79c0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    79c4:	4297      	cmp	r7, r2
    79c6:	d021      	beq.n	7a0c <z_impl_k_yield+0xfc>
		return b2 - b1;
    79c8:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    79ca:	2a00      	cmp	r2, #0
    79cc:	dd1e      	ble.n	7a0c <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    79ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    79d0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    79d4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    79d6:	605c      	str	r4, [r3, #4]
	update_cache(1);
    79d8:	2001      	movs	r0, #1
    79da:	f7ff fa35 	bl	6e48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    79de:	4814      	ldr	r0, [pc, #80]	; (7a30 <z_impl_k_yield+0x120>)
    79e0:	f000 fc8c 	bl	82fc <z_spin_unlock_valid>
    79e4:	b968      	cbnz	r0, 7a02 <z_impl_k_yield+0xf2>
    79e6:	4a13      	ldr	r2, [pc, #76]	; (7a34 <z_impl_k_yield+0x124>)
    79e8:	4919      	ldr	r1, [pc, #100]	; (7a50 <z_impl_k_yield+0x140>)
    79ea:	480f      	ldr	r0, [pc, #60]	; (7a28 <z_impl_k_yield+0x118>)
    79ec:	23c3      	movs	r3, #195	; 0xc3
    79ee:	f001 fe90 	bl	9712 <printk>
    79f2:	490f      	ldr	r1, [pc, #60]	; (7a30 <z_impl_k_yield+0x120>)
    79f4:	4817      	ldr	r0, [pc, #92]	; (7a54 <z_impl_k_yield+0x144>)
    79f6:	f001 fe8c 	bl	9712 <printk>
    79fa:	480e      	ldr	r0, [pc, #56]	; (7a34 <z_impl_k_yield+0x124>)
    79fc:	21c3      	movs	r1, #195	; 0xc3
    79fe:	f001 fd85 	bl	950c <assert_post_action>
    7a02:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    7a04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7a08:	f7fb baf4 	b.w	2ff4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    7a0c:	428b      	cmp	r3, r1
    7a0e:	d001      	beq.n	7a14 <z_impl_k_yield+0x104>
    7a10:	681b      	ldr	r3, [r3, #0]
    7a12:	e7d2      	b.n	79ba <z_impl_k_yield+0xaa>
	node->prev = tail;
    7a14:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    7a18:	600c      	str	r4, [r1, #0]
	list->tail = node;
    7a1a:	626c      	str	r4, [r5, #36]	; 0x24
}
    7a1c:	e7dc      	b.n	79d8 <z_impl_k_yield+0xc8>
    7a1e:	bf00      	nop
    7a20:	0000bca7 	.word	0x0000bca7
    7a24:	0000be84 	.word	0x0000be84
    7a28:	0000a9a4 	.word	0x0000a9a4
    7a2c:	0000bd20 	.word	0x0000bd20
    7a30:	20000eac 	.word	0x20000eac
    7a34:	0000b314 	.word	0x0000b314
    7a38:	0000b366 	.word	0x0000b366
    7a3c:	0000b37b 	.word	0x0000b37b
    7a40:	20000e78 	.word	0x20000e78
    7a44:	200005b0 	.word	0x200005b0
    7a48:	0000bea6 	.word	0x0000bea6
    7a4c:	20000e98 	.word	0x20000e98
    7a50:	0000b33a 	.word	0x0000b33a
    7a54:	0000b351 	.word	0x0000b351

00007a58 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    7a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a5c:	4604      	mov	r4, r0
    7a5e:	460d      	mov	r5, r1
    7a60:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    7a64:	b173      	cbz	r3, 7a84 <z_tick_sleep+0x2c>
    7a66:	4945      	ldr	r1, [pc, #276]	; (7b7c <z_tick_sleep+0x124>)
    7a68:	4a45      	ldr	r2, [pc, #276]	; (7b80 <z_tick_sleep+0x128>)
    7a6a:	4846      	ldr	r0, [pc, #280]	; (7b84 <z_tick_sleep+0x12c>)
    7a6c:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    7a70:	f001 fe4f 	bl	9712 <printk>
    7a74:	4844      	ldr	r0, [pc, #272]	; (7b88 <z_tick_sleep+0x130>)
    7a76:	f001 fe4c 	bl	9712 <printk>
    7a7a:	4841      	ldr	r0, [pc, #260]	; (7b80 <z_tick_sleep+0x128>)
    7a7c:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    7a80:	f001 fd44 	bl	950c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    7a84:	ea54 0305 	orrs.w	r3, r4, r5
    7a88:	d104      	bne.n	7a94 <z_tick_sleep+0x3c>
	z_impl_k_yield();
    7a8a:	f7ff ff41 	bl	7910 <z_impl_k_yield>
		k_yield();
		return 0;
    7a8e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    7a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    7a94:	f06f 0301 	mvn.w	r3, #1
    7a98:	1b1e      	subs	r6, r3, r4
    7a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7a9e:	eb63 0705 	sbc.w	r7, r3, r5
    7aa2:	2e01      	cmp	r6, #1
    7aa4:	f177 0300 	sbcs.w	r3, r7, #0
    7aa8:	da64      	bge.n	7b74 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7aaa:	f002 fc71 	bl	a390 <sys_clock_tick_get_32>
    7aae:	1906      	adds	r6, r0, r4
    7ab0:	f04f 0320 	mov.w	r3, #32
    7ab4:	f3ef 8811 	mrs	r8, BASEPRI
    7ab8:	f383 8812 	msr	BASEPRI_MAX, r3
    7abc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ac0:	4832      	ldr	r0, [pc, #200]	; (7b8c <z_tick_sleep+0x134>)
    7ac2:	f000 fc0d 	bl	82e0 <z_spin_lock_valid>
    7ac6:	b968      	cbnz	r0, 7ae4 <z_tick_sleep+0x8c>
    7ac8:	4a31      	ldr	r2, [pc, #196]	; (7b90 <z_tick_sleep+0x138>)
    7aca:	4932      	ldr	r1, [pc, #200]	; (7b94 <z_tick_sleep+0x13c>)
    7acc:	482d      	ldr	r0, [pc, #180]	; (7b84 <z_tick_sleep+0x12c>)
    7ace:	2381      	movs	r3, #129	; 0x81
    7ad0:	f001 fe1f 	bl	9712 <printk>
    7ad4:	492d      	ldr	r1, [pc, #180]	; (7b8c <z_tick_sleep+0x134>)
    7ad6:	4830      	ldr	r0, [pc, #192]	; (7b98 <z_tick_sleep+0x140>)
    7ad8:	f001 fe1b 	bl	9712 <printk>
    7adc:	482c      	ldr	r0, [pc, #176]	; (7b90 <z_tick_sleep+0x138>)
    7ade:	2181      	movs	r1, #129	; 0x81
    7ae0:	f001 fd14 	bl	950c <assert_post_action>
	pending_current = _current;
    7ae4:	4f2d      	ldr	r7, [pc, #180]	; (7b9c <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    7ae6:	4829      	ldr	r0, [pc, #164]	; (7b8c <z_tick_sleep+0x134>)
    7ae8:	f000 fc18 	bl	831c <z_spin_lock_set_owner>
    7aec:	4b2c      	ldr	r3, [pc, #176]	; (7ba0 <z_tick_sleep+0x148>)
    7aee:	68b8      	ldr	r0, [r7, #8]
    7af0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    7af2:	f7ff fbf7 	bl	72e4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    7af6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7af8:	492a      	ldr	r1, [pc, #168]	; (7ba4 <z_tick_sleep+0x14c>)
    7afa:	4622      	mov	r2, r4
    7afc:	462b      	mov	r3, r5
    7afe:	3018      	adds	r0, #24
    7b00:	f000 fc64 	bl	83cc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    7b04:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b06:	4821      	ldr	r0, [pc, #132]	; (7b8c <z_tick_sleep+0x134>)
    7b08:	7b53      	ldrb	r3, [r2, #13]
    7b0a:	f043 0310 	orr.w	r3, r3, #16
    7b0e:	7353      	strb	r3, [r2, #13]
    7b10:	f000 fbf4 	bl	82fc <z_spin_unlock_valid>
    7b14:	b968      	cbnz	r0, 7b32 <z_tick_sleep+0xda>
    7b16:	4a1e      	ldr	r2, [pc, #120]	; (7b90 <z_tick_sleep+0x138>)
    7b18:	4923      	ldr	r1, [pc, #140]	; (7ba8 <z_tick_sleep+0x150>)
    7b1a:	481a      	ldr	r0, [pc, #104]	; (7b84 <z_tick_sleep+0x12c>)
    7b1c:	23c3      	movs	r3, #195	; 0xc3
    7b1e:	f001 fdf8 	bl	9712 <printk>
    7b22:	491a      	ldr	r1, [pc, #104]	; (7b8c <z_tick_sleep+0x134>)
    7b24:	4821      	ldr	r0, [pc, #132]	; (7bac <z_tick_sleep+0x154>)
    7b26:	f001 fdf4 	bl	9712 <printk>
    7b2a:	4819      	ldr	r0, [pc, #100]	; (7b90 <z_tick_sleep+0x138>)
    7b2c:	21c3      	movs	r1, #195	; 0xc3
    7b2e:	f001 fced 	bl	950c <assert_post_action>
    7b32:	4640      	mov	r0, r8
    7b34:	f7fb fa5e 	bl	2ff4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    7b38:	68bb      	ldr	r3, [r7, #8]
    7b3a:	7b5b      	ldrb	r3, [r3, #13]
    7b3c:	06db      	lsls	r3, r3, #27
    7b3e:	d50e      	bpl.n	7b5e <z_tick_sleep+0x106>
    7b40:	491b      	ldr	r1, [pc, #108]	; (7bb0 <z_tick_sleep+0x158>)
    7b42:	4a0f      	ldr	r2, [pc, #60]	; (7b80 <z_tick_sleep+0x128>)
    7b44:	480f      	ldr	r0, [pc, #60]	; (7b84 <z_tick_sleep+0x12c>)
    7b46:	f240 5319 	movw	r3, #1305	; 0x519
    7b4a:	f001 fde2 	bl	9712 <printk>
    7b4e:	480e      	ldr	r0, [pc, #56]	; (7b88 <z_tick_sleep+0x130>)
    7b50:	f001 fddf 	bl	9712 <printk>
    7b54:	480a      	ldr	r0, [pc, #40]	; (7b80 <z_tick_sleep+0x128>)
    7b56:	f240 5119 	movw	r1, #1305	; 0x519
    7b5a:	f001 fcd7 	bl	950c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7b5e:	f002 fc17 	bl	a390 <sys_clock_tick_get_32>
    7b62:	1a30      	subs	r0, r6, r0
    7b64:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    7b68:	2801      	cmp	r0, #1
    7b6a:	f171 0300 	sbcs.w	r3, r1, #0
    7b6e:	bfb8      	it	lt
    7b70:	2000      	movlt	r0, #0
    7b72:	e78d      	b.n	7a90 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    7b74:	f06f 0601 	mvn.w	r6, #1
    7b78:	1b36      	subs	r6, r6, r4
    7b7a:	e799      	b.n	7ab0 <z_tick_sleep+0x58>
    7b7c:	0000bca7 	.word	0x0000bca7
    7b80:	0000be84 	.word	0x0000be84
    7b84:	0000a9a4 	.word	0x0000a9a4
    7b88:	0000bd20 	.word	0x0000bd20
    7b8c:	20000eac 	.word	0x20000eac
    7b90:	0000b314 	.word	0x0000b314
    7b94:	0000b366 	.word	0x0000b366
    7b98:	0000b37b 	.word	0x0000b37b
    7b9c:	20000e78 	.word	0x20000e78
    7ba0:	20000ea8 	.word	0x20000ea8
    7ba4:	00007231 	.word	0x00007231
    7ba8:	0000b33a 	.word	0x0000b33a
    7bac:	0000b351 	.word	0x0000b351
    7bb0:	0000bf36 	.word	0x0000bf36

00007bb4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    7bb4:	b538      	push	{r3, r4, r5, lr}
    7bb6:	4604      	mov	r4, r0
    7bb8:	460d      	mov	r5, r1
    7bba:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    7bbe:	b173      	cbz	r3, 7bde <z_impl_k_sleep+0x2a>
    7bc0:	4913      	ldr	r1, [pc, #76]	; (7c10 <z_impl_k_sleep+0x5c>)
    7bc2:	4a14      	ldr	r2, [pc, #80]	; (7c14 <z_impl_k_sleep+0x60>)
    7bc4:	4814      	ldr	r0, [pc, #80]	; (7c18 <z_impl_k_sleep+0x64>)
    7bc6:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    7bca:	f001 fda2 	bl	9712 <printk>
    7bce:	4813      	ldr	r0, [pc, #76]	; (7c1c <z_impl_k_sleep+0x68>)
    7bd0:	f001 fd9f 	bl	9712 <printk>
    7bd4:	480f      	ldr	r0, [pc, #60]	; (7c14 <z_impl_k_sleep+0x60>)
    7bd6:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    7bda:	f001 fc97 	bl	950c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7bde:	1c6b      	adds	r3, r5, #1
    7be0:	bf08      	it	eq
    7be2:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    7be6:	d106      	bne.n	7bf6 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    7be8:	4b0d      	ldr	r3, [pc, #52]	; (7c20 <z_impl_k_sleep+0x6c>)
    7bea:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7bec:	f7ff fd02 	bl	75f4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    7bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    7bf4:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    7bf6:	4620      	mov	r0, r4
    7bf8:	4629      	mov	r1, r5
    7bfa:	f7ff ff2d 	bl	7a58 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    7bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    7c02:	fb80 3403 	smull	r3, r4, r0, r3
    7c06:	0bd8      	lsrs	r0, r3, #15
    7c08:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    7c0c:	e7f2      	b.n	7bf4 <z_impl_k_sleep+0x40>
    7c0e:	bf00      	nop
    7c10:	0000bca7 	.word	0x0000bca7
    7c14:	0000be84 	.word	0x0000be84
    7c18:	0000a9a4 	.word	0x0000a9a4
    7c1c:	0000bd20 	.word	0x0000bd20
    7c20:	20000e78 	.word	0x20000e78

00007c24 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    7c24:	4b01      	ldr	r3, [pc, #4]	; (7c2c <z_impl_z_current_get+0x8>)
    7c26:	6898      	ldr	r0, [r3, #8]
    7c28:	4770      	bx	lr
    7c2a:	bf00      	nop
    7c2c:	20000e78 	.word	0x20000e78

00007c30 <z_impl_k_is_preempt_thread>:
    7c30:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    7c34:	b93b      	cbnz	r3, 7c46 <z_impl_k_is_preempt_thread+0x16>
    7c36:	4b05      	ldr	r3, [pc, #20]	; (7c4c <z_impl_k_is_preempt_thread+0x1c>)
    7c38:	689b      	ldr	r3, [r3, #8]
    7c3a:	89d8      	ldrh	r0, [r3, #14]
    7c3c:	287f      	cmp	r0, #127	; 0x7f
    7c3e:	bf8c      	ite	hi
    7c40:	2000      	movhi	r0, #0
    7c42:	2001      	movls	r0, #1
    7c44:	4770      	bx	lr
    7c46:	2000      	movs	r0, #0
}
    7c48:	4770      	bx	lr
    7c4a:	bf00      	nop
    7c4c:	20000e78 	.word	0x20000e78

00007c50 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    7c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c54:	4604      	mov	r4, r0
    7c56:	f04f 0320 	mov.w	r3, #32
    7c5a:	f3ef 8611 	mrs	r6, BASEPRI
    7c5e:	f383 8812 	msr	BASEPRI_MAX, r3
    7c62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c66:	4848      	ldr	r0, [pc, #288]	; (7d88 <z_thread_abort+0x138>)
    7c68:	f000 fb3a 	bl	82e0 <z_spin_lock_valid>
    7c6c:	b968      	cbnz	r0, 7c8a <z_thread_abort+0x3a>
    7c6e:	4a47      	ldr	r2, [pc, #284]	; (7d8c <z_thread_abort+0x13c>)
    7c70:	4947      	ldr	r1, [pc, #284]	; (7d90 <z_thread_abort+0x140>)
    7c72:	4848      	ldr	r0, [pc, #288]	; (7d94 <z_thread_abort+0x144>)
    7c74:	2381      	movs	r3, #129	; 0x81
    7c76:	f001 fd4c 	bl	9712 <printk>
    7c7a:	4943      	ldr	r1, [pc, #268]	; (7d88 <z_thread_abort+0x138>)
    7c7c:	4846      	ldr	r0, [pc, #280]	; (7d98 <z_thread_abort+0x148>)
    7c7e:	f001 fd48 	bl	9712 <printk>
    7c82:	4842      	ldr	r0, [pc, #264]	; (7d8c <z_thread_abort+0x13c>)
    7c84:	2181      	movs	r1, #129	; 0x81
    7c86:	f001 fc41 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    7c8a:	483f      	ldr	r0, [pc, #252]	; (7d88 <z_thread_abort+0x138>)
    7c8c:	f000 fb46 	bl	831c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7c90:	7b63      	ldrb	r3, [r4, #13]
    7c92:	071a      	lsls	r2, r3, #28
    7c94:	d517      	bpl.n	7cc6 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c96:	483c      	ldr	r0, [pc, #240]	; (7d88 <z_thread_abort+0x138>)
    7c98:	f000 fb30 	bl	82fc <z_spin_unlock_valid>
    7c9c:	b968      	cbnz	r0, 7cba <z_thread_abort+0x6a>
    7c9e:	4a3b      	ldr	r2, [pc, #236]	; (7d8c <z_thread_abort+0x13c>)
    7ca0:	493e      	ldr	r1, [pc, #248]	; (7d9c <z_thread_abort+0x14c>)
    7ca2:	483c      	ldr	r0, [pc, #240]	; (7d94 <z_thread_abort+0x144>)
    7ca4:	23ac      	movs	r3, #172	; 0xac
    7ca6:	f001 fd34 	bl	9712 <printk>
    7caa:	4937      	ldr	r1, [pc, #220]	; (7d88 <z_thread_abort+0x138>)
    7cac:	483c      	ldr	r0, [pc, #240]	; (7da0 <z_thread_abort+0x150>)
    7cae:	f001 fd30 	bl	9712 <printk>
    7cb2:	4836      	ldr	r0, [pc, #216]	; (7d8c <z_thread_abort+0x13c>)
    7cb4:	21ac      	movs	r1, #172	; 0xac
    7cb6:	f001 fc29 	bl	950c <assert_post_action>
	__asm__ volatile(
    7cba:	f386 8811 	msr	BASEPRI, r6
    7cbe:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7cc6:	f023 0220 	bic.w	r2, r3, #32
    7cca:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    7cce:	09d2      	lsrs	r2, r2, #7
    7cd0:	d142      	bne.n	7d58 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7cd2:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    7cd4:	68a3      	ldr	r3, [r4, #8]
    7cd6:	b113      	cbz	r3, 7cde <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    7cd8:	4620      	mov	r0, r4
    7cda:	f7ff f847 	bl	6d6c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    7cde:	f104 0018 	add.w	r0, r4, #24
    7ce2:	f000 fc47 	bl	8574 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    7ce6:	f104 0758 	add.w	r7, r4, #88	; 0x58
    7cea:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    7cee:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7cf0:	42bd      	cmp	r5, r7
    7cf2:	d001      	beq.n	7cf8 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7cf4:	2d00      	cmp	r5, #0
    7cf6:	d139      	bne.n	7d6c <z_thread_abort+0x11c>
		update_cache(1);
    7cf8:	2001      	movs	r0, #1
    7cfa:	f7ff f8a5 	bl	6e48 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    7cfe:	4b29      	ldr	r3, [pc, #164]	; (7da4 <z_thread_abort+0x154>)
    7d00:	689b      	ldr	r3, [r3, #8]
    7d02:	42a3      	cmp	r3, r4
    7d04:	d1c7      	bne.n	7c96 <z_thread_abort+0x46>
    7d06:	f3ef 8305 	mrs	r3, IPSR
    7d0a:	2b00      	cmp	r3, #0
    7d0c:	d1c3      	bne.n	7c96 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d0e:	481e      	ldr	r0, [pc, #120]	; (7d88 <z_thread_abort+0x138>)
    7d10:	f000 faf4 	bl	82fc <z_spin_unlock_valid>
    7d14:	b968      	cbnz	r0, 7d32 <z_thread_abort+0xe2>
    7d16:	4a1d      	ldr	r2, [pc, #116]	; (7d8c <z_thread_abort+0x13c>)
    7d18:	4920      	ldr	r1, [pc, #128]	; (7d9c <z_thread_abort+0x14c>)
    7d1a:	481e      	ldr	r0, [pc, #120]	; (7d94 <z_thread_abort+0x144>)
    7d1c:	23c3      	movs	r3, #195	; 0xc3
    7d1e:	f001 fcf8 	bl	9712 <printk>
    7d22:	4919      	ldr	r1, [pc, #100]	; (7d88 <z_thread_abort+0x138>)
    7d24:	481e      	ldr	r0, [pc, #120]	; (7da0 <z_thread_abort+0x150>)
    7d26:	f001 fcf4 	bl	9712 <printk>
    7d2a:	4818      	ldr	r0, [pc, #96]	; (7d8c <z_thread_abort+0x13c>)
    7d2c:	21c3      	movs	r1, #195	; 0xc3
    7d2e:	f001 fbed 	bl	950c <assert_post_action>
    7d32:	4630      	mov	r0, r6
    7d34:	f7fb f95e 	bl	2ff4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    7d38:	4a1b      	ldr	r2, [pc, #108]	; (7da8 <z_thread_abort+0x158>)
    7d3a:	491c      	ldr	r1, [pc, #112]	; (7dac <z_thread_abort+0x15c>)
    7d3c:	4815      	ldr	r0, [pc, #84]	; (7d94 <z_thread_abort+0x144>)
    7d3e:	f240 634b 	movw	r3, #1611	; 0x64b
    7d42:	f001 fce6 	bl	9712 <printk>
    7d46:	481a      	ldr	r0, [pc, #104]	; (7db0 <z_thread_abort+0x160>)
    7d48:	f001 fce3 	bl	9712 <printk>
    7d4c:	4816      	ldr	r0, [pc, #88]	; (7da8 <z_thread_abort+0x158>)
    7d4e:	f240 614b 	movw	r1, #1611	; 0x64b
    7d52:	f001 fbdb 	bl	950c <assert_post_action>
    7d56:	e79e      	b.n	7c96 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7d58:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    7d5c:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    7d60:	4814      	ldr	r0, [pc, #80]	; (7db4 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7d62:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7d64:	4621      	mov	r1, r4
    7d66:	f7fe ffdf 	bl	6d28 <z_priq_dumb_remove>
}
    7d6a:	e7b3      	b.n	7cd4 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    7d6c:	4628      	mov	r0, r5
    7d6e:	f7fe fffd 	bl	6d6c <unpend_thread_no_timeout>
    7d72:	f105 0018 	add.w	r0, r5, #24
    7d76:	f000 fbfd 	bl	8574 <z_abort_timeout>
    7d7a:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    7d7e:	4628      	mov	r0, r5
    7d80:	f7ff f968 	bl	7054 <ready_thread>
    7d84:	e7b3      	b.n	7cee <z_thread_abort+0x9e>
    7d86:	bf00      	nop
    7d88:	20000eac 	.word	0x20000eac
    7d8c:	0000b314 	.word	0x0000b314
    7d90:	0000b366 	.word	0x0000b366
    7d94:	0000a9a4 	.word	0x0000a9a4
    7d98:	0000b37b 	.word	0x0000b37b
    7d9c:	0000b33a 	.word	0x0000b33a
    7da0:	0000b351 	.word	0x0000b351
    7da4:	20000e78 	.word	0x20000e78
    7da8:	0000be84 	.word	0x0000be84
    7dac:	0000b9e0 	.word	0x0000b9e0
    7db0:	0000bf76 	.word	0x0000bf76
    7db4:	20000e98 	.word	0x20000e98

00007db8 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    7db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dba:	4604      	mov	r4, r0
    7dbc:	460e      	mov	r6, r1
    7dbe:	4615      	mov	r5, r2
	__asm__ volatile(
    7dc0:	f04f 0320 	mov.w	r3, #32
    7dc4:	f3ef 8711 	mrs	r7, BASEPRI
    7dc8:	f383 8812 	msr	BASEPRI_MAX, r3
    7dcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7dd0:	481e      	ldr	r0, [pc, #120]	; (7e4c <z_sched_wake+0x94>)
    7dd2:	f000 fa85 	bl	82e0 <z_spin_lock_valid>
    7dd6:	b968      	cbnz	r0, 7df4 <z_sched_wake+0x3c>
    7dd8:	4a1d      	ldr	r2, [pc, #116]	; (7e50 <z_sched_wake+0x98>)
    7dda:	491e      	ldr	r1, [pc, #120]	; (7e54 <z_sched_wake+0x9c>)
    7ddc:	481e      	ldr	r0, [pc, #120]	; (7e58 <z_sched_wake+0xa0>)
    7dde:	2381      	movs	r3, #129	; 0x81
    7de0:	f001 fc97 	bl	9712 <printk>
    7de4:	4919      	ldr	r1, [pc, #100]	; (7e4c <z_sched_wake+0x94>)
    7de6:	481d      	ldr	r0, [pc, #116]	; (7e5c <z_sched_wake+0xa4>)
    7de8:	f001 fc93 	bl	9712 <printk>
    7dec:	4818      	ldr	r0, [pc, #96]	; (7e50 <z_sched_wake+0x98>)
    7dee:	2181      	movs	r1, #129	; 0x81
    7df0:	f001 fb8c 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    7df4:	4815      	ldr	r0, [pc, #84]	; (7e4c <z_sched_wake+0x94>)
    7df6:	f000 fa91 	bl	831c <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
    7dfa:	4620      	mov	r0, r4
    7dfc:	f002 faa3 	bl	a346 <z_priq_dumb_best>

		if (thread != NULL) {
    7e00:	4604      	mov	r4, r0
    7e02:	b158      	cbz	r0, 7e1c <z_sched_wake+0x64>
    7e04:	67c6      	str	r6, [r0, #124]	; 0x7c
    7e06:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    7e08:	f7fe ffb0 	bl	6d6c <unpend_thread_no_timeout>
    7e0c:	f104 0018 	add.w	r0, r4, #24
    7e10:	f000 fbb0 	bl	8574 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    7e14:	4620      	mov	r0, r4
    7e16:	f7ff f91d 	bl	7054 <ready_thread>
			ret = true;
    7e1a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e1c:	480b      	ldr	r0, [pc, #44]	; (7e4c <z_sched_wake+0x94>)
    7e1e:	f000 fa6d 	bl	82fc <z_spin_unlock_valid>
    7e22:	b968      	cbnz	r0, 7e40 <z_sched_wake+0x88>
    7e24:	4a0a      	ldr	r2, [pc, #40]	; (7e50 <z_sched_wake+0x98>)
    7e26:	490e      	ldr	r1, [pc, #56]	; (7e60 <z_sched_wake+0xa8>)
    7e28:	480b      	ldr	r0, [pc, #44]	; (7e58 <z_sched_wake+0xa0>)
    7e2a:	23ac      	movs	r3, #172	; 0xac
    7e2c:	f001 fc71 	bl	9712 <printk>
    7e30:	4906      	ldr	r1, [pc, #24]	; (7e4c <z_sched_wake+0x94>)
    7e32:	480c      	ldr	r0, [pc, #48]	; (7e64 <z_sched_wake+0xac>)
    7e34:	f001 fc6d 	bl	9712 <printk>
    7e38:	4805      	ldr	r0, [pc, #20]	; (7e50 <z_sched_wake+0x98>)
    7e3a:	21ac      	movs	r1, #172	; 0xac
    7e3c:	f001 fb66 	bl	950c <assert_post_action>
	__asm__ volatile(
    7e40:	f387 8811 	msr	BASEPRI, r7
    7e44:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    7e48:	4620      	mov	r0, r4
    7e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e4c:	20000eac 	.word	0x20000eac
    7e50:	0000b314 	.word	0x0000b314
    7e54:	0000b366 	.word	0x0000b366
    7e58:	0000a9a4 	.word	0x0000a9a4
    7e5c:	0000b37b 	.word	0x0000b37b
    7e60:	0000b33a 	.word	0x0000b33a
    7e64:	0000b351 	.word	0x0000b351

00007e68 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    7e68:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    7e6a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    7e6e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    7e70:	e9cd 6700 	strd	r6, r7, [sp]
    7e74:	f7ff faf2 	bl	745c <z_pend_curr>

	if (data != NULL) {
    7e78:	b11c      	cbz	r4, 7e82 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    7e7a:	4b03      	ldr	r3, [pc, #12]	; (7e88 <z_sched_wait+0x20>)
    7e7c:	689b      	ldr	r3, [r3, #8]
    7e7e:	695b      	ldr	r3, [r3, #20]
    7e80:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    7e82:	b002      	add	sp, #8
    7e84:	bdd0      	pop	{r4, r6, r7, pc}
    7e86:	bf00      	nop
    7e88:	20000e78 	.word	0x20000e78

00007e8c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7e8c:	b538      	push	{r3, r4, r5, lr}
    7e8e:	4604      	mov	r4, r0
	__asm__ volatile(
    7e90:	f04f 0320 	mov.w	r3, #32
    7e94:	f3ef 8511 	mrs	r5, BASEPRI
    7e98:	f383 8812 	msr	BASEPRI_MAX, r3
    7e9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ea0:	4817      	ldr	r0, [pc, #92]	; (7f00 <z_impl_k_sem_give+0x74>)
    7ea2:	f000 fa1d 	bl	82e0 <z_spin_lock_valid>
    7ea6:	b968      	cbnz	r0, 7ec4 <z_impl_k_sem_give+0x38>
    7ea8:	4a16      	ldr	r2, [pc, #88]	; (7f04 <z_impl_k_sem_give+0x78>)
    7eaa:	4917      	ldr	r1, [pc, #92]	; (7f08 <z_impl_k_sem_give+0x7c>)
    7eac:	4817      	ldr	r0, [pc, #92]	; (7f0c <z_impl_k_sem_give+0x80>)
    7eae:	2381      	movs	r3, #129	; 0x81
    7eb0:	f001 fc2f 	bl	9712 <printk>
    7eb4:	4912      	ldr	r1, [pc, #72]	; (7f00 <z_impl_k_sem_give+0x74>)
    7eb6:	4816      	ldr	r0, [pc, #88]	; (7f10 <z_impl_k_sem_give+0x84>)
    7eb8:	f001 fc2b 	bl	9712 <printk>
    7ebc:	4811      	ldr	r0, [pc, #68]	; (7f04 <z_impl_k_sem_give+0x78>)
    7ebe:	2181      	movs	r1, #129	; 0x81
    7ec0:	f001 fb24 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    7ec4:	480e      	ldr	r0, [pc, #56]	; (7f00 <z_impl_k_sem_give+0x74>)
    7ec6:	f000 fa29 	bl	831c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7eca:	4620      	mov	r0, r4
    7ecc:	f7ff fcc4 	bl	7858 <z_unpend_first_thread>

	if (thread != NULL) {
    7ed0:	b148      	cbz	r0, 7ee6 <z_impl_k_sem_give+0x5a>
    7ed2:	2200      	movs	r2, #0
    7ed4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7ed6:	f7ff f90f 	bl	70f8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7eda:	4629      	mov	r1, r5
    7edc:	4808      	ldr	r0, [pc, #32]	; (7f00 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7ee2:	f7fe be69 	b.w	6bb8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7ee6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7eea:	429a      	cmp	r2, r3
    7eec:	bf18      	it	ne
    7eee:	3301      	addne	r3, #1
    7ef0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    7ef2:	2102      	movs	r1, #2
    7ef4:	f104 0010 	add.w	r0, r4, #16
    7ef8:	f002 fa01 	bl	a2fe <z_handle_obj_poll_events>
}
    7efc:	e7ed      	b.n	7eda <z_impl_k_sem_give+0x4e>
    7efe:	bf00      	nop
    7f00:	20000eb8 	.word	0x20000eb8
    7f04:	0000b314 	.word	0x0000b314
    7f08:	0000b366 	.word	0x0000b366
    7f0c:	0000a9a4 	.word	0x0000a9a4
    7f10:	0000b37b 	.word	0x0000b37b

00007f14 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7f16:	4604      	mov	r4, r0
    7f18:	4616      	mov	r6, r2
    7f1a:	461f      	mov	r7, r3
    7f1c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    7f20:	b17b      	cbz	r3, 7f42 <z_impl_k_sem_take+0x2e>
    7f22:	ea56 0307 	orrs.w	r3, r6, r7
    7f26:	d00c      	beq.n	7f42 <z_impl_k_sem_take+0x2e>
    7f28:	4935      	ldr	r1, [pc, #212]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7f2a:	4a36      	ldr	r2, [pc, #216]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7f2c:	4836      	ldr	r0, [pc, #216]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7f2e:	2379      	movs	r3, #121	; 0x79
    7f30:	f001 fbef 	bl	9712 <printk>
    7f34:	4835      	ldr	r0, [pc, #212]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7f36:	f001 fbec 	bl	9712 <printk>
    7f3a:	4832      	ldr	r0, [pc, #200]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7f3c:	2179      	movs	r1, #121	; 0x79
    7f3e:	f001 fae5 	bl	950c <assert_post_action>
    7f42:	f04f 0320 	mov.w	r3, #32
    7f46:	f3ef 8511 	mrs	r5, BASEPRI
    7f4a:	f383 8812 	msr	BASEPRI_MAX, r3
    7f4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f52:	482f      	ldr	r0, [pc, #188]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7f54:	f000 f9c4 	bl	82e0 <z_spin_lock_valid>
    7f58:	b968      	cbnz	r0, 7f76 <z_impl_k_sem_take+0x62>
    7f5a:	4a2e      	ldr	r2, [pc, #184]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7f5c:	492e      	ldr	r1, [pc, #184]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7f5e:	482a      	ldr	r0, [pc, #168]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7f60:	2381      	movs	r3, #129	; 0x81
    7f62:	f001 fbd6 	bl	9712 <printk>
    7f66:	492a      	ldr	r1, [pc, #168]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7f68:	482c      	ldr	r0, [pc, #176]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    7f6a:	f001 fbd2 	bl	9712 <printk>
    7f6e:	4829      	ldr	r0, [pc, #164]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7f70:	2181      	movs	r1, #129	; 0x81
    7f72:	f001 facb 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    7f76:	4826      	ldr	r0, [pc, #152]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7f78:	f000 f9d0 	bl	831c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7f7c:	68a3      	ldr	r3, [r4, #8]
    7f7e:	b1d3      	cbz	r3, 7fb6 <z_impl_k_sem_take+0xa2>
		sem->count--;
    7f80:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f82:	4823      	ldr	r0, [pc, #140]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7f84:	60a3      	str	r3, [r4, #8]
    7f86:	f000 f9b9 	bl	82fc <z_spin_unlock_valid>
    7f8a:	b968      	cbnz	r0, 7fa8 <z_impl_k_sem_take+0x94>
    7f8c:	4a21      	ldr	r2, [pc, #132]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7f8e:	4924      	ldr	r1, [pc, #144]	; (8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    7f90:	481d      	ldr	r0, [pc, #116]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7f92:	23ac      	movs	r3, #172	; 0xac
    7f94:	f001 fbbd 	bl	9712 <printk>
    7f98:	491d      	ldr	r1, [pc, #116]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7f9a:	4822      	ldr	r0, [pc, #136]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7f9c:	f001 fbb9 	bl	9712 <printk>
    7fa0:	481c      	ldr	r0, [pc, #112]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fa2:	21ac      	movs	r1, #172	; 0xac
    7fa4:	f001 fab2 	bl	950c <assert_post_action>
	__asm__ volatile(
    7fa8:	f385 8811 	msr	BASEPRI, r5
    7fac:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7fb0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7fb2:	b003      	add	sp, #12
    7fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7fb6:	ea56 0307 	orrs.w	r3, r6, r7
    7fba:	d118      	bne.n	7fee <z_impl_k_sem_take+0xda>
    7fbc:	4814      	ldr	r0, [pc, #80]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fbe:	f000 f99d 	bl	82fc <z_spin_unlock_valid>
    7fc2:	b968      	cbnz	r0, 7fe0 <z_impl_k_sem_take+0xcc>
    7fc4:	4a13      	ldr	r2, [pc, #76]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fc6:	4916      	ldr	r1, [pc, #88]	; (8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    7fc8:	480f      	ldr	r0, [pc, #60]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7fca:	23ac      	movs	r3, #172	; 0xac
    7fcc:	f001 fba1 	bl	9712 <printk>
    7fd0:	490f      	ldr	r1, [pc, #60]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fd2:	4814      	ldr	r0, [pc, #80]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7fd4:	f001 fb9d 	bl	9712 <printk>
    7fd8:	480e      	ldr	r0, [pc, #56]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fda:	21ac      	movs	r1, #172	; 0xac
    7fdc:	f001 fa96 	bl	950c <assert_post_action>
    7fe0:	f385 8811 	msr	BASEPRI, r5
    7fe4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7fe8:	f06f 000f 	mvn.w	r0, #15
    7fec:	e7e1      	b.n	7fb2 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7fee:	e9cd 6700 	strd	r6, r7, [sp]
    7ff2:	4622      	mov	r2, r4
    7ff4:	4629      	mov	r1, r5
    7ff6:	4806      	ldr	r0, [pc, #24]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7ff8:	f7ff fa30 	bl	745c <z_pend_curr>
	return ret;
    7ffc:	e7d9      	b.n	7fb2 <z_impl_k_sem_take+0x9e>
    7ffe:	bf00      	nop
    8000:	0000bfb8 	.word	0x0000bfb8
    8004:	0000bf98 	.word	0x0000bf98
    8008:	0000a9a4 	.word	0x0000a9a4
    800c:	0000bd20 	.word	0x0000bd20
    8010:	20000eb8 	.word	0x20000eb8
    8014:	0000b314 	.word	0x0000b314
    8018:	0000b366 	.word	0x0000b366
    801c:	0000b37b 	.word	0x0000b37b
    8020:	0000b33a 	.word	0x0000b33a
    8024:	0000b351 	.word	0x0000b351

00008028 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    8028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    802a:	4b09      	ldr	r3, [pc, #36]	; (8050 <k_sys_work_q_init+0x28>)
    802c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    802e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    8030:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    8032:	9300      	str	r3, [sp, #0]
    8034:	4907      	ldr	r1, [pc, #28]	; (8054 <k_sys_work_q_init+0x2c>)
    8036:	4808      	ldr	r0, [pc, #32]	; (8058 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    8038:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    803c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8040:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8044:	f000 ff88 	bl	8f58 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    8048:	4620      	mov	r0, r4
    804a:	b004      	add	sp, #16
    804c:	bd10      	pop	{r4, pc}
    804e:	bf00      	nop
    8050:	0000c005 	.word	0x0000c005
    8054:	20003c40 	.word	0x20003c40
    8058:	200006b0 	.word	0x200006b0

0000805c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    805c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8060:	b085      	sub	sp, #20
    8062:	4604      	mov	r4, r0
    8064:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    8068:	f1b8 0f0f 	cmp.w	r8, #15
{
    806c:	460f      	mov	r7, r1
    806e:	4615      	mov	r5, r2
    8070:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    8072:	d132      	bne.n	80da <z_setup_new_thread+0x7e>
    8074:	4b25      	ldr	r3, [pc, #148]	; (810c <z_setup_new_thread+0xb0>)
    8076:	4599      	cmp	r9, r3
    8078:	d133      	bne.n	80e2 <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    807a:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    807e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    8082:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8084:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8086:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    8088:	2304      	movs	r3, #4
    808a:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    808c:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    8090:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    8094:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8098:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    809a:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    809e:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    80a0:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    80a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    80a6:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    80a8:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    80aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    80ac:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    80ae:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    80b0:	464b      	mov	r3, r9
	node->prev = NULL;
    80b2:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    80b6:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    80b8:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    80ba:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    80bc:	4642      	mov	r2, r8
    80be:	4639      	mov	r1, r7
    80c0:	4620      	mov	r0, r4
    80c2:	f7fa ffb1 	bl	3028 <arch_new_thread>
	if (!_current) {
    80c6:	4b12      	ldr	r3, [pc, #72]	; (8110 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    80c8:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    80ca:	689b      	ldr	r3, [r3, #8]
    80cc:	b103      	cbz	r3, 80d0 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    80ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    80d0:	6763      	str	r3, [r4, #116]	; 0x74
}
    80d2:	4640      	mov	r0, r8
    80d4:	b005      	add	sp, #20
    80d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    80da:	f108 0310 	add.w	r3, r8, #16
    80de:	2b1e      	cmp	r3, #30
    80e0:	d9cb      	bls.n	807a <z_setup_new_thread+0x1e>
    80e2:	4a0c      	ldr	r2, [pc, #48]	; (8114 <z_setup_new_thread+0xb8>)
    80e4:	490c      	ldr	r1, [pc, #48]	; (8118 <z_setup_new_thread+0xbc>)
    80e6:	480d      	ldr	r0, [pc, #52]	; (811c <z_setup_new_thread+0xc0>)
    80e8:	f240 13ff 	movw	r3, #511	; 0x1ff
    80ec:	f001 fb11 	bl	9712 <printk>
    80f0:	4641      	mov	r1, r8
    80f2:	480b      	ldr	r0, [pc, #44]	; (8120 <z_setup_new_thread+0xc4>)
    80f4:	f06f 030f 	mvn.w	r3, #15
    80f8:	220e      	movs	r2, #14
    80fa:	f001 fb0a 	bl	9712 <printk>
    80fe:	4805      	ldr	r0, [pc, #20]	; (8114 <z_setup_new_thread+0xb8>)
    8100:	f240 11ff 	movw	r1, #511	; 0x1ff
    8104:	f001 fa02 	bl	950c <assert_post_action>
    8108:	e7b7      	b.n	807a <z_setup_new_thread+0x1e>
    810a:	bf00      	nop
    810c:	00006109 	.word	0x00006109
    8110:	20000e78 	.word	0x20000e78
    8114:	0000c00e 	.word	0x0000c00e
    8118:	0000c031 	.word	0x0000c031
    811c:	0000a9a4 	.word	0x0000a9a4
    8120:	0000c0b1 	.word	0x0000c0b1

00008124 <z_impl_k_thread_create>:
{
    8124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8128:	b087      	sub	sp, #28
    812a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    812e:	4604      	mov	r4, r0
    8130:	460d      	mov	r5, r1
    8132:	4690      	mov	r8, r2
    8134:	4699      	mov	r9, r3
    8136:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    813a:	b173      	cbz	r3, 815a <z_impl_k_thread_create+0x36>
    813c:	491b      	ldr	r1, [pc, #108]	; (81ac <z_impl_k_thread_create+0x88>)
    813e:	4a1c      	ldr	r2, [pc, #112]	; (81b0 <z_impl_k_thread_create+0x8c>)
    8140:	481c      	ldr	r0, [pc, #112]	; (81b4 <z_impl_k_thread_create+0x90>)
    8142:	f44f 731a 	mov.w	r3, #616	; 0x268
    8146:	f001 fae4 	bl	9712 <printk>
    814a:	481b      	ldr	r0, [pc, #108]	; (81b8 <z_impl_k_thread_create+0x94>)
    814c:	f001 fae1 	bl	9712 <printk>
    8150:	4817      	ldr	r0, [pc, #92]	; (81b0 <z_impl_k_thread_create+0x8c>)
    8152:	f44f 711a 	mov.w	r1, #616	; 0x268
    8156:	f001 f9d9 	bl	950c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    815a:	2300      	movs	r3, #0
    815c:	9305      	str	r3, [sp, #20]
    815e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8160:	9304      	str	r3, [sp, #16]
    8162:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8164:	9303      	str	r3, [sp, #12]
    8166:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8168:	9302      	str	r3, [sp, #8]
    816a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    816c:	9301      	str	r3, [sp, #4]
    816e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8170:	9300      	str	r3, [sp, #0]
    8172:	4642      	mov	r2, r8
    8174:	464b      	mov	r3, r9
    8176:	4629      	mov	r1, r5
    8178:	4620      	mov	r0, r4
    817a:	f7ff ff6f 	bl	805c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    817e:	1c7b      	adds	r3, r7, #1
    8180:	bf08      	it	eq
    8182:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    8186:	d005      	beq.n	8194 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8188:	ea56 0307 	orrs.w	r3, r6, r7
    818c:	d106      	bne.n	819c <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    818e:	4620      	mov	r0, r4
    8190:	f7fe fffa 	bl	7188 <z_sched_start>
}
    8194:	4620      	mov	r0, r4
    8196:	b007      	add	sp, #28
    8198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    819c:	4907      	ldr	r1, [pc, #28]	; (81bc <z_impl_k_thread_create+0x98>)
    819e:	4632      	mov	r2, r6
    81a0:	463b      	mov	r3, r7
    81a2:	f104 0018 	add.w	r0, r4, #24
    81a6:	f000 f911 	bl	83cc <z_add_timeout>
    81aa:	e7f3      	b.n	8194 <z_impl_k_thread_create+0x70>
    81ac:	0000bca7 	.word	0x0000bca7
    81b0:	0000c00e 	.word	0x0000c00e
    81b4:	0000a9a4 	.word	0x0000a9a4
    81b8:	0000c0e2 	.word	0x0000c0e2
    81bc:	00007231 	.word	0x00007231

000081c0 <z_init_static_threads>:
{
    81c0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    81c4:	4f3f      	ldr	r7, [pc, #252]	; (82c4 <z_init_static_threads+0x104>)
    81c6:	4d40      	ldr	r5, [pc, #256]	; (82c8 <z_init_static_threads+0x108>)
    81c8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 82d8 <z_init_static_threads+0x118>
{
    81cc:	b086      	sub	sp, #24
    81ce:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    81d0:	42bd      	cmp	r5, r7
    81d2:	d90e      	bls.n	81f2 <z_init_static_threads+0x32>
    81d4:	493d      	ldr	r1, [pc, #244]	; (82cc <z_init_static_threads+0x10c>)
    81d6:	483e      	ldr	r0, [pc, #248]	; (82d0 <z_init_static_threads+0x110>)
    81d8:	f240 23cf 	movw	r3, #719	; 0x2cf
    81dc:	4642      	mov	r2, r8
    81de:	f001 fa98 	bl	9712 <printk>
    81e2:	483c      	ldr	r0, [pc, #240]	; (82d4 <z_init_static_threads+0x114>)
    81e4:	f001 fa95 	bl	9712 <printk>
    81e8:	f240 21cf 	movw	r1, #719	; 0x2cf
    81ec:	4640      	mov	r0, r8
    81ee:	f001 f98d 	bl	950c <assert_post_action>
    81f2:	42b5      	cmp	r5, r6
    81f4:	f105 0430 	add.w	r4, r5, #48	; 0x30
    81f8:	d31f      	bcc.n	823a <z_init_static_threads+0x7a>
	k_sched_lock();
    81fa:	f7fe fd21 	bl	6c40 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    81fe:	4c32      	ldr	r4, [pc, #200]	; (82c8 <z_init_static_threads+0x108>)
    8200:	4d35      	ldr	r5, [pc, #212]	; (82d8 <z_init_static_threads+0x118>)
    8202:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 82cc <z_init_static_threads+0x10c>
    8206:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 82d0 <z_init_static_threads+0x110>
    820a:	42b4      	cmp	r4, r6
    820c:	d90e      	bls.n	822c <z_init_static_threads+0x6c>
    820e:	4641      	mov	r1, r8
    8210:	f240 23ee 	movw	r3, #750	; 0x2ee
    8214:	462a      	mov	r2, r5
    8216:	4648      	mov	r0, r9
    8218:	f001 fa7b 	bl	9712 <printk>
    821c:	482d      	ldr	r0, [pc, #180]	; (82d4 <z_init_static_threads+0x114>)
    821e:	f001 fa78 	bl	9712 <printk>
    8222:	f240 21ee 	movw	r1, #750	; 0x2ee
    8226:	4628      	mov	r0, r5
    8228:	f001 f970 	bl	950c <assert_post_action>
    822c:	42b4      	cmp	r4, r6
    822e:	d321      	bcc.n	8274 <z_init_static_threads+0xb4>
}
    8230:	b006      	add	sp, #24
    8232:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    8236:	f7ff ba47 	b.w	76c8 <k_sched_unlock>
		z_setup_new_thread(
    823a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    823e:	9305      	str	r3, [sp, #20]
    8240:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8244:	9304      	str	r3, [sp, #16]
    8246:	f854 3c14 	ldr.w	r3, [r4, #-20]
    824a:	9303      	str	r3, [sp, #12]
    824c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    8250:	9302      	str	r3, [sp, #8]
    8252:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    8256:	9301      	str	r3, [sp, #4]
    8258:	f854 3c20 	ldr.w	r3, [r4, #-32]
    825c:	9300      	str	r3, [sp, #0]
    825e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    8262:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    8266:	f7ff fef9 	bl	805c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    826a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    826e:	655d      	str	r5, [r3, #84]	; 0x54
    8270:	4625      	mov	r5, r4
    8272:	e7ad      	b.n	81d0 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    8274:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8276:	1c4b      	adds	r3, r1, #1
    8278:	d014      	beq.n	82a4 <z_init_static_threads+0xe4>
    827a:	f240 32e7 	movw	r2, #999	; 0x3e7
    827e:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    8280:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    8284:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    8288:	4693      	mov	fp, r2
    828a:	469c      	mov	ip, r3
    828c:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8290:	459c      	cmp	ip, r3
    8292:	bf08      	it	eq
    8294:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    8296:	6827      	ldr	r7, [r4, #0]
    8298:	4658      	mov	r0, fp
    829a:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    829c:	d104      	bne.n	82a8 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    829e:	4638      	mov	r0, r7
    82a0:	f7fe ff72 	bl	7188 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    82a4:	3430      	adds	r4, #48	; 0x30
    82a6:	e7b0      	b.n	820a <z_init_static_threads+0x4a>
    82a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    82ac:	2300      	movs	r3, #0
    82ae:	f7f8 fb65 	bl	97c <__aeabi_uldivmod>
    82b2:	4602      	mov	r2, r0
    82b4:	460b      	mov	r3, r1
    82b6:	f107 0018 	add.w	r0, r7, #24
    82ba:	4908      	ldr	r1, [pc, #32]	; (82dc <z_init_static_threads+0x11c>)
    82bc:	f000 f886 	bl	83cc <z_add_timeout>
    82c0:	e7f0      	b.n	82a4 <z_init_static_threads+0xe4>
    82c2:	bf00      	nop
    82c4:	20000240 	.word	0x20000240
    82c8:	20000240 	.word	0x20000240
    82cc:	0000c107 	.word	0x0000c107
    82d0:	0000a9a4 	.word	0x0000a9a4
    82d4:	0000bc66 	.word	0x0000bc66
    82d8:	0000c00e 	.word	0x0000c00e
    82dc:	00007231 	.word	0x00007231

000082e0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    82e0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    82e2:	b138      	cbz	r0, 82f4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    82e4:	4b04      	ldr	r3, [pc, #16]	; (82f8 <z_spin_lock_valid+0x18>)
    82e6:	7d1b      	ldrb	r3, [r3, #20]
    82e8:	f000 0003 	and.w	r0, r0, #3
    82ec:	1ac0      	subs	r0, r0, r3
    82ee:	bf18      	it	ne
    82f0:	2001      	movne	r0, #1
    82f2:	4770      	bx	lr
			return false;
		}
	}
	return true;
    82f4:	2001      	movs	r0, #1
}
    82f6:	4770      	bx	lr
    82f8:	20000e78 	.word	0x20000e78

000082fc <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    82fc:	4906      	ldr	r1, [pc, #24]	; (8318 <z_spin_unlock_valid+0x1c>)
{
    82fe:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    8300:	688a      	ldr	r2, [r1, #8]
    8302:	7d08      	ldrb	r0, [r1, #20]
    8304:	6819      	ldr	r1, [r3, #0]
    8306:	4302      	orrs	r2, r0
    8308:	4291      	cmp	r1, r2
    830a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    830e:	bf04      	itt	eq
    8310:	6018      	streq	r0, [r3, #0]
	return true;
    8312:	2001      	moveq	r0, #1
}
    8314:	4770      	bx	lr
    8316:	bf00      	nop
    8318:	20000e78 	.word	0x20000e78

0000831c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    831c:	4a02      	ldr	r2, [pc, #8]	; (8328 <z_spin_lock_set_owner+0xc>)
    831e:	7d11      	ldrb	r1, [r2, #20]
    8320:	6893      	ldr	r3, [r2, #8]
    8322:	430b      	orrs	r3, r1
    8324:	6003      	str	r3, [r0, #0]
}
    8326:	4770      	bx	lr
    8328:	20000e78 	.word	0x20000e78

0000832c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    832c:	4b03      	ldr	r3, [pc, #12]	; (833c <elapsed+0x10>)
    832e:	681b      	ldr	r3, [r3, #0]
    8330:	b90b      	cbnz	r3, 8336 <elapsed+0xa>
    8332:	f7fc bd65 	b.w	4e00 <sys_clock_elapsed>
}
    8336:	2000      	movs	r0, #0
    8338:	4770      	bx	lr
    833a:	bf00      	nop
    833c:	20000ebc 	.word	0x20000ebc

00008340 <next_timeout>:

static int32_t next_timeout(void)
{
    8340:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    8342:	4b13      	ldr	r3, [pc, #76]	; (8390 <next_timeout+0x50>)
    8344:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8346:	429c      	cmp	r4, r3
    8348:	bf08      	it	eq
    834a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    834c:	f7ff ffee 	bl	832c <elapsed>
    8350:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    8352:	b1bc      	cbz	r4, 8384 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8354:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    8358:	1b40      	subs	r0, r0, r5
    835a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    835e:	2801      	cmp	r0, #1
    8360:	f171 0300 	sbcs.w	r3, r1, #0
    8364:	db11      	blt.n	838a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8366:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    836a:	2300      	movs	r3, #0
    836c:	4282      	cmp	r2, r0
    836e:	eb73 0401 	sbcs.w	r4, r3, r1
    8372:	da00      	bge.n	8376 <next_timeout+0x36>
    8374:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8376:	4b07      	ldr	r3, [pc, #28]	; (8394 <next_timeout+0x54>)
    8378:	691b      	ldr	r3, [r3, #16]
    837a:	b113      	cbz	r3, 8382 <next_timeout+0x42>
    837c:	4298      	cmp	r0, r3
    837e:	bfa8      	it	ge
    8380:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    8382:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    8384:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8388:	e7f5      	b.n	8376 <next_timeout+0x36>
    838a:	2000      	movs	r0, #0
    838c:	e7f3      	b.n	8376 <next_timeout+0x36>
    838e:	bf00      	nop
    8390:	200001b8 	.word	0x200001b8
    8394:	20000e78 	.word	0x20000e78

00008398 <remove_timeout>:
{
    8398:	b530      	push	{r4, r5, lr}
    839a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    839c:	b168      	cbz	r0, 83ba <remove_timeout+0x22>
    839e:	4a0a      	ldr	r2, [pc, #40]	; (83c8 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    83a0:	6852      	ldr	r2, [r2, #4]
    83a2:	4290      	cmp	r0, r2
    83a4:	d009      	beq.n	83ba <remove_timeout+0x22>
	if (next(t) != NULL) {
    83a6:	b143      	cbz	r3, 83ba <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    83a8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    83ac:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    83b0:	1912      	adds	r2, r2, r4
    83b2:	eb45 0101 	adc.w	r1, r5, r1
    83b6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    83ba:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    83bc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    83be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    83c0:	2300      	movs	r3, #0
	node->prev = NULL;
    83c2:	e9c0 3300 	strd	r3, r3, [r0]
}
    83c6:	bd30      	pop	{r4, r5, pc}
    83c8:	200001b8 	.word	0x200001b8

000083cc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    83cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83d0:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    83d2:	1c6b      	adds	r3, r5, #1
    83d4:	bf08      	it	eq
    83d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    83da:	4682      	mov	sl, r0
    83dc:	468b      	mov	fp, r1
    83de:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    83e0:	f000 80aa 	beq.w	8538 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    83e4:	6803      	ldr	r3, [r0, #0]
    83e6:	b163      	cbz	r3, 8402 <z_add_timeout+0x36>
    83e8:	4955      	ldr	r1, [pc, #340]	; (8540 <z_add_timeout+0x174>)
    83ea:	4a56      	ldr	r2, [pc, #344]	; (8544 <z_add_timeout+0x178>)
    83ec:	4856      	ldr	r0, [pc, #344]	; (8548 <z_add_timeout+0x17c>)
    83ee:	235d      	movs	r3, #93	; 0x5d
    83f0:	f001 f98f 	bl	9712 <printk>
    83f4:	4855      	ldr	r0, [pc, #340]	; (854c <z_add_timeout+0x180>)
    83f6:	f001 f98c 	bl	9712 <printk>
    83fa:	4852      	ldr	r0, [pc, #328]	; (8544 <z_add_timeout+0x178>)
    83fc:	215d      	movs	r1, #93	; 0x5d
    83fe:	f001 f885 	bl	950c <assert_post_action>
	to->fn = fn;
    8402:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    8406:	f04f 0320 	mov.w	r3, #32
    840a:	f3ef 8b11 	mrs	fp, BASEPRI
    840e:	f383 8812 	msr	BASEPRI_MAX, r3
    8412:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8416:	484e      	ldr	r0, [pc, #312]	; (8550 <z_add_timeout+0x184>)
    8418:	f7ff ff62 	bl	82e0 <z_spin_lock_valid>
    841c:	b968      	cbnz	r0, 843a <z_add_timeout+0x6e>
    841e:	4a4d      	ldr	r2, [pc, #308]	; (8554 <z_add_timeout+0x188>)
    8420:	494d      	ldr	r1, [pc, #308]	; (8558 <z_add_timeout+0x18c>)
    8422:	4849      	ldr	r0, [pc, #292]	; (8548 <z_add_timeout+0x17c>)
    8424:	2381      	movs	r3, #129	; 0x81
    8426:	f001 f974 	bl	9712 <printk>
    842a:	4949      	ldr	r1, [pc, #292]	; (8550 <z_add_timeout+0x184>)
    842c:	484b      	ldr	r0, [pc, #300]	; (855c <z_add_timeout+0x190>)
    842e:	f001 f970 	bl	9712 <printk>
    8432:	4848      	ldr	r0, [pc, #288]	; (8554 <z_add_timeout+0x188>)
    8434:	2181      	movs	r1, #129	; 0x81
    8436:	f001 f869 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    843a:	4845      	ldr	r0, [pc, #276]	; (8550 <z_add_timeout+0x184>)
    843c:	f7ff ff6e 	bl	831c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    8440:	f06f 0301 	mvn.w	r3, #1
    8444:	ebb3 0804 	subs.w	r8, r3, r4
    8448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    844c:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8450:	f1b8 0f00 	cmp.w	r8, #0
    8454:	f179 0100 	sbcs.w	r1, r9, #0
    8458:	db1c      	blt.n	8494 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    845a:	4841      	ldr	r0, [pc, #260]	; (8560 <z_add_timeout+0x194>)
    845c:	e9d0 1000 	ldrd	r1, r0, [r0]
    8460:	1a5b      	subs	r3, r3, r1
    8462:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    8466:	1b1e      	subs	r6, r3, r4
    8468:	eb62 0705 	sbc.w	r7, r2, r5
    846c:	2e01      	cmp	r6, #1
    846e:	f177 0300 	sbcs.w	r3, r7, #0
    8472:	bfbc      	itt	lt
    8474:	2601      	movlt	r6, #1
    8476:	2700      	movlt	r7, #0
    8478:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    847c:	4a39      	ldr	r2, [pc, #228]	; (8564 <z_add_timeout+0x198>)
    847e:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8482:	4293      	cmp	r3, r2
    8484:	d11d      	bne.n	84c2 <z_add_timeout+0xf6>
	node->prev = tail;
    8486:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    848a:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    848e:	f8c2 a004 	str.w	sl, [r2, #4]
}
    8492:	e02c      	b.n	84ee <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    8494:	f7ff ff4a 	bl	832c <elapsed>
    8498:	1c63      	adds	r3, r4, #1
    849a:	9300      	str	r3, [sp, #0]
    849c:	f145 0300 	adc.w	r3, r5, #0
    84a0:	9301      	str	r3, [sp, #4]
    84a2:	e9dd 2300 	ldrd	r2, r3, [sp]
    84a6:	1812      	adds	r2, r2, r0
    84a8:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    84ac:	e9ca 2304 	strd	r2, r3, [sl, #16]
    84b0:	e7e4      	b.n	847c <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    84b2:	1be0      	subs	r0, r4, r7
    84b4:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    84b8:	42b3      	cmp	r3, r6
    84ba:	e9ca 0104 	strd	r0, r1, [sl, #16]
    84be:	d0e2      	beq.n	8486 <z_add_timeout+0xba>
    84c0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    84c2:	2b00      	cmp	r3, #0
    84c4:	d0df      	beq.n	8486 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    84c6:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    84ca:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    84ce:	42bc      	cmp	r4, r7
    84d0:	eb75 0108 	sbcs.w	r1, r5, r8
    84d4:	daed      	bge.n	84b2 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    84d6:	1b38      	subs	r0, r7, r4
    84d8:	eb68 0105 	sbc.w	r1, r8, r5
    84dc:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    84e0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    84e2:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    84e6:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    84ea:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    84ee:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    84f0:	4293      	cmp	r3, r2
    84f2:	d00b      	beq.n	850c <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    84f4:	459a      	cmp	sl, r3
    84f6:	d109      	bne.n	850c <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    84f8:	f7ff ff22 	bl	8340 <next_timeout>

			if (next_time == 0 ||
    84fc:	b118      	cbz	r0, 8506 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    84fe:	4b1a      	ldr	r3, [pc, #104]	; (8568 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    8500:	691b      	ldr	r3, [r3, #16]
    8502:	4283      	cmp	r3, r0
    8504:	d002      	beq.n	850c <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    8506:	2100      	movs	r1, #0
    8508:	f7fc fc4a 	bl	4da0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    850c:	4810      	ldr	r0, [pc, #64]	; (8550 <z_add_timeout+0x184>)
    850e:	f7ff fef5 	bl	82fc <z_spin_unlock_valid>
    8512:	b968      	cbnz	r0, 8530 <z_add_timeout+0x164>
    8514:	4a0f      	ldr	r2, [pc, #60]	; (8554 <z_add_timeout+0x188>)
    8516:	4915      	ldr	r1, [pc, #84]	; (856c <z_add_timeout+0x1a0>)
    8518:	480b      	ldr	r0, [pc, #44]	; (8548 <z_add_timeout+0x17c>)
    851a:	23ac      	movs	r3, #172	; 0xac
    851c:	f001 f8f9 	bl	9712 <printk>
    8520:	490b      	ldr	r1, [pc, #44]	; (8550 <z_add_timeout+0x184>)
    8522:	4813      	ldr	r0, [pc, #76]	; (8570 <z_add_timeout+0x1a4>)
    8524:	f001 f8f5 	bl	9712 <printk>
    8528:	480a      	ldr	r0, [pc, #40]	; (8554 <z_add_timeout+0x188>)
    852a:	21ac      	movs	r1, #172	; 0xac
    852c:	f000 ffee 	bl	950c <assert_post_action>
	__asm__ volatile(
    8530:	f38b 8811 	msr	BASEPRI, fp
    8534:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8538:	b003      	add	sp, #12
    853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    853e:	bf00      	nop
    8540:	0000c158 	.word	0x0000c158
    8544:	0000c134 	.word	0x0000c134
    8548:	0000a9a4 	.word	0x0000a9a4
    854c:	0000bd20 	.word	0x0000bd20
    8550:	20000ec0 	.word	0x20000ec0
    8554:	0000b314 	.word	0x0000b314
    8558:	0000b366 	.word	0x0000b366
    855c:	0000b37b 	.word	0x0000b37b
    8560:	20000750 	.word	0x20000750
    8564:	200001b8 	.word	0x200001b8
    8568:	20000e78 	.word	0x20000e78
    856c:	0000b33a 	.word	0x0000b33a
    8570:	0000b351 	.word	0x0000b351

00008574 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    8574:	b538      	push	{r3, r4, r5, lr}
    8576:	4604      	mov	r4, r0
	__asm__ volatile(
    8578:	f04f 0320 	mov.w	r3, #32
    857c:	f3ef 8511 	mrs	r5, BASEPRI
    8580:	f383 8812 	msr	BASEPRI_MAX, r3
    8584:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8588:	481a      	ldr	r0, [pc, #104]	; (85f4 <z_abort_timeout+0x80>)
    858a:	f7ff fea9 	bl	82e0 <z_spin_lock_valid>
    858e:	b968      	cbnz	r0, 85ac <z_abort_timeout+0x38>
    8590:	4a19      	ldr	r2, [pc, #100]	; (85f8 <z_abort_timeout+0x84>)
    8592:	491a      	ldr	r1, [pc, #104]	; (85fc <z_abort_timeout+0x88>)
    8594:	481a      	ldr	r0, [pc, #104]	; (8600 <z_abort_timeout+0x8c>)
    8596:	2381      	movs	r3, #129	; 0x81
    8598:	f001 f8bb 	bl	9712 <printk>
    859c:	4915      	ldr	r1, [pc, #84]	; (85f4 <z_abort_timeout+0x80>)
    859e:	4819      	ldr	r0, [pc, #100]	; (8604 <z_abort_timeout+0x90>)
    85a0:	f001 f8b7 	bl	9712 <printk>
    85a4:	4814      	ldr	r0, [pc, #80]	; (85f8 <z_abort_timeout+0x84>)
    85a6:	2181      	movs	r1, #129	; 0x81
    85a8:	f000 ffb0 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    85ac:	4811      	ldr	r0, [pc, #68]	; (85f4 <z_abort_timeout+0x80>)
    85ae:	f7ff feb5 	bl	831c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    85b2:	6823      	ldr	r3, [r4, #0]
    85b4:	b1db      	cbz	r3, 85ee <z_abort_timeout+0x7a>
			remove_timeout(to);
    85b6:	4620      	mov	r0, r4
    85b8:	f7ff feee 	bl	8398 <remove_timeout>
			ret = 0;
    85bc:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85be:	480d      	ldr	r0, [pc, #52]	; (85f4 <z_abort_timeout+0x80>)
    85c0:	f7ff fe9c 	bl	82fc <z_spin_unlock_valid>
    85c4:	b968      	cbnz	r0, 85e2 <z_abort_timeout+0x6e>
    85c6:	4a0c      	ldr	r2, [pc, #48]	; (85f8 <z_abort_timeout+0x84>)
    85c8:	490f      	ldr	r1, [pc, #60]	; (8608 <z_abort_timeout+0x94>)
    85ca:	480d      	ldr	r0, [pc, #52]	; (8600 <z_abort_timeout+0x8c>)
    85cc:	23ac      	movs	r3, #172	; 0xac
    85ce:	f001 f8a0 	bl	9712 <printk>
    85d2:	4908      	ldr	r1, [pc, #32]	; (85f4 <z_abort_timeout+0x80>)
    85d4:	480d      	ldr	r0, [pc, #52]	; (860c <z_abort_timeout+0x98>)
    85d6:	f001 f89c 	bl	9712 <printk>
    85da:	4807      	ldr	r0, [pc, #28]	; (85f8 <z_abort_timeout+0x84>)
    85dc:	21ac      	movs	r1, #172	; 0xac
    85de:	f000 ff95 	bl	950c <assert_post_action>
	__asm__ volatile(
    85e2:	f385 8811 	msr	BASEPRI, r5
    85e6:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    85ea:	4620      	mov	r0, r4
    85ec:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    85ee:	f06f 0415 	mvn.w	r4, #21
    85f2:	e7e4      	b.n	85be <z_abort_timeout+0x4a>
    85f4:	20000ec0 	.word	0x20000ec0
    85f8:	0000b314 	.word	0x0000b314
    85fc:	0000b366 	.word	0x0000b366
    8600:	0000a9a4 	.word	0x0000a9a4
    8604:	0000b37b 	.word	0x0000b37b
    8608:	0000b33a 	.word	0x0000b33a
    860c:	0000b351 	.word	0x0000b351

00008610 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    8610:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8612:	f04f 0320 	mov.w	r3, #32
    8616:	f3ef 8511 	mrs	r5, BASEPRI
    861a:	f383 8812 	msr	BASEPRI_MAX, r3
    861e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8622:	4818      	ldr	r0, [pc, #96]	; (8684 <z_get_next_timeout_expiry+0x74>)
    8624:	f7ff fe5c 	bl	82e0 <z_spin_lock_valid>
    8628:	b968      	cbnz	r0, 8646 <z_get_next_timeout_expiry+0x36>
    862a:	4a17      	ldr	r2, [pc, #92]	; (8688 <z_get_next_timeout_expiry+0x78>)
    862c:	4917      	ldr	r1, [pc, #92]	; (868c <z_get_next_timeout_expiry+0x7c>)
    862e:	4818      	ldr	r0, [pc, #96]	; (8690 <z_get_next_timeout_expiry+0x80>)
    8630:	2381      	movs	r3, #129	; 0x81
    8632:	f001 f86e 	bl	9712 <printk>
    8636:	4913      	ldr	r1, [pc, #76]	; (8684 <z_get_next_timeout_expiry+0x74>)
    8638:	4816      	ldr	r0, [pc, #88]	; (8694 <z_get_next_timeout_expiry+0x84>)
    863a:	f001 f86a 	bl	9712 <printk>
    863e:	4812      	ldr	r0, [pc, #72]	; (8688 <z_get_next_timeout_expiry+0x78>)
    8640:	2181      	movs	r1, #129	; 0x81
    8642:	f000 ff63 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    8646:	480f      	ldr	r0, [pc, #60]	; (8684 <z_get_next_timeout_expiry+0x74>)
    8648:	f7ff fe68 	bl	831c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    864c:	f7ff fe78 	bl	8340 <next_timeout>
    8650:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8652:	480c      	ldr	r0, [pc, #48]	; (8684 <z_get_next_timeout_expiry+0x74>)
    8654:	f7ff fe52 	bl	82fc <z_spin_unlock_valid>
    8658:	b968      	cbnz	r0, 8676 <z_get_next_timeout_expiry+0x66>
    865a:	4a0b      	ldr	r2, [pc, #44]	; (8688 <z_get_next_timeout_expiry+0x78>)
    865c:	490e      	ldr	r1, [pc, #56]	; (8698 <z_get_next_timeout_expiry+0x88>)
    865e:	480c      	ldr	r0, [pc, #48]	; (8690 <z_get_next_timeout_expiry+0x80>)
    8660:	23ac      	movs	r3, #172	; 0xac
    8662:	f001 f856 	bl	9712 <printk>
    8666:	4907      	ldr	r1, [pc, #28]	; (8684 <z_get_next_timeout_expiry+0x74>)
    8668:	480c      	ldr	r0, [pc, #48]	; (869c <z_get_next_timeout_expiry+0x8c>)
    866a:	f001 f852 	bl	9712 <printk>
    866e:	4806      	ldr	r0, [pc, #24]	; (8688 <z_get_next_timeout_expiry+0x78>)
    8670:	21ac      	movs	r1, #172	; 0xac
    8672:	f000 ff4b 	bl	950c <assert_post_action>
	__asm__ volatile(
    8676:	f385 8811 	msr	BASEPRI, r5
    867a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    867e:	4620      	mov	r0, r4
    8680:	bd38      	pop	{r3, r4, r5, pc}
    8682:	bf00      	nop
    8684:	20000ec0 	.word	0x20000ec0
    8688:	0000b314 	.word	0x0000b314
    868c:	0000b366 	.word	0x0000b366
    8690:	0000a9a4 	.word	0x0000a9a4
    8694:	0000b37b 	.word	0x0000b37b
    8698:	0000b33a 	.word	0x0000b33a
    869c:	0000b351 	.word	0x0000b351

000086a0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    86a0:	b570      	push	{r4, r5, r6, lr}
    86a2:	4604      	mov	r4, r0
    86a4:	460d      	mov	r5, r1
	__asm__ volatile(
    86a6:	f04f 0320 	mov.w	r3, #32
    86aa:	f3ef 8611 	mrs	r6, BASEPRI
    86ae:	f383 8812 	msr	BASEPRI_MAX, r3
    86b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    86b6:	481b      	ldr	r0, [pc, #108]	; (8724 <z_set_timeout_expiry+0x84>)
    86b8:	f7ff fe12 	bl	82e0 <z_spin_lock_valid>
    86bc:	b968      	cbnz	r0, 86da <z_set_timeout_expiry+0x3a>
    86be:	4a1a      	ldr	r2, [pc, #104]	; (8728 <z_set_timeout_expiry+0x88>)
    86c0:	491a      	ldr	r1, [pc, #104]	; (872c <z_set_timeout_expiry+0x8c>)
    86c2:	481b      	ldr	r0, [pc, #108]	; (8730 <z_set_timeout_expiry+0x90>)
    86c4:	2381      	movs	r3, #129	; 0x81
    86c6:	f001 f824 	bl	9712 <printk>
    86ca:	4916      	ldr	r1, [pc, #88]	; (8724 <z_set_timeout_expiry+0x84>)
    86cc:	4819      	ldr	r0, [pc, #100]	; (8734 <z_set_timeout_expiry+0x94>)
    86ce:	f001 f820 	bl	9712 <printk>
    86d2:	4815      	ldr	r0, [pc, #84]	; (8728 <z_set_timeout_expiry+0x88>)
    86d4:	2181      	movs	r1, #129	; 0x81
    86d6:	f000 ff19 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    86da:	4812      	ldr	r0, [pc, #72]	; (8724 <z_set_timeout_expiry+0x84>)
    86dc:	f7ff fe1e 	bl	831c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    86e0:	f7ff fe2e 	bl	8340 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    86e4:	2801      	cmp	r0, #1
    86e6:	dd05      	ble.n	86f4 <z_set_timeout_expiry+0x54>
    86e8:	42a0      	cmp	r0, r4
    86ea:	db03      	blt.n	86f4 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    86ec:	4629      	mov	r1, r5
    86ee:	4620      	mov	r0, r4
    86f0:	f7fc fb56 	bl	4da0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    86f4:	480b      	ldr	r0, [pc, #44]	; (8724 <z_set_timeout_expiry+0x84>)
    86f6:	f7ff fe01 	bl	82fc <z_spin_unlock_valid>
    86fa:	b968      	cbnz	r0, 8718 <z_set_timeout_expiry+0x78>
    86fc:	4a0a      	ldr	r2, [pc, #40]	; (8728 <z_set_timeout_expiry+0x88>)
    86fe:	490e      	ldr	r1, [pc, #56]	; (8738 <z_set_timeout_expiry+0x98>)
    8700:	480b      	ldr	r0, [pc, #44]	; (8730 <z_set_timeout_expiry+0x90>)
    8702:	23ac      	movs	r3, #172	; 0xac
    8704:	f001 f805 	bl	9712 <printk>
    8708:	4906      	ldr	r1, [pc, #24]	; (8724 <z_set_timeout_expiry+0x84>)
    870a:	480c      	ldr	r0, [pc, #48]	; (873c <z_set_timeout_expiry+0x9c>)
    870c:	f001 f801 	bl	9712 <printk>
    8710:	4805      	ldr	r0, [pc, #20]	; (8728 <z_set_timeout_expiry+0x88>)
    8712:	21ac      	movs	r1, #172	; 0xac
    8714:	f000 fefa 	bl	950c <assert_post_action>
	__asm__ volatile(
    8718:	f386 8811 	msr	BASEPRI, r6
    871c:	f3bf 8f6f 	isb	sy
		}
	}
}
    8720:	bd70      	pop	{r4, r5, r6, pc}
    8722:	bf00      	nop
    8724:	20000ec0 	.word	0x20000ec0
    8728:	0000b314 	.word	0x0000b314
    872c:	0000b366 	.word	0x0000b366
    8730:	0000a9a4 	.word	0x0000a9a4
    8734:	0000b37b 	.word	0x0000b37b
    8738:	0000b33a 	.word	0x0000b33a
    873c:	0000b351 	.word	0x0000b351

00008740 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    8740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8744:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8746:	f7fe fc0d 	bl	6f64 <z_time_slice>
	__asm__ volatile(
    874a:	f04f 0320 	mov.w	r3, #32
    874e:	f3ef 8711 	mrs	r7, BASEPRI
    8752:	f383 8812 	msr	BASEPRI_MAX, r3
    8756:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    875a:	4855      	ldr	r0, [pc, #340]	; (88b0 <sys_clock_announce+0x170>)
    875c:	f7ff fdc0 	bl	82e0 <z_spin_lock_valid>
    8760:	b968      	cbnz	r0, 877e <sys_clock_announce+0x3e>
    8762:	4a54      	ldr	r2, [pc, #336]	; (88b4 <sys_clock_announce+0x174>)
    8764:	4954      	ldr	r1, [pc, #336]	; (88b8 <sys_clock_announce+0x178>)
    8766:	4855      	ldr	r0, [pc, #340]	; (88bc <sys_clock_announce+0x17c>)
    8768:	2381      	movs	r3, #129	; 0x81
    876a:	f000 ffd2 	bl	9712 <printk>
    876e:	4950      	ldr	r1, [pc, #320]	; (88b0 <sys_clock_announce+0x170>)
    8770:	4853      	ldr	r0, [pc, #332]	; (88c0 <sys_clock_announce+0x180>)
    8772:	f000 ffce 	bl	9712 <printk>
    8776:	484f      	ldr	r0, [pc, #316]	; (88b4 <sys_clock_announce+0x174>)
    8778:	2181      	movs	r1, #129	; 0x81
    877a:	f000 fec7 	bl	950c <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    877e:	4d51      	ldr	r5, [pc, #324]	; (88c4 <sys_clock_announce+0x184>)
    8780:	4e51      	ldr	r6, [pc, #324]	; (88c8 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    8782:	484b      	ldr	r0, [pc, #300]	; (88b0 <sys_clock_announce+0x170>)
	return list->head == list;
    8784:	f8df a14c 	ldr.w	sl, [pc, #332]	; 88d4 <sys_clock_announce+0x194>
    8788:	f7ff fdc8 	bl	831c <z_spin_lock_set_owner>
    878c:	46b3      	mov	fp, r6
    878e:	602c      	str	r4, [r5, #0]
    8790:	e9d6 2300 	ldrd	r2, r3, [r6]
    8794:	f8d5 c000 	ldr.w	ip, [r5]
    8798:	f8da 4000 	ldr.w	r4, [sl]
    879c:	e9cd 2300 	strd	r2, r3, [sp]
    87a0:	4662      	mov	r2, ip
    87a2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    87a4:	4554      	cmp	r4, sl
    87a6:	46e0      	mov	r8, ip
    87a8:	4699      	mov	r9, r3
    87aa:	d00c      	beq.n	87c6 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    87ac:	b15c      	cbz	r4, 87c6 <sys_clock_announce+0x86>
    87ae:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    87b2:	458c      	cmp	ip, r1
    87b4:	eb79 0302 	sbcs.w	r3, r9, r2
    87b8:	da2e      	bge.n	8818 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    87ba:	ebb1 000c 	subs.w	r0, r1, ip
    87be:	eb62 0109 	sbc.w	r1, r2, r9
    87c2:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    87c6:	9a00      	ldr	r2, [sp, #0]
    87c8:	9901      	ldr	r1, [sp, #4]
    87ca:	eb18 0202 	adds.w	r2, r8, r2
    87ce:	464b      	mov	r3, r9
    87d0:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    87d4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    87d6:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    87da:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    87dc:	f7ff fdb0 	bl	8340 <next_timeout>
    87e0:	4621      	mov	r1, r4
    87e2:	f7fc fadd 	bl	4da0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    87e6:	4832      	ldr	r0, [pc, #200]	; (88b0 <sys_clock_announce+0x170>)
    87e8:	f7ff fd88 	bl	82fc <z_spin_unlock_valid>
    87ec:	b968      	cbnz	r0, 880a <sys_clock_announce+0xca>
    87ee:	4a31      	ldr	r2, [pc, #196]	; (88b4 <sys_clock_announce+0x174>)
    87f0:	4936      	ldr	r1, [pc, #216]	; (88cc <sys_clock_announce+0x18c>)
    87f2:	4832      	ldr	r0, [pc, #200]	; (88bc <sys_clock_announce+0x17c>)
    87f4:	23ac      	movs	r3, #172	; 0xac
    87f6:	f000 ff8c 	bl	9712 <printk>
    87fa:	492d      	ldr	r1, [pc, #180]	; (88b0 <sys_clock_announce+0x170>)
    87fc:	4834      	ldr	r0, [pc, #208]	; (88d0 <sys_clock_announce+0x190>)
    87fe:	f000 ff88 	bl	9712 <printk>
    8802:	482c      	ldr	r0, [pc, #176]	; (88b4 <sys_clock_announce+0x174>)
    8804:	21ac      	movs	r1, #172	; 0xac
    8806:	f000 fe81 	bl	950c <assert_post_action>
	__asm__ volatile(
    880a:	f387 8811 	msr	BASEPRI, r7
    880e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8812:	b003      	add	sp, #12
    8814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    8818:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    881c:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    8820:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    8824:	f04f 0200 	mov.w	r2, #0
    8828:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    882c:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    8830:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    8832:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    8836:	4620      	mov	r0, r4
		curr_tick += dt;
    8838:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    883c:	f7ff fdac 	bl	8398 <remove_timeout>
    8840:	481b      	ldr	r0, [pc, #108]	; (88b0 <sys_clock_announce+0x170>)
    8842:	f7ff fd5b 	bl	82fc <z_spin_unlock_valid>
    8846:	b968      	cbnz	r0, 8864 <sys_clock_announce+0x124>
    8848:	4a1a      	ldr	r2, [pc, #104]	; (88b4 <sys_clock_announce+0x174>)
    884a:	4920      	ldr	r1, [pc, #128]	; (88cc <sys_clock_announce+0x18c>)
    884c:	481b      	ldr	r0, [pc, #108]	; (88bc <sys_clock_announce+0x17c>)
    884e:	23ac      	movs	r3, #172	; 0xac
    8850:	f000 ff5f 	bl	9712 <printk>
    8854:	4916      	ldr	r1, [pc, #88]	; (88b0 <sys_clock_announce+0x170>)
    8856:	481e      	ldr	r0, [pc, #120]	; (88d0 <sys_clock_announce+0x190>)
    8858:	f000 ff5b 	bl	9712 <printk>
    885c:	4815      	ldr	r0, [pc, #84]	; (88b4 <sys_clock_announce+0x174>)
    885e:	21ac      	movs	r1, #172	; 0xac
    8860:	f000 fe54 	bl	950c <assert_post_action>
    8864:	f387 8811 	msr	BASEPRI, r7
    8868:	f3bf 8f6f 	isb	sy
		t->fn(t);
    886c:	68a3      	ldr	r3, [r4, #8]
    886e:	4620      	mov	r0, r4
    8870:	4798      	blx	r3
	__asm__ volatile(
    8872:	f04f 0320 	mov.w	r3, #32
    8876:	f3ef 8711 	mrs	r7, BASEPRI
    887a:	f383 8812 	msr	BASEPRI_MAX, r3
    887e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8882:	480b      	ldr	r0, [pc, #44]	; (88b0 <sys_clock_announce+0x170>)
    8884:	f7ff fd2c 	bl	82e0 <z_spin_lock_valid>
    8888:	b968      	cbnz	r0, 88a6 <sys_clock_announce+0x166>
    888a:	4a0a      	ldr	r2, [pc, #40]	; (88b4 <sys_clock_announce+0x174>)
    888c:	490a      	ldr	r1, [pc, #40]	; (88b8 <sys_clock_announce+0x178>)
    888e:	480b      	ldr	r0, [pc, #44]	; (88bc <sys_clock_announce+0x17c>)
    8890:	2381      	movs	r3, #129	; 0x81
    8892:	f000 ff3e 	bl	9712 <printk>
    8896:	4906      	ldr	r1, [pc, #24]	; (88b0 <sys_clock_announce+0x170>)
    8898:	4809      	ldr	r0, [pc, #36]	; (88c0 <sys_clock_announce+0x180>)
    889a:	f000 ff3a 	bl	9712 <printk>
    889e:	4805      	ldr	r0, [pc, #20]	; (88b4 <sys_clock_announce+0x174>)
    88a0:	2181      	movs	r1, #129	; 0x81
    88a2:	f000 fe33 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    88a6:	4802      	ldr	r0, [pc, #8]	; (88b0 <sys_clock_announce+0x170>)
    88a8:	f7ff fd38 	bl	831c <z_spin_lock_set_owner>
	return k;
    88ac:	e770      	b.n	8790 <sys_clock_announce+0x50>
    88ae:	bf00      	nop
    88b0:	20000ec0 	.word	0x20000ec0
    88b4:	0000b314 	.word	0x0000b314
    88b8:	0000b366 	.word	0x0000b366
    88bc:	0000a9a4 	.word	0x0000a9a4
    88c0:	0000b37b 	.word	0x0000b37b
    88c4:	20000ebc 	.word	0x20000ebc
    88c8:	20000750 	.word	0x20000750
    88cc:	0000b33a 	.word	0x0000b33a
    88d0:	0000b351 	.word	0x0000b351
    88d4:	200001b8 	.word	0x200001b8

000088d8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    88d8:	b570      	push	{r4, r5, r6, lr}
    88da:	f04f 0320 	mov.w	r3, #32
    88de:	f3ef 8611 	mrs	r6, BASEPRI
    88e2:	f383 8812 	msr	BASEPRI_MAX, r3
    88e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88ea:	481b      	ldr	r0, [pc, #108]	; (8958 <sys_clock_tick_get+0x80>)
    88ec:	f7ff fcf8 	bl	82e0 <z_spin_lock_valid>
    88f0:	b968      	cbnz	r0, 890e <sys_clock_tick_get+0x36>
    88f2:	4a1a      	ldr	r2, [pc, #104]	; (895c <sys_clock_tick_get+0x84>)
    88f4:	491a      	ldr	r1, [pc, #104]	; (8960 <sys_clock_tick_get+0x88>)
    88f6:	481b      	ldr	r0, [pc, #108]	; (8964 <sys_clock_tick_get+0x8c>)
    88f8:	2381      	movs	r3, #129	; 0x81
    88fa:	f000 ff0a 	bl	9712 <printk>
    88fe:	4916      	ldr	r1, [pc, #88]	; (8958 <sys_clock_tick_get+0x80>)
    8900:	4819      	ldr	r0, [pc, #100]	; (8968 <sys_clock_tick_get+0x90>)
    8902:	f000 ff06 	bl	9712 <printk>
    8906:	4815      	ldr	r0, [pc, #84]	; (895c <sys_clock_tick_get+0x84>)
    8908:	2181      	movs	r1, #129	; 0x81
    890a:	f000 fdff 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    890e:	4812      	ldr	r0, [pc, #72]	; (8958 <sys_clock_tick_get+0x80>)
    8910:	f7ff fd04 	bl	831c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8914:	f7fc fa74 	bl	4e00 <sys_clock_elapsed>
    8918:	4b14      	ldr	r3, [pc, #80]	; (896c <sys_clock_tick_get+0x94>)
    891a:	e9d3 4500 	ldrd	r4, r5, [r3]
    891e:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8920:	480d      	ldr	r0, [pc, #52]	; (8958 <sys_clock_tick_get+0x80>)
    8922:	f145 0500 	adc.w	r5, r5, #0
    8926:	f7ff fce9 	bl	82fc <z_spin_unlock_valid>
    892a:	b968      	cbnz	r0, 8948 <sys_clock_tick_get+0x70>
    892c:	4a0b      	ldr	r2, [pc, #44]	; (895c <sys_clock_tick_get+0x84>)
    892e:	4910      	ldr	r1, [pc, #64]	; (8970 <sys_clock_tick_get+0x98>)
    8930:	480c      	ldr	r0, [pc, #48]	; (8964 <sys_clock_tick_get+0x8c>)
    8932:	23ac      	movs	r3, #172	; 0xac
    8934:	f000 feed 	bl	9712 <printk>
    8938:	4907      	ldr	r1, [pc, #28]	; (8958 <sys_clock_tick_get+0x80>)
    893a:	480e      	ldr	r0, [pc, #56]	; (8974 <sys_clock_tick_get+0x9c>)
    893c:	f000 fee9 	bl	9712 <printk>
    8940:	4806      	ldr	r0, [pc, #24]	; (895c <sys_clock_tick_get+0x84>)
    8942:	21ac      	movs	r1, #172	; 0xac
    8944:	f000 fde2 	bl	950c <assert_post_action>
	__asm__ volatile(
    8948:	f386 8811 	msr	BASEPRI, r6
    894c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8950:	4620      	mov	r0, r4
    8952:	4629      	mov	r1, r5
    8954:	bd70      	pop	{r4, r5, r6, pc}
    8956:	bf00      	nop
    8958:	20000ec0 	.word	0x20000ec0
    895c:	0000b314 	.word	0x0000b314
    8960:	0000b366 	.word	0x0000b366
    8964:	0000a9a4 	.word	0x0000a9a4
    8968:	0000b37b 	.word	0x0000b37b
    896c:	20000750 	.word	0x20000750
    8970:	0000b33a 	.word	0x0000b33a
    8974:	0000b351 	.word	0x0000b351

00008978 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    8978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    897a:	4604      	mov	r4, r0
	__asm__ volatile(
    897c:	f04f 0320 	mov.w	r3, #32
    8980:	f3ef 8511 	mrs	r5, BASEPRI
    8984:	f383 8812 	msr	BASEPRI_MAX, r3
    8988:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    898c:	484c      	ldr	r0, [pc, #304]	; (8ac0 <z_timer_expiration_handler+0x148>)
    898e:	f7ff fca7 	bl	82e0 <z_spin_lock_valid>
    8992:	b968      	cbnz	r0, 89b0 <z_timer_expiration_handler+0x38>
    8994:	4a4b      	ldr	r2, [pc, #300]	; (8ac4 <z_timer_expiration_handler+0x14c>)
    8996:	494c      	ldr	r1, [pc, #304]	; (8ac8 <z_timer_expiration_handler+0x150>)
    8998:	484c      	ldr	r0, [pc, #304]	; (8acc <z_timer_expiration_handler+0x154>)
    899a:	2381      	movs	r3, #129	; 0x81
    899c:	f000 feb9 	bl	9712 <printk>
    89a0:	4947      	ldr	r1, [pc, #284]	; (8ac0 <z_timer_expiration_handler+0x148>)
    89a2:	484b      	ldr	r0, [pc, #300]	; (8ad0 <z_timer_expiration_handler+0x158>)
    89a4:	f000 feb5 	bl	9712 <printk>
    89a8:	4846      	ldr	r0, [pc, #280]	; (8ac4 <z_timer_expiration_handler+0x14c>)
    89aa:	2181      	movs	r1, #129	; 0x81
    89ac:	f000 fdae 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    89b0:	4843      	ldr	r0, [pc, #268]	; (8ac0 <z_timer_expiration_handler+0x148>)
    89b2:	f7ff fcb3 	bl	831c <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    89b6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    89ba:	1c56      	adds	r6, r2, #1
    89bc:	f143 0700 	adc.w	r7, r3, #0
    89c0:	2f00      	cmp	r7, #0
    89c2:	bf08      	it	eq
    89c4:	2e02      	cmpeq	r6, #2
    89c6:	d303      	bcc.n	89d0 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    89c8:	4942      	ldr	r1, [pc, #264]	; (8ad4 <z_timer_expiration_handler+0x15c>)
    89ca:	4620      	mov	r0, r4
    89cc:	f7ff fcfe 	bl	83cc <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    89d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    89d2:	3301      	adds	r3, #1
    89d4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    89d6:	6a23      	ldr	r3, [r4, #32]
    89d8:	2b00      	cmp	r3, #0
    89da:	d035      	beq.n	8a48 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    89dc:	4838      	ldr	r0, [pc, #224]	; (8ac0 <z_timer_expiration_handler+0x148>)
    89de:	f7ff fc8d 	bl	82fc <z_spin_unlock_valid>
    89e2:	b968      	cbnz	r0, 8a00 <z_timer_expiration_handler+0x88>
    89e4:	4a37      	ldr	r2, [pc, #220]	; (8ac4 <z_timer_expiration_handler+0x14c>)
    89e6:	493c      	ldr	r1, [pc, #240]	; (8ad8 <z_timer_expiration_handler+0x160>)
    89e8:	4838      	ldr	r0, [pc, #224]	; (8acc <z_timer_expiration_handler+0x154>)
    89ea:	23ac      	movs	r3, #172	; 0xac
    89ec:	f000 fe91 	bl	9712 <printk>
    89f0:	4933      	ldr	r1, [pc, #204]	; (8ac0 <z_timer_expiration_handler+0x148>)
    89f2:	483a      	ldr	r0, [pc, #232]	; (8adc <z_timer_expiration_handler+0x164>)
    89f4:	f000 fe8d 	bl	9712 <printk>
    89f8:	4832      	ldr	r0, [pc, #200]	; (8ac4 <z_timer_expiration_handler+0x14c>)
    89fa:	21ac      	movs	r1, #172	; 0xac
    89fc:	f000 fd86 	bl	950c <assert_post_action>
	__asm__ volatile(
    8a00:	f385 8811 	msr	BASEPRI, r5
    8a04:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    8a08:	6a23      	ldr	r3, [r4, #32]
    8a0a:	4620      	mov	r0, r4
    8a0c:	4798      	blx	r3
	__asm__ volatile(
    8a0e:	f04f 0320 	mov.w	r3, #32
    8a12:	f3ef 8511 	mrs	r5, BASEPRI
    8a16:	f383 8812 	msr	BASEPRI_MAX, r3
    8a1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a1e:	4828      	ldr	r0, [pc, #160]	; (8ac0 <z_timer_expiration_handler+0x148>)
    8a20:	f7ff fc5e 	bl	82e0 <z_spin_lock_valid>
    8a24:	b968      	cbnz	r0, 8a42 <z_timer_expiration_handler+0xca>
    8a26:	4a27      	ldr	r2, [pc, #156]	; (8ac4 <z_timer_expiration_handler+0x14c>)
    8a28:	4927      	ldr	r1, [pc, #156]	; (8ac8 <z_timer_expiration_handler+0x150>)
    8a2a:	4828      	ldr	r0, [pc, #160]	; (8acc <z_timer_expiration_handler+0x154>)
    8a2c:	2381      	movs	r3, #129	; 0x81
    8a2e:	f000 fe70 	bl	9712 <printk>
    8a32:	4923      	ldr	r1, [pc, #140]	; (8ac0 <z_timer_expiration_handler+0x148>)
    8a34:	4826      	ldr	r0, [pc, #152]	; (8ad0 <z_timer_expiration_handler+0x158>)
    8a36:	f000 fe6c 	bl	9712 <printk>
    8a3a:	4822      	ldr	r0, [pc, #136]	; (8ac4 <z_timer_expiration_handler+0x14c>)
    8a3c:	2181      	movs	r1, #129	; 0x81
    8a3e:	f000 fd65 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    8a42:	481f      	ldr	r0, [pc, #124]	; (8ac0 <z_timer_expiration_handler+0x148>)
    8a44:	f7ff fc6a 	bl	831c <z_spin_lock_set_owner>
	return list->head == list;
    8a48:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8a4c:	42a6      	cmp	r6, r4
    8a4e:	d000      	beq.n	8a52 <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    8a50:	b9b6      	cbnz	r6, 8a80 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a52:	481b      	ldr	r0, [pc, #108]	; (8ac0 <z_timer_expiration_handler+0x148>)
    8a54:	f7ff fc52 	bl	82fc <z_spin_unlock_valid>
    8a58:	b968      	cbnz	r0, 8a76 <z_timer_expiration_handler+0xfe>
    8a5a:	4a1a      	ldr	r2, [pc, #104]	; (8ac4 <z_timer_expiration_handler+0x14c>)
    8a5c:	491e      	ldr	r1, [pc, #120]	; (8ad8 <z_timer_expiration_handler+0x160>)
    8a5e:	481b      	ldr	r0, [pc, #108]	; (8acc <z_timer_expiration_handler+0x154>)
    8a60:	23ac      	movs	r3, #172	; 0xac
    8a62:	f000 fe56 	bl	9712 <printk>
    8a66:	4916      	ldr	r1, [pc, #88]	; (8ac0 <z_timer_expiration_handler+0x148>)
    8a68:	481c      	ldr	r0, [pc, #112]	; (8adc <z_timer_expiration_handler+0x164>)
    8a6a:	f000 fe52 	bl	9712 <printk>
    8a6e:	4815      	ldr	r0, [pc, #84]	; (8ac4 <z_timer_expiration_handler+0x14c>)
    8a70:	21ac      	movs	r1, #172	; 0xac
    8a72:	f000 fd4b 	bl	950c <assert_post_action>
	__asm__ volatile(
    8a76:	f385 8811 	msr	BASEPRI, r5
    8a7a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    8a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    8a80:	4630      	mov	r0, r6
    8a82:	f7fe f851 	bl	6b28 <z_unpend_thread_no_timeout>
    8a86:	2300      	movs	r3, #0
    8a88:	480d      	ldr	r0, [pc, #52]	; (8ac0 <z_timer_expiration_handler+0x148>)
    8a8a:	67f3      	str	r3, [r6, #124]	; 0x7c
    8a8c:	f7ff fc36 	bl	82fc <z_spin_unlock_valid>
    8a90:	b968      	cbnz	r0, 8aae <z_timer_expiration_handler+0x136>
    8a92:	4a0c      	ldr	r2, [pc, #48]	; (8ac4 <z_timer_expiration_handler+0x14c>)
    8a94:	4910      	ldr	r1, [pc, #64]	; (8ad8 <z_timer_expiration_handler+0x160>)
    8a96:	480d      	ldr	r0, [pc, #52]	; (8acc <z_timer_expiration_handler+0x154>)
    8a98:	23ac      	movs	r3, #172	; 0xac
    8a9a:	f000 fe3a 	bl	9712 <printk>
    8a9e:	4908      	ldr	r1, [pc, #32]	; (8ac0 <z_timer_expiration_handler+0x148>)
    8aa0:	480e      	ldr	r0, [pc, #56]	; (8adc <z_timer_expiration_handler+0x164>)
    8aa2:	f000 fe36 	bl	9712 <printk>
    8aa6:	4807      	ldr	r0, [pc, #28]	; (8ac4 <z_timer_expiration_handler+0x14c>)
    8aa8:	21ac      	movs	r1, #172	; 0xac
    8aaa:	f000 fd2f 	bl	950c <assert_post_action>
    8aae:	f385 8811 	msr	BASEPRI, r5
    8ab2:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    8ab6:	4630      	mov	r0, r6
}
    8ab8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    8abc:	f7fe bb1c 	b.w	70f8 <z_ready_thread>
    8ac0:	20000ec4 	.word	0x20000ec4
    8ac4:	0000b314 	.word	0x0000b314
    8ac8:	0000b366 	.word	0x0000b366
    8acc:	0000a9a4 	.word	0x0000a9a4
    8ad0:	0000b37b 	.word	0x0000b37b
    8ad4:	00008979 	.word	0x00008979
    8ad8:	0000b33a 	.word	0x0000b33a
    8adc:	0000b351 	.word	0x0000b351

00008ae0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    8ae0:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    8ae4:	4619      	mov	r1, r3
    8ae6:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8ae8:	1c4c      	adds	r4, r1, #1
{
    8aea:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8aec:	bf08      	it	eq
    8aee:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    8af2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    8af6:	4680      	mov	r8, r0
    8af8:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8afa:	d04c      	beq.n	8b96 <z_impl_k_timer_start+0xb6>
    8afc:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    8afe:	1c6b      	adds	r3, r5, #1
    8b00:	bf08      	it	eq
    8b02:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    8b06:	4614      	mov	r4, r2
    8b08:	d019      	beq.n	8b3e <z_impl_k_timer_start+0x5e>
    8b0a:	ea54 0305 	orrs.w	r3, r4, r5
    8b0e:	d016      	beq.n	8b3e <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    8b10:	f06f 0301 	mvn.w	r3, #1
    8b14:	ebb3 0a02 	subs.w	sl, r3, r2
    8b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8b1c:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    8b20:	f1ba 0f00 	cmp.w	sl, #0
    8b24:	f17b 0300 	sbcs.w	r3, fp, #0
    8b28:	da09      	bge.n	8b3e <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    8b2a:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
    8b2e:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    8b32:	2c01      	cmp	r4, #1
    8b34:	f175 0300 	sbcs.w	r3, r5, #0
    8b38:	bfbc      	itt	lt
    8b3a:	2401      	movlt	r4, #1
    8b3c:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    8b3e:	f06f 0301 	mvn.w	r3, #1
    8b42:	1a1b      	subs	r3, r3, r0
    8b44:	9300      	str	r3, [sp, #0]
    8b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8b4a:	eb63 0301 	sbc.w	r3, r3, r1
    8b4e:	9301      	str	r3, [sp, #4]
    8b50:	e9dd 2300 	ldrd	r2, r3, [sp]
    8b54:	2a00      	cmp	r2, #0
    8b56:	f173 0300 	sbcs.w	r3, r3, #0
    8b5a:	da0c      	bge.n	8b76 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    8b5c:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
    8b60:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
    8b64:	f1b8 0f00 	cmp.w	r8, #0
    8b68:	f179 0300 	sbcs.w	r3, r9, #0
    8b6c:	bfbc      	itt	lt
    8b6e:	f04f 0800 	movlt.w	r8, #0
    8b72:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    8b76:	4630      	mov	r0, r6
    8b78:	f7ff fcfc 	bl	8574 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    8b7c:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8b7e:	4907      	ldr	r1, [pc, #28]	; (8b9c <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    8b80:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8b82:	4642      	mov	r2, r8
    8b84:	464b      	mov	r3, r9
    8b86:	4630      	mov	r0, r6
	timer->period = period;
    8b88:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    8b8c:	b002      	add	sp, #8
    8b8e:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8b92:	f7ff bc1b 	b.w	83cc <z_add_timeout>
}
    8b96:	b002      	add	sp, #8
    8b98:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    8b9c:	00008979 	.word	0x00008979

00008ba0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    8ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ba4:	4e7e      	ldr	r6, [pc, #504]	; (8da0 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8ba6:	4f7f      	ldr	r7, [pc, #508]	; (8da4 <work_queue_main+0x204>)
{
    8ba8:	b085      	sub	sp, #20
    8baa:	4604      	mov	r4, r0
	__asm__ volatile(
    8bac:	f04f 0320 	mov.w	r3, #32
    8bb0:	f3ef 8811 	mrs	r8, BASEPRI
    8bb4:	f383 8812 	msr	BASEPRI_MAX, r3
    8bb8:	f3bf 8f6f 	isb	sy
    8bbc:	4630      	mov	r0, r6
    8bbe:	f7ff fb8f 	bl	82e0 <z_spin_lock_valid>
    8bc2:	b968      	cbnz	r0, 8be0 <work_queue_main+0x40>
    8bc4:	4a78      	ldr	r2, [pc, #480]	; (8da8 <work_queue_main+0x208>)
    8bc6:	4979      	ldr	r1, [pc, #484]	; (8dac <work_queue_main+0x20c>)
    8bc8:	4879      	ldr	r0, [pc, #484]	; (8db0 <work_queue_main+0x210>)
    8bca:	2381      	movs	r3, #129	; 0x81
    8bcc:	f000 fda1 	bl	9712 <printk>
    8bd0:	4878      	ldr	r0, [pc, #480]	; (8db4 <work_queue_main+0x214>)
    8bd2:	4631      	mov	r1, r6
    8bd4:	f000 fd9d 	bl	9712 <printk>
    8bd8:	4873      	ldr	r0, [pc, #460]	; (8da8 <work_queue_main+0x208>)
    8bda:	2181      	movs	r1, #129	; 0x81
    8bdc:	f000 fc96 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    8be0:	4630      	mov	r0, r6
    8be2:	f7ff fb9b 	bl	831c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
    8be6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    8bea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    8bee:	b9ad      	cbnz	r5, 8c1c <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
    8bf0:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    8bf4:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
    8bf6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    8bfa:	f100 8092 	bmi.w	8d22 <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    8bfe:	2300      	movs	r3, #0
    8c00:	9302      	str	r3, [sp, #8]
    8c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8c0a:	e9cd 2300 	strd	r2, r3, [sp]
    8c0e:	4641      	mov	r1, r8
    8c10:	f104 0288 	add.w	r2, r4, #136	; 0x88
    8c14:	4630      	mov	r0, r6
    8c16:	f7ff f927 	bl	7e68 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    8c1a:	e7c7      	b.n	8bac <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8c1c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    8c20:	682a      	ldr	r2, [r5, #0]
	list->head = node;
    8c22:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8c26:	428d      	cmp	r5, r1
    8c28:	d101      	bne.n	8c2e <work_queue_main+0x8e>
	list->tail = node;
    8c2a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    8c2e:	f043 0302 	orr.w	r3, r3, #2
    8c32:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    8c36:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
    8c38:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
    8c3c:	f023 0304 	bic.w	r3, r3, #4
    8c40:	f043 0301 	orr.w	r3, r3, #1
    8c44:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c46:	4630      	mov	r0, r6
    8c48:	f7ff fb58 	bl	82fc <z_spin_unlock_valid>
    8c4c:	b968      	cbnz	r0, 8c6a <work_queue_main+0xca>
    8c4e:	4a56      	ldr	r2, [pc, #344]	; (8da8 <work_queue_main+0x208>)
    8c50:	4959      	ldr	r1, [pc, #356]	; (8db8 <work_queue_main+0x218>)
    8c52:	4857      	ldr	r0, [pc, #348]	; (8db0 <work_queue_main+0x210>)
    8c54:	23ac      	movs	r3, #172	; 0xac
    8c56:	f000 fd5c 	bl	9712 <printk>
    8c5a:	4858      	ldr	r0, [pc, #352]	; (8dbc <work_queue_main+0x21c>)
    8c5c:	4631      	mov	r1, r6
    8c5e:	f000 fd58 	bl	9712 <printk>
    8c62:	4851      	ldr	r0, [pc, #324]	; (8da8 <work_queue_main+0x208>)
    8c64:	21ac      	movs	r1, #172	; 0xac
    8c66:	f000 fc51 	bl	950c <assert_post_action>
	__asm__ volatile(
    8c6a:	f388 8811 	msr	BASEPRI, r8
    8c6e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    8c72:	f1b9 0f00 	cmp.w	r9, #0
    8c76:	d10b      	bne.n	8c90 <work_queue_main+0xf0>
    8c78:	4951      	ldr	r1, [pc, #324]	; (8dc0 <work_queue_main+0x220>)
    8c7a:	484d      	ldr	r0, [pc, #308]	; (8db0 <work_queue_main+0x210>)
    8c7c:	4a51      	ldr	r2, [pc, #324]	; (8dc4 <work_queue_main+0x224>)
    8c7e:	f44f 7322 	mov.w	r3, #648	; 0x288
    8c82:	f000 fd46 	bl	9712 <printk>
    8c86:	484f      	ldr	r0, [pc, #316]	; (8dc4 <work_queue_main+0x224>)
    8c88:	f44f 7122 	mov.w	r1, #648	; 0x288
    8c8c:	f000 fc3e 	bl	950c <assert_post_action>
		handler(work);
    8c90:	4628      	mov	r0, r5
    8c92:	47c8      	blx	r9
	__asm__ volatile(
    8c94:	f04f 0320 	mov.w	r3, #32
    8c98:	f3ef 8a11 	mrs	sl, BASEPRI
    8c9c:	f383 8812 	msr	BASEPRI_MAX, r3
    8ca0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ca4:	4630      	mov	r0, r6
    8ca6:	f7ff fb1b 	bl	82e0 <z_spin_lock_valid>
    8caa:	b968      	cbnz	r0, 8cc8 <work_queue_main+0x128>
    8cac:	4a3e      	ldr	r2, [pc, #248]	; (8da8 <work_queue_main+0x208>)
    8cae:	493f      	ldr	r1, [pc, #252]	; (8dac <work_queue_main+0x20c>)
    8cb0:	483f      	ldr	r0, [pc, #252]	; (8db0 <work_queue_main+0x210>)
    8cb2:	2381      	movs	r3, #129	; 0x81
    8cb4:	f000 fd2d 	bl	9712 <printk>
    8cb8:	483e      	ldr	r0, [pc, #248]	; (8db4 <work_queue_main+0x214>)
    8cba:	4631      	mov	r1, r6
    8cbc:	f000 fd29 	bl	9712 <printk>
    8cc0:	4839      	ldr	r0, [pc, #228]	; (8da8 <work_queue_main+0x208>)
    8cc2:	2181      	movs	r1, #129	; 0x81
    8cc4:	f000 fc22 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    8cc8:	4630      	mov	r0, r6
    8cca:	f7ff fb27 	bl	831c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    8cce:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8cd0:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    8cd2:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8cd6:	d42e      	bmi.n	8d36 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
    8cd8:	60ea      	str	r2, [r5, #12]
    8cda:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    8cde:	f023 0302 	bic.w	r3, r3, #2
    8ce2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ce6:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
    8ce8:	f3c3 2500 	ubfx	r5, r3, #8, #1
    8cec:	f7ff fb06 	bl	82fc <z_spin_unlock_valid>
    8cf0:	b968      	cbnz	r0, 8d0e <work_queue_main+0x16e>
    8cf2:	4a2d      	ldr	r2, [pc, #180]	; (8da8 <work_queue_main+0x208>)
    8cf4:	4930      	ldr	r1, [pc, #192]	; (8db8 <work_queue_main+0x218>)
    8cf6:	482e      	ldr	r0, [pc, #184]	; (8db0 <work_queue_main+0x210>)
    8cf8:	23ac      	movs	r3, #172	; 0xac
    8cfa:	f000 fd0a 	bl	9712 <printk>
    8cfe:	482f      	ldr	r0, [pc, #188]	; (8dbc <work_queue_main+0x21c>)
    8d00:	4631      	mov	r1, r6
    8d02:	f000 fd06 	bl	9712 <printk>
    8d06:	4828      	ldr	r0, [pc, #160]	; (8da8 <work_queue_main+0x208>)
    8d08:	21ac      	movs	r1, #172	; 0xac
    8d0a:	f000 fbff 	bl	950c <assert_post_action>
	__asm__ volatile(
    8d0e:	f38a 8811 	msr	BASEPRI, sl
    8d12:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    8d16:	2d00      	cmp	r5, #0
    8d18:	f47f af48 	bne.w	8bac <work_queue_main+0xc>
	z_impl_k_yield();
    8d1c:	f7fe fdf8 	bl	7910 <z_impl_k_yield>
}
    8d20:	e744      	b.n	8bac <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    8d22:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    8d26:	2200      	movs	r2, #0
    8d28:	2101      	movs	r1, #1
    8d2a:	4628      	mov	r0, r5
    8d2c:	f7ff f844 	bl	7db8 <z_sched_wake>
    8d30:	2800      	cmp	r0, #0
    8d32:	d1f8      	bne.n	8d26 <work_queue_main+0x186>
    8d34:	e763      	b.n	8bfe <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8d36:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    8d38:	f023 0303 	bic.w	r3, r3, #3
    8d3c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8d3e:	2800      	cmp	r0, #0
    8d40:	d0cb      	beq.n	8cda <work_queue_main+0x13a>
	return node->next;
    8d42:	6803      	ldr	r3, [r0, #0]
    8d44:	2b00      	cmp	r3, #0
    8d46:	bf38      	it	cc
    8d48:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8d4a:	f04f 0900 	mov.w	r9, #0
    8d4e:	4698      	mov	r8, r3
	parent->next = child;
    8d50:	46cb      	mov	fp, r9
		if (wc->work == work) {
    8d52:	6843      	ldr	r3, [r0, #4]
    8d54:	429d      	cmp	r5, r3
    8d56:	4602      	mov	r2, r0
    8d58:	d10d      	bne.n	8d76 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
    8d5a:	6802      	ldr	r2, [r0, #0]
    8d5c:	f1b9 0f00 	cmp.w	r9, #0
    8d60:	d115      	bne.n	8d8e <work_queue_main+0x1ee>
    8d62:	687b      	ldr	r3, [r7, #4]
	list->head = node;
    8d64:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    8d66:	4283      	cmp	r3, r0
    8d68:	d100      	bne.n	8d6c <work_queue_main+0x1cc>
	list->tail = node;
    8d6a:	607a      	str	r2, [r7, #4]
	parent->next = child;
    8d6c:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
    8d70:	f7ff f88c 	bl	7e8c <z_impl_k_sem_give>
}
    8d74:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8d76:	f1b8 0f00 	cmp.w	r8, #0
    8d7a:	d0ae      	beq.n	8cda <work_queue_main+0x13a>
	return node->next;
    8d7c:	f8d8 3000 	ldr.w	r3, [r8]
    8d80:	2b00      	cmp	r3, #0
    8d82:	bf38      	it	cc
    8d84:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8d86:	4640      	mov	r0, r8
    8d88:	4691      	mov	r9, r2
    8d8a:	4698      	mov	r8, r3
    8d8c:	e7e1      	b.n	8d52 <work_queue_main+0x1b2>
	parent->next = child;
    8d8e:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
    8d92:	687b      	ldr	r3, [r7, #4]
    8d94:	4283      	cmp	r3, r0
	list->tail = node;
    8d96:	bf08      	it	eq
    8d98:	f8c7 9004 	streq.w	r9, [r7, #4]
}
    8d9c:	e7e6      	b.n	8d6c <work_queue_main+0x1cc>
    8d9e:	bf00      	nop
    8da0:	20000ec8 	.word	0x20000ec8
    8da4:	20000ecc 	.word	0x20000ecc
    8da8:	0000b314 	.word	0x0000b314
    8dac:	0000b366 	.word	0x0000b366
    8db0:	0000a9a4 	.word	0x0000a9a4
    8db4:	0000b37b 	.word	0x0000b37b
    8db8:	0000b33a 	.word	0x0000b33a
    8dbc:	0000b351 	.word	0x0000b351
    8dc0:	0000c199 	.word	0x0000c199
    8dc4:	0000c178 	.word	0x0000c178

00008dc8 <submit_to_queue_locked>:
{
    8dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8dca:	68c3      	ldr	r3, [r0, #12]
    8dcc:	079a      	lsls	r2, r3, #30
{
    8dce:	4604      	mov	r4, r0
    8dd0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8dd2:	f3c3 0540 	ubfx	r5, r3, #1, #1
    8dd6:	d42b      	bmi.n	8e30 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    8dd8:	075f      	lsls	r7, r3, #29
    8dda:	d42b      	bmi.n	8e34 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
    8ddc:	680a      	ldr	r2, [r1, #0]
    8dde:	b90a      	cbnz	r2, 8de4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    8de0:	6882      	ldr	r2, [r0, #8]
    8de2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    8de4:	07d8      	lsls	r0, r3, #31
    8de6:	d528      	bpl.n	8e3a <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
    8de8:	68a3      	ldr	r3, [r4, #8]
    8dea:	b95b      	cbnz	r3, 8e04 <submit_to_queue_locked+0x3c>
    8dec:	4924      	ldr	r1, [pc, #144]	; (8e80 <submit_to_queue_locked+0xb8>)
    8dee:	4825      	ldr	r0, [pc, #148]	; (8e84 <submit_to_queue_locked+0xbc>)
    8df0:	4a25      	ldr	r2, [pc, #148]	; (8e88 <submit_to_queue_locked+0xc0>)
    8df2:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    8df6:	f000 fc8c 	bl	9712 <printk>
    8dfa:	4823      	ldr	r0, [pc, #140]	; (8e88 <submit_to_queue_locked+0xc0>)
    8dfc:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    8e00:	f000 fb84 	bl	950c <assert_post_action>
			*queuep = work->queue;
    8e04:	68a3      	ldr	r3, [r4, #8]
    8e06:	6033      	str	r3, [r6, #0]
			ret = 2;
    8e08:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
    8e0a:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
    8e0c:	b38f      	cbz	r7, 8e72 <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    8e0e:	4b1f      	ldr	r3, [pc, #124]	; (8e8c <submit_to_queue_locked+0xc4>)
    8e10:	689b      	ldr	r3, [r3, #8]
    8e12:	42bb      	cmp	r3, r7
    8e14:	d113      	bne.n	8e3e <submit_to_queue_locked+0x76>
    8e16:	f001 fab0 	bl	a37a <k_is_in_isr>
    8e1a:	f080 0001 	eor.w	r0, r0, #1
    8e1e:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    8e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8e24:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    8e26:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8e2a:	d525      	bpl.n	8e78 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
    8e2c:	b14a      	cbz	r2, 8e42 <submit_to_queue_locked+0x7a>
    8e2e:	b950      	cbnz	r0, 8e46 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
    8e30:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    8e34:	2300      	movs	r3, #0
    8e36:	6033      	str	r3, [r6, #0]
	return ret;
    8e38:	e015      	b.n	8e66 <submit_to_queue_locked+0x9e>
		ret = 1;
    8e3a:	2501      	movs	r5, #1
    8e3c:	e7e5      	b.n	8e0a <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    8e3e:	2000      	movs	r0, #0
    8e40:	e7ee      	b.n	8e20 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
    8e42:	071b      	lsls	r3, r3, #28
    8e44:	d4f4      	bmi.n	8e30 <submit_to_queue_locked+0x68>
	parent->next = child;
    8e46:	2300      	movs	r3, #0
    8e48:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    8e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    8e4e:	b963      	cbnz	r3, 8e6a <submit_to_queue_locked+0xa2>
	list->head = node;
    8e50:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    8e54:	4638      	mov	r0, r7
    8e56:	f001 fac2 	bl	a3de <notify_queue_locked>
	*flagp |= BIT(bit);
    8e5a:	68e3      	ldr	r3, [r4, #12]
    8e5c:	f043 0304 	orr.w	r3, r3, #4
    8e60:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    8e62:	6833      	ldr	r3, [r6, #0]
    8e64:	60a3      	str	r3, [r4, #8]
}
    8e66:	4628      	mov	r0, r5
    8e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    8e6a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8e6c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    8e70:	e7f0      	b.n	8e54 <submit_to_queue_locked+0x8c>
		return -EINVAL;
    8e72:	f06f 0515 	mvn.w	r5, #21
    8e76:	e7dd      	b.n	8e34 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
    8e78:	f06f 0512 	mvn.w	r5, #18
    8e7c:	e7da      	b.n	8e34 <submit_to_queue_locked+0x6c>
    8e7e:	bf00      	nop
    8e80:	0000c1b0 	.word	0x0000c1b0
    8e84:	0000a9a4 	.word	0x0000a9a4
    8e88:	0000c178 	.word	0x0000c178
    8e8c:	20000e78 	.word	0x20000e78

00008e90 <k_work_submit_to_queue>:
{
    8e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
    8e92:	460c      	mov	r4, r1
{
    8e94:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    8e96:	b959      	cbnz	r1, 8eb0 <k_work_submit_to_queue+0x20>
    8e98:	4926      	ldr	r1, [pc, #152]	; (8f34 <k_work_submit_to_queue+0xa4>)
    8e9a:	4827      	ldr	r0, [pc, #156]	; (8f38 <k_work_submit_to_queue+0xa8>)
    8e9c:	4a27      	ldr	r2, [pc, #156]	; (8f3c <k_work_submit_to_queue+0xac>)
    8e9e:	f240 1369 	movw	r3, #361	; 0x169
    8ea2:	f000 fc36 	bl	9712 <printk>
    8ea6:	4825      	ldr	r0, [pc, #148]	; (8f3c <k_work_submit_to_queue+0xac>)
    8ea8:	f240 1169 	movw	r1, #361	; 0x169
    8eac:	f000 fb2e 	bl	950c <assert_post_action>
	__asm__ volatile(
    8eb0:	f04f 0320 	mov.w	r3, #32
    8eb4:	f3ef 8511 	mrs	r5, BASEPRI
    8eb8:	f383 8812 	msr	BASEPRI_MAX, r3
    8ebc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ec0:	481f      	ldr	r0, [pc, #124]	; (8f40 <k_work_submit_to_queue+0xb0>)
    8ec2:	f7ff fa0d 	bl	82e0 <z_spin_lock_valid>
    8ec6:	b968      	cbnz	r0, 8ee4 <k_work_submit_to_queue+0x54>
    8ec8:	4a1e      	ldr	r2, [pc, #120]	; (8f44 <k_work_submit_to_queue+0xb4>)
    8eca:	491f      	ldr	r1, [pc, #124]	; (8f48 <k_work_submit_to_queue+0xb8>)
    8ecc:	481a      	ldr	r0, [pc, #104]	; (8f38 <k_work_submit_to_queue+0xa8>)
    8ece:	2381      	movs	r3, #129	; 0x81
    8ed0:	f000 fc1f 	bl	9712 <printk>
    8ed4:	491a      	ldr	r1, [pc, #104]	; (8f40 <k_work_submit_to_queue+0xb0>)
    8ed6:	481d      	ldr	r0, [pc, #116]	; (8f4c <k_work_submit_to_queue+0xbc>)
    8ed8:	f000 fc1b 	bl	9712 <printk>
    8edc:	4819      	ldr	r0, [pc, #100]	; (8f44 <k_work_submit_to_queue+0xb4>)
    8ede:	2181      	movs	r1, #129	; 0x81
    8ee0:	f000 fb14 	bl	950c <assert_post_action>
	z_spin_lock_set_owner(l);
    8ee4:	4816      	ldr	r0, [pc, #88]	; (8f40 <k_work_submit_to_queue+0xb0>)
    8ee6:	f7ff fa19 	bl	831c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    8eea:	4620      	mov	r0, r4
    8eec:	a901      	add	r1, sp, #4
    8eee:	f7ff ff6b 	bl	8dc8 <submit_to_queue_locked>
    8ef2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ef4:	4812      	ldr	r0, [pc, #72]	; (8f40 <k_work_submit_to_queue+0xb0>)
    8ef6:	f7ff fa01 	bl	82fc <z_spin_unlock_valid>
    8efa:	b968      	cbnz	r0, 8f18 <k_work_submit_to_queue+0x88>
    8efc:	4a11      	ldr	r2, [pc, #68]	; (8f44 <k_work_submit_to_queue+0xb4>)
    8efe:	4914      	ldr	r1, [pc, #80]	; (8f50 <k_work_submit_to_queue+0xc0>)
    8f00:	480d      	ldr	r0, [pc, #52]	; (8f38 <k_work_submit_to_queue+0xa8>)
    8f02:	23ac      	movs	r3, #172	; 0xac
    8f04:	f000 fc05 	bl	9712 <printk>
    8f08:	490d      	ldr	r1, [pc, #52]	; (8f40 <k_work_submit_to_queue+0xb0>)
    8f0a:	4812      	ldr	r0, [pc, #72]	; (8f54 <k_work_submit_to_queue+0xc4>)
    8f0c:	f000 fc01 	bl	9712 <printk>
    8f10:	480c      	ldr	r0, [pc, #48]	; (8f44 <k_work_submit_to_queue+0xb4>)
    8f12:	21ac      	movs	r1, #172	; 0xac
    8f14:	f000 fafa 	bl	950c <assert_post_action>
	__asm__ volatile(
    8f18:	f385 8811 	msr	BASEPRI, r5
    8f1c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    8f20:	2c00      	cmp	r4, #0
    8f22:	dd04      	ble.n	8f2e <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
    8f24:	f7fe fe84 	bl	7c30 <z_impl_k_is_preempt_thread>
    8f28:	b108      	cbz	r0, 8f2e <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
    8f2a:	f7fe fcf1 	bl	7910 <z_impl_k_yield>
}
    8f2e:	4620      	mov	r0, r4
    8f30:	b003      	add	sp, #12
    8f32:	bd30      	pop	{r4, r5, pc}
    8f34:	0000c1cb 	.word	0x0000c1cb
    8f38:	0000a9a4 	.word	0x0000a9a4
    8f3c:	0000c178 	.word	0x0000c178
    8f40:	20000ec8 	.word	0x20000ec8
    8f44:	0000b314 	.word	0x0000b314
    8f48:	0000b366 	.word	0x0000b366
    8f4c:	0000b37b 	.word	0x0000b37b
    8f50:	0000b33a 	.word	0x0000b33a
    8f54:	0000b351 	.word	0x0000b351

00008f58 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    8f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f5c:	b088      	sub	sp, #32
    8f5e:	460e      	mov	r6, r1
    8f60:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8f62:	4617      	mov	r7, r2
    8f64:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
    8f66:	4604      	mov	r4, r0
    8f68:	b958      	cbnz	r0, 8f82 <k_work_queue_start+0x2a>
    8f6a:	492e      	ldr	r1, [pc, #184]	; (9024 <k_work_queue_start+0xcc>)
    8f6c:	482e      	ldr	r0, [pc, #184]	; (9028 <k_work_queue_start+0xd0>)
    8f6e:	4a2f      	ldr	r2, [pc, #188]	; (902c <k_work_queue_start+0xd4>)
    8f70:	f240 23b5 	movw	r3, #693	; 0x2b5
    8f74:	f000 fbcd 	bl	9712 <printk>
    8f78:	482c      	ldr	r0, [pc, #176]	; (902c <k_work_queue_start+0xd4>)
    8f7a:	f240 21b5 	movw	r1, #693	; 0x2b5
    8f7e:	f000 fac5 	bl	950c <assert_post_action>
	__ASSERT_NO_MSG(stack);
    8f82:	b95e      	cbnz	r6, 8f9c <k_work_queue_start+0x44>
    8f84:	492a      	ldr	r1, [pc, #168]	; (9030 <k_work_queue_start+0xd8>)
    8f86:	4828      	ldr	r0, [pc, #160]	; (9028 <k_work_queue_start+0xd0>)
    8f88:	4a28      	ldr	r2, [pc, #160]	; (902c <k_work_queue_start+0xd4>)
    8f8a:	f240 23b6 	movw	r3, #694	; 0x2b6
    8f8e:	f000 fbc0 	bl	9712 <printk>
    8f92:	4826      	ldr	r0, [pc, #152]	; (902c <k_work_queue_start+0xd4>)
    8f94:	f240 21b6 	movw	r1, #694	; 0x2b6
    8f98:	f000 fab8 	bl	950c <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
    8f9c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    8fa0:	07db      	lsls	r3, r3, #31
    8fa2:	d50b      	bpl.n	8fbc <k_work_queue_start+0x64>
    8fa4:	4923      	ldr	r1, [pc, #140]	; (9034 <k_work_queue_start+0xdc>)
    8fa6:	4820      	ldr	r0, [pc, #128]	; (9028 <k_work_queue_start+0xd0>)
    8fa8:	4a20      	ldr	r2, [pc, #128]	; (902c <k_work_queue_start+0xd4>)
    8faa:	f240 23b7 	movw	r3, #695	; 0x2b7
    8fae:	f000 fbb0 	bl	9712 <printk>
    8fb2:	481e      	ldr	r0, [pc, #120]	; (902c <k_work_queue_start+0xd4>)
    8fb4:	f240 21b7 	movw	r1, #695	; 0x2b7
    8fb8:	f000 faa8 	bl	950c <assert_post_action>
	list->head = NULL;
    8fbc:	2300      	movs	r3, #0
	list->tail = NULL;
    8fbe:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
    8fc2:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    8fc6:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    8fca:	f104 0390 	add.w	r3, r4, #144	; 0x90
    8fce:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    8fd2:	b32d      	cbz	r5, 9020 <k_work_queue_start+0xc8>
    8fd4:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	f240 1101 	movw	r1, #257	; 0x101
    8fdc:	bf08      	it	eq
    8fde:	2101      	moveq	r1, #1
	*flagp = flags;
    8fe0:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8fec:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8ff0:	2200      	movs	r2, #0
    8ff2:	e9cd 8203 	strd	r8, r2, [sp, #12]
    8ff6:	e9cd 2201 	strd	r2, r2, [sp, #4]
    8ffa:	4b0f      	ldr	r3, [pc, #60]	; (9038 <k_work_queue_start+0xe0>)
    8ffc:	9400      	str	r4, [sp, #0]
    8ffe:	463a      	mov	r2, r7
    9000:	4631      	mov	r1, r6
    9002:	4620      	mov	r0, r4
    9004:	f7ff f88e 	bl	8124 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    9008:	b125      	cbz	r5, 9014 <k_work_queue_start+0xbc>
    900a:	6829      	ldr	r1, [r5, #0]
    900c:	b111      	cbz	r1, 9014 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
    900e:	4620      	mov	r0, r4
    9010:	f001 f9b9 	bl	a386 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    9014:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    9016:	b008      	add	sp, #32
    9018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    901c:	f001 b9b6 	b.w	a38c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    9020:	2101      	movs	r1, #1
    9022:	e7dd      	b.n	8fe0 <k_work_queue_start+0x88>
    9024:	0000c1df 	.word	0x0000c1df
    9028:	0000a9a4 	.word	0x0000a9a4
    902c:	0000c178 	.word	0x0000c178
    9030:	0000c1e5 	.word	0x0000c1e5
    9034:	0000c1eb 	.word	0x0000c1eb
    9038:	00008ba1 	.word	0x00008ba1

0000903c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    903c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    903e:	4806      	ldr	r0, [pc, #24]	; (9058 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    9040:	4a06      	ldr	r2, [pc, #24]	; (905c <z_data_copy+0x20>)
    9042:	4907      	ldr	r1, [pc, #28]	; (9060 <z_data_copy+0x24>)
    9044:	1a12      	subs	r2, r2, r0
    9046:	f000 fd4b 	bl	9ae0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    904a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    904e:	4a05      	ldr	r2, [pc, #20]	; (9064 <z_data_copy+0x28>)
    9050:	4905      	ldr	r1, [pc, #20]	; (9068 <z_data_copy+0x2c>)
    9052:	4806      	ldr	r0, [pc, #24]	; (906c <z_data_copy+0x30>)
    9054:	f000 bd44 	b.w	9ae0 <memcpy>
    9058:	20000000 	.word	0x20000000
    905c:	20000290 	.word	0x20000290
    9060:	0000c290 	.word	0x0000c290
    9064:	00000000 	.word	0x00000000
    9068:	0000c290 	.word	0x0000c290
    906c:	20000000 	.word	0x20000000

00009070 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    9070:	4a02      	ldr	r2, [pc, #8]	; (907c <boot_banner+0xc>)
    9072:	4903      	ldr	r1, [pc, #12]	; (9080 <boot_banner+0x10>)
    9074:	4803      	ldr	r0, [pc, #12]	; (9084 <boot_banner+0x14>)
    9076:	f000 bb4c 	b.w	9712 <printk>
    907a:	bf00      	nop
    907c:	0000acc4 	.word	0x0000acc4
    9080:	0000c21f 	.word	0x0000c21f
    9084:	0000c22e 	.word	0x0000c22e

00009088 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    9088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    908a:	4d0f      	ldr	r5, [pc, #60]	; (90c8 <statics_init+0x40>)
    908c:	4c0f      	ldr	r4, [pc, #60]	; (90cc <statics_init+0x44>)
    908e:	4e10      	ldr	r6, [pc, #64]	; (90d0 <statics_init+0x48>)
    9090:	462f      	mov	r7, r5
    9092:	42ac      	cmp	r4, r5
    9094:	d90c      	bls.n	90b0 <statics_init+0x28>
    9096:	490f      	ldr	r1, [pc, #60]	; (90d4 <statics_init+0x4c>)
    9098:	480f      	ldr	r0, [pc, #60]	; (90d8 <statics_init+0x50>)
    909a:	2318      	movs	r3, #24
    909c:	4632      	mov	r2, r6
    909e:	f000 fb38 	bl	9712 <printk>
    90a2:	480e      	ldr	r0, [pc, #56]	; (90dc <statics_init+0x54>)
    90a4:	f000 fb35 	bl	9712 <printk>
    90a8:	2118      	movs	r1, #24
    90aa:	4630      	mov	r0, r6
    90ac:	f000 fa2e 	bl	950c <assert_post_action>
    90b0:	42bc      	cmp	r4, r7
    90b2:	d301      	bcc.n	90b8 <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    90b4:	2000      	movs	r0, #0
    90b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    90b8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    90bc:	4620      	mov	r0, r4
    90be:	f001 f995 	bl	a3ec <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    90c2:	3418      	adds	r4, #24
    90c4:	e7e5      	b.n	9092 <statics_init+0xa>
    90c6:	bf00      	nop
    90c8:	20000240 	.word	0x20000240
    90cc:	20000240 	.word	0x20000240
    90d0:	0000c255 	.word	0x0000c255
    90d4:	0000c277 	.word	0x0000c277
    90d8:	0000a9a4 	.word	0x0000a9a4
    90dc:	0000bc66 	.word	0x0000bc66

000090e0 <nrf_cc3xx_platform_init_no_rng>:
    90e0:	b510      	push	{r4, lr}
    90e2:	4c0a      	ldr	r4, [pc, #40]	; (910c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    90e4:	6823      	ldr	r3, [r4, #0]
    90e6:	b11b      	cbz	r3, 90f0 <nrf_cc3xx_platform_init_no_rng+0x10>
    90e8:	2301      	movs	r3, #1
    90ea:	6023      	str	r3, [r4, #0]
    90ec:	2000      	movs	r0, #0
    90ee:	bd10      	pop	{r4, pc}
    90f0:	f000 f8d6 	bl	92a0 <CC_LibInitNoRng>
    90f4:	2800      	cmp	r0, #0
    90f6:	d0f7      	beq.n	90e8 <nrf_cc3xx_platform_init_no_rng+0x8>
    90f8:	3801      	subs	r0, #1
    90fa:	2806      	cmp	r0, #6
    90fc:	d803      	bhi.n	9106 <nrf_cc3xx_platform_init_no_rng+0x26>
    90fe:	4b04      	ldr	r3, [pc, #16]	; (9110 <nrf_cc3xx_platform_init_no_rng+0x30>)
    9100:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    9104:	bd10      	pop	{r4, pc}
    9106:	4803      	ldr	r0, [pc, #12]	; (9114 <nrf_cc3xx_platform_init_no_rng+0x34>)
    9108:	bd10      	pop	{r4, pc}
    910a:	bf00      	nop
    910c:	20000ed4 	.word	0x20000ed4
    9110:	0000a8ac 	.word	0x0000a8ac
    9114:	ffff8ffe 	.word	0xffff8ffe

00009118 <nrf_cc3xx_platform_abort>:
    9118:	f3bf 8f4f 	dsb	sy
    911c:	4905      	ldr	r1, [pc, #20]	; (9134 <nrf_cc3xx_platform_abort+0x1c>)
    911e:	4b06      	ldr	r3, [pc, #24]	; (9138 <nrf_cc3xx_platform_abort+0x20>)
    9120:	68ca      	ldr	r2, [r1, #12]
    9122:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9126:	4313      	orrs	r3, r2
    9128:	60cb      	str	r3, [r1, #12]
    912a:	f3bf 8f4f 	dsb	sy
    912e:	bf00      	nop
    9130:	e7fd      	b.n	912e <nrf_cc3xx_platform_abort+0x16>
    9132:	bf00      	nop
    9134:	e000ed00 	.word	0xe000ed00
    9138:	05fa0004 	.word	0x05fa0004

0000913c <CC_PalAbort>:
    913c:	b4f0      	push	{r4, r5, r6, r7}
    913e:	4f09      	ldr	r7, [pc, #36]	; (9164 <CC_PalAbort+0x28>)
    9140:	4e09      	ldr	r6, [pc, #36]	; (9168 <CC_PalAbort+0x2c>)
    9142:	4c0a      	ldr	r4, [pc, #40]	; (916c <CC_PalAbort+0x30>)
    9144:	4a0a      	ldr	r2, [pc, #40]	; (9170 <CC_PalAbort+0x34>)
    9146:	4d0b      	ldr	r5, [pc, #44]	; (9174 <CC_PalAbort+0x38>)
    9148:	490b      	ldr	r1, [pc, #44]	; (9178 <CC_PalAbort+0x3c>)
    914a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    914e:	603b      	str	r3, [r7, #0]
    9150:	6852      	ldr	r2, [r2, #4]
    9152:	6033      	str	r3, [r6, #0]
    9154:	6023      	str	r3, [r4, #0]
    9156:	2400      	movs	r4, #0
    9158:	602b      	str	r3, [r5, #0]
    915a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    915e:	bcf0      	pop	{r4, r5, r6, r7}
    9160:	4710      	bx	r2
    9162:	bf00      	nop
    9164:	5002b400 	.word	0x5002b400
    9168:	5002b404 	.word	0x5002b404
    916c:	5002b408 	.word	0x5002b408
    9170:	200001c0 	.word	0x200001c0
    9174:	5002b40c 	.word	0x5002b40c
    9178:	5002a000 	.word	0x5002a000

0000917c <nrf_cc3xx_platform_set_abort>:
    917c:	e9d0 1200 	ldrd	r1, r2, [r0]
    9180:	4b01      	ldr	r3, [pc, #4]	; (9188 <nrf_cc3xx_platform_set_abort+0xc>)
    9182:	e9c3 1200 	strd	r1, r2, [r3]
    9186:	4770      	bx	lr
    9188:	200001c0 	.word	0x200001c0

0000918c <mutex_free>:
    918c:	b510      	push	{r4, lr}
    918e:	4604      	mov	r4, r0
    9190:	b130      	cbz	r0, 91a0 <mutex_free+0x14>
    9192:	6863      	ldr	r3, [r4, #4]
    9194:	06db      	lsls	r3, r3, #27
    9196:	d502      	bpl.n	919e <mutex_free+0x12>
    9198:	2300      	movs	r3, #0
    919a:	6023      	str	r3, [r4, #0]
    919c:	6063      	str	r3, [r4, #4]
    919e:	bd10      	pop	{r4, pc}
    91a0:	4b02      	ldr	r3, [pc, #8]	; (91ac <mutex_free+0x20>)
    91a2:	4803      	ldr	r0, [pc, #12]	; (91b0 <mutex_free+0x24>)
    91a4:	685b      	ldr	r3, [r3, #4]
    91a6:	4798      	blx	r3
    91a8:	e7f3      	b.n	9192 <mutex_free+0x6>
    91aa:	bf00      	nop
    91ac:	200001c0 	.word	0x200001c0
    91b0:	0000a8c8 	.word	0x0000a8c8

000091b4 <mutex_unlock>:
    91b4:	b168      	cbz	r0, 91d2 <mutex_unlock+0x1e>
    91b6:	6843      	ldr	r3, [r0, #4]
    91b8:	b13b      	cbz	r3, 91ca <mutex_unlock+0x16>
    91ba:	06db      	lsls	r3, r3, #27
    91bc:	d507      	bpl.n	91ce <mutex_unlock+0x1a>
    91be:	f3bf 8f5f 	dmb	sy
    91c2:	2300      	movs	r3, #0
    91c4:	6003      	str	r3, [r0, #0]
    91c6:	4618      	mov	r0, r3
    91c8:	4770      	bx	lr
    91ca:	4803      	ldr	r0, [pc, #12]	; (91d8 <mutex_unlock+0x24>)
    91cc:	4770      	bx	lr
    91ce:	4803      	ldr	r0, [pc, #12]	; (91dc <mutex_unlock+0x28>)
    91d0:	4770      	bx	lr
    91d2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    91d6:	4770      	bx	lr
    91d8:	ffff8fea 	.word	0xffff8fea
    91dc:	ffff8fe9 	.word	0xffff8fe9

000091e0 <mutex_init>:
    91e0:	b510      	push	{r4, lr}
    91e2:	4604      	mov	r4, r0
    91e4:	b120      	cbz	r0, 91f0 <mutex_init+0x10>
    91e6:	2200      	movs	r2, #0
    91e8:	2311      	movs	r3, #17
    91ea:	6022      	str	r2, [r4, #0]
    91ec:	6063      	str	r3, [r4, #4]
    91ee:	bd10      	pop	{r4, pc}
    91f0:	4801      	ldr	r0, [pc, #4]	; (91f8 <mutex_init+0x18>)
    91f2:	f7ff ffa3 	bl	913c <CC_PalAbort>
    91f6:	e7f6      	b.n	91e6 <mutex_init+0x6>
    91f8:	0000a8f0 	.word	0x0000a8f0

000091fc <mutex_lock>:
    91fc:	b1c0      	cbz	r0, 9230 <mutex_lock+0x34>
    91fe:	6843      	ldr	r3, [r0, #4]
    9200:	b1a3      	cbz	r3, 922c <mutex_lock+0x30>
    9202:	06db      	lsls	r3, r3, #27
    9204:	d510      	bpl.n	9228 <mutex_lock+0x2c>
    9206:	2201      	movs	r2, #1
    9208:	f3bf 8f5b 	dmb	ish
    920c:	e850 3f00 	ldrex	r3, [r0]
    9210:	e840 2100 	strex	r1, r2, [r0]
    9214:	2900      	cmp	r1, #0
    9216:	d1f9      	bne.n	920c <mutex_lock+0x10>
    9218:	f3bf 8f5b 	dmb	ish
    921c:	2b01      	cmp	r3, #1
    921e:	d0f3      	beq.n	9208 <mutex_lock+0xc>
    9220:	f3bf 8f5f 	dmb	sy
    9224:	2000      	movs	r0, #0
    9226:	4770      	bx	lr
    9228:	4803      	ldr	r0, [pc, #12]	; (9238 <mutex_lock+0x3c>)
    922a:	4770      	bx	lr
    922c:	4803      	ldr	r0, [pc, #12]	; (923c <mutex_lock+0x40>)
    922e:	4770      	bx	lr
    9230:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9234:	4770      	bx	lr
    9236:	bf00      	nop
    9238:	ffff8fe9 	.word	0xffff8fe9
    923c:	ffff8fea 	.word	0xffff8fea

00009240 <nrf_cc3xx_platform_set_mutexes>:
    9240:	b570      	push	{r4, r5, r6, lr}
    9242:	e9d0 2300 	ldrd	r2, r3, [r0]
    9246:	4c13      	ldr	r4, [pc, #76]	; (9294 <nrf_cc3xx_platform_set_mutexes+0x54>)
    9248:	4d13      	ldr	r5, [pc, #76]	; (9298 <nrf_cc3xx_platform_set_mutexes+0x58>)
    924a:	e9c4 2300 	strd	r2, r3, [r4]
    924e:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    9252:	e9c4 6302 	strd	r6, r3, [r4, #8]
    9256:	4b11      	ldr	r3, [pc, #68]	; (929c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    9258:	6808      	ldr	r0, [r1, #0]
    925a:	6018      	str	r0, [r3, #0]
    925c:	6848      	ldr	r0, [r1, #4]
    925e:	6058      	str	r0, [r3, #4]
    9260:	6888      	ldr	r0, [r1, #8]
    9262:	6098      	str	r0, [r3, #8]
    9264:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    9268:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    926c:	60de      	str	r6, [r3, #12]
    926e:	6118      	str	r0, [r3, #16]
    9270:	06cb      	lsls	r3, r1, #27
    9272:	d50d      	bpl.n	9290 <nrf_cc3xx_platform_set_mutexes+0x50>
    9274:	2300      	movs	r3, #0
    9276:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    927a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    927e:	f505 7088 	add.w	r0, r5, #272	; 0x110
    9282:	4790      	blx	r2
    9284:	6823      	ldr	r3, [r4, #0]
    9286:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    928a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    928e:	4718      	bx	r3
    9290:	bd70      	pop	{r4, r5, r6, pc}
    9292:	bf00      	nop
    9294:	200001d0 	.word	0x200001d0
    9298:	20001408 	.word	0x20001408
    929c:	200001e0 	.word	0x200001e0

000092a0 <CC_LibInitNoRng>:
    92a0:	b510      	push	{r4, lr}
    92a2:	f000 f833 	bl	930c <CC_HalInit>
    92a6:	b120      	cbz	r0, 92b2 <CC_LibInitNoRng+0x12>
    92a8:	2403      	movs	r4, #3
    92aa:	f000 f867 	bl	937c <CC_PalTerminate>
    92ae:	4620      	mov	r0, r4
    92b0:	bd10      	pop	{r4, pc}
    92b2:	f000 f835 	bl	9320 <CC_PalInit>
    92b6:	b990      	cbnz	r0, 92de <CC_LibInitNoRng+0x3e>
    92b8:	f000 f8b0 	bl	941c <CC_PalPowerSaveModeSelect>
    92bc:	b990      	cbnz	r0, 92e4 <CC_LibInitNoRng+0x44>
    92be:	4b0f      	ldr	r3, [pc, #60]	; (92fc <CC_LibInitNoRng+0x5c>)
    92c0:	681b      	ldr	r3, [r3, #0]
    92c2:	0e1b      	lsrs	r3, r3, #24
    92c4:	2bf0      	cmp	r3, #240	; 0xf0
    92c6:	d108      	bne.n	92da <CC_LibInitNoRng+0x3a>
    92c8:	4a0d      	ldr	r2, [pc, #52]	; (9300 <CC_LibInitNoRng+0x60>)
    92ca:	4b0e      	ldr	r3, [pc, #56]	; (9304 <CC_LibInitNoRng+0x64>)
    92cc:	6812      	ldr	r2, [r2, #0]
    92ce:	429a      	cmp	r2, r3
    92d0:	d00a      	beq.n	92e8 <CC_LibInitNoRng+0x48>
    92d2:	2407      	movs	r4, #7
    92d4:	f000 f81c 	bl	9310 <CC_HalTerminate>
    92d8:	e7e7      	b.n	92aa <CC_LibInitNoRng+0xa>
    92da:	2406      	movs	r4, #6
    92dc:	e7fa      	b.n	92d4 <CC_LibInitNoRng+0x34>
    92de:	2404      	movs	r4, #4
    92e0:	4620      	mov	r0, r4
    92e2:	bd10      	pop	{r4, pc}
    92e4:	2400      	movs	r4, #0
    92e6:	e7f5      	b.n	92d4 <CC_LibInitNoRng+0x34>
    92e8:	2001      	movs	r0, #1
    92ea:	f000 f897 	bl	941c <CC_PalPowerSaveModeSelect>
    92ee:	4604      	mov	r4, r0
    92f0:	2800      	cmp	r0, #0
    92f2:	d1f7      	bne.n	92e4 <CC_LibInitNoRng+0x44>
    92f4:	4b04      	ldr	r3, [pc, #16]	; (9308 <CC_LibInitNoRng+0x68>)
    92f6:	6018      	str	r0, [r3, #0]
    92f8:	e7d9      	b.n	92ae <CC_LibInitNoRng+0xe>
    92fa:	bf00      	nop
    92fc:	5002b928 	.word	0x5002b928
    9300:	5002ba24 	.word	0x5002ba24
    9304:	20e00000 	.word	0x20e00000
    9308:	5002ba0c 	.word	0x5002ba0c

0000930c <CC_HalInit>:
    930c:	2000      	movs	r0, #0
    930e:	4770      	bx	lr

00009310 <CC_HalTerminate>:
    9310:	2000      	movs	r0, #0
    9312:	4770      	bx	lr

00009314 <CC_HalMaskInterrupt>:
    9314:	4b01      	ldr	r3, [pc, #4]	; (931c <CC_HalMaskInterrupt+0x8>)
    9316:	6018      	str	r0, [r3, #0]
    9318:	4770      	bx	lr
    931a:	bf00      	nop
    931c:	5002ba04 	.word	0x5002ba04

00009320 <CC_PalInit>:
    9320:	b510      	push	{r4, lr}
    9322:	4811      	ldr	r0, [pc, #68]	; (9368 <CC_PalInit+0x48>)
    9324:	f000 f848 	bl	93b8 <CC_PalMutexCreate>
    9328:	b100      	cbz	r0, 932c <CC_PalInit+0xc>
    932a:	bd10      	pop	{r4, pc}
    932c:	480f      	ldr	r0, [pc, #60]	; (936c <CC_PalInit+0x4c>)
    932e:	f000 f843 	bl	93b8 <CC_PalMutexCreate>
    9332:	2800      	cmp	r0, #0
    9334:	d1f9      	bne.n	932a <CC_PalInit+0xa>
    9336:	4c0e      	ldr	r4, [pc, #56]	; (9370 <CC_PalInit+0x50>)
    9338:	4620      	mov	r0, r4
    933a:	f000 f83d 	bl	93b8 <CC_PalMutexCreate>
    933e:	2800      	cmp	r0, #0
    9340:	d1f3      	bne.n	932a <CC_PalInit+0xa>
    9342:	4b0c      	ldr	r3, [pc, #48]	; (9374 <CC_PalInit+0x54>)
    9344:	480c      	ldr	r0, [pc, #48]	; (9378 <CC_PalInit+0x58>)
    9346:	601c      	str	r4, [r3, #0]
    9348:	f000 f836 	bl	93b8 <CC_PalMutexCreate>
    934c:	4601      	mov	r1, r0
    934e:	2800      	cmp	r0, #0
    9350:	d1eb      	bne.n	932a <CC_PalInit+0xa>
    9352:	f000 f82d 	bl	93b0 <CC_PalDmaInit>
    9356:	4604      	mov	r4, r0
    9358:	b108      	cbz	r0, 935e <CC_PalInit+0x3e>
    935a:	4620      	mov	r0, r4
    935c:	bd10      	pop	{r4, pc}
    935e:	f000 f83f 	bl	93e0 <CC_PalPowerSaveModeInit>
    9362:	4620      	mov	r0, r4
    9364:	e7fa      	b.n	935c <CC_PalInit+0x3c>
    9366:	bf00      	nop
    9368:	20000218 	.word	0x20000218
    936c:	2000020c 	.word	0x2000020c
    9370:	20000214 	.word	0x20000214
    9374:	2000021c 	.word	0x2000021c
    9378:	20000210 	.word	0x20000210

0000937c <CC_PalTerminate>:
    937c:	b508      	push	{r3, lr}
    937e:	4808      	ldr	r0, [pc, #32]	; (93a0 <CC_PalTerminate+0x24>)
    9380:	f000 f824 	bl	93cc <CC_PalMutexDestroy>
    9384:	4807      	ldr	r0, [pc, #28]	; (93a4 <CC_PalTerminate+0x28>)
    9386:	f000 f821 	bl	93cc <CC_PalMutexDestroy>
    938a:	4807      	ldr	r0, [pc, #28]	; (93a8 <CC_PalTerminate+0x2c>)
    938c:	f000 f81e 	bl	93cc <CC_PalMutexDestroy>
    9390:	4806      	ldr	r0, [pc, #24]	; (93ac <CC_PalTerminate+0x30>)
    9392:	f000 f81b 	bl	93cc <CC_PalMutexDestroy>
    9396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    939a:	f000 b80b 	b.w	93b4 <CC_PalDmaTerminate>
    939e:	bf00      	nop
    93a0:	20000218 	.word	0x20000218
    93a4:	2000020c 	.word	0x2000020c
    93a8:	20000214 	.word	0x20000214
    93ac:	20000210 	.word	0x20000210

000093b0 <CC_PalDmaInit>:
    93b0:	2000      	movs	r0, #0
    93b2:	4770      	bx	lr

000093b4 <CC_PalDmaTerminate>:
    93b4:	4770      	bx	lr
    93b6:	bf00      	nop

000093b8 <CC_PalMutexCreate>:
    93b8:	b508      	push	{r3, lr}
    93ba:	4b03      	ldr	r3, [pc, #12]	; (93c8 <CC_PalMutexCreate+0x10>)
    93bc:	6802      	ldr	r2, [r0, #0]
    93be:	681b      	ldr	r3, [r3, #0]
    93c0:	6810      	ldr	r0, [r2, #0]
    93c2:	4798      	blx	r3
    93c4:	2000      	movs	r0, #0
    93c6:	bd08      	pop	{r3, pc}
    93c8:	200001d0 	.word	0x200001d0

000093cc <CC_PalMutexDestroy>:
    93cc:	b508      	push	{r3, lr}
    93ce:	4b03      	ldr	r3, [pc, #12]	; (93dc <CC_PalMutexDestroy+0x10>)
    93d0:	6802      	ldr	r2, [r0, #0]
    93d2:	685b      	ldr	r3, [r3, #4]
    93d4:	6810      	ldr	r0, [r2, #0]
    93d6:	4798      	blx	r3
    93d8:	2000      	movs	r0, #0
    93da:	bd08      	pop	{r3, pc}
    93dc:	200001d0 	.word	0x200001d0

000093e0 <CC_PalPowerSaveModeInit>:
    93e0:	b570      	push	{r4, r5, r6, lr}
    93e2:	4c09      	ldr	r4, [pc, #36]	; (9408 <CC_PalPowerSaveModeInit+0x28>)
    93e4:	4d09      	ldr	r5, [pc, #36]	; (940c <CC_PalPowerSaveModeInit+0x2c>)
    93e6:	6920      	ldr	r0, [r4, #16]
    93e8:	68ab      	ldr	r3, [r5, #8]
    93ea:	4798      	blx	r3
    93ec:	b118      	cbz	r0, 93f6 <CC_PalPowerSaveModeInit+0x16>
    93ee:	4b08      	ldr	r3, [pc, #32]	; (9410 <CC_PalPowerSaveModeInit+0x30>)
    93f0:	4808      	ldr	r0, [pc, #32]	; (9414 <CC_PalPowerSaveModeInit+0x34>)
    93f2:	685b      	ldr	r3, [r3, #4]
    93f4:	4798      	blx	r3
    93f6:	4a08      	ldr	r2, [pc, #32]	; (9418 <CC_PalPowerSaveModeInit+0x38>)
    93f8:	68eb      	ldr	r3, [r5, #12]
    93fa:	6920      	ldr	r0, [r4, #16]
    93fc:	2100      	movs	r1, #0
    93fe:	6011      	str	r1, [r2, #0]
    9400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9404:	4718      	bx	r3
    9406:	bf00      	nop
    9408:	200001e0 	.word	0x200001e0
    940c:	200001d0 	.word	0x200001d0
    9410:	200001c0 	.word	0x200001c0
    9414:	0000a914 	.word	0x0000a914
    9418:	20000ee8 	.word	0x20000ee8

0000941c <CC_PalPowerSaveModeSelect>:
    941c:	b570      	push	{r4, r5, r6, lr}
    941e:	4d1a      	ldr	r5, [pc, #104]	; (9488 <CC_PalPowerSaveModeSelect+0x6c>)
    9420:	4e1a      	ldr	r6, [pc, #104]	; (948c <CC_PalPowerSaveModeSelect+0x70>)
    9422:	4604      	mov	r4, r0
    9424:	68b2      	ldr	r2, [r6, #8]
    9426:	6928      	ldr	r0, [r5, #16]
    9428:	4790      	blx	r2
    942a:	b9f0      	cbnz	r0, 946a <CC_PalPowerSaveModeSelect+0x4e>
    942c:	b15c      	cbz	r4, 9446 <CC_PalPowerSaveModeSelect+0x2a>
    942e:	4c18      	ldr	r4, [pc, #96]	; (9490 <CC_PalPowerSaveModeSelect+0x74>)
    9430:	6823      	ldr	r3, [r4, #0]
    9432:	b1ab      	cbz	r3, 9460 <CC_PalPowerSaveModeSelect+0x44>
    9434:	2b01      	cmp	r3, #1
    9436:	d01a      	beq.n	946e <CC_PalPowerSaveModeSelect+0x52>
    9438:	3b01      	subs	r3, #1
    943a:	6023      	str	r3, [r4, #0]
    943c:	6928      	ldr	r0, [r5, #16]
    943e:	68f3      	ldr	r3, [r6, #12]
    9440:	4798      	blx	r3
    9442:	2000      	movs	r0, #0
    9444:	bd70      	pop	{r4, r5, r6, pc}
    9446:	4c12      	ldr	r4, [pc, #72]	; (9490 <CC_PalPowerSaveModeSelect+0x74>)
    9448:	6821      	ldr	r1, [r4, #0]
    944a:	b939      	cbnz	r1, 945c <CC_PalPowerSaveModeSelect+0x40>
    944c:	4b11      	ldr	r3, [pc, #68]	; (9494 <CC_PalPowerSaveModeSelect+0x78>)
    944e:	4a12      	ldr	r2, [pc, #72]	; (9498 <CC_PalPowerSaveModeSelect+0x7c>)
    9450:	2001      	movs	r0, #1
    9452:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    9456:	6813      	ldr	r3, [r2, #0]
    9458:	2b00      	cmp	r3, #0
    945a:	d1fc      	bne.n	9456 <CC_PalPowerSaveModeSelect+0x3a>
    945c:	3101      	adds	r1, #1
    945e:	6021      	str	r1, [r4, #0]
    9460:	68f3      	ldr	r3, [r6, #12]
    9462:	6928      	ldr	r0, [r5, #16]
    9464:	4798      	blx	r3
    9466:	2000      	movs	r0, #0
    9468:	bd70      	pop	{r4, r5, r6, pc}
    946a:	480c      	ldr	r0, [pc, #48]	; (949c <CC_PalPowerSaveModeSelect+0x80>)
    946c:	bd70      	pop	{r4, r5, r6, pc}
    946e:	4a0a      	ldr	r2, [pc, #40]	; (9498 <CC_PalPowerSaveModeSelect+0x7c>)
    9470:	6813      	ldr	r3, [r2, #0]
    9472:	2b00      	cmp	r3, #0
    9474:	d1fc      	bne.n	9470 <CC_PalPowerSaveModeSelect+0x54>
    9476:	4a07      	ldr	r2, [pc, #28]	; (9494 <CC_PalPowerSaveModeSelect+0x78>)
    9478:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    947c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    9480:	f7ff ff48 	bl	9314 <CC_HalMaskInterrupt>
    9484:	6823      	ldr	r3, [r4, #0]
    9486:	e7d7      	b.n	9438 <CC_PalPowerSaveModeSelect+0x1c>
    9488:	200001e0 	.word	0x200001e0
    948c:	200001d0 	.word	0x200001d0
    9490:	20000ee8 	.word	0x20000ee8
    9494:	5002a000 	.word	0x5002a000
    9498:	5002b910 	.word	0x5002b910
    949c:	ffff8fe9 	.word	0xffff8fe9

000094a0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    94a0:	4770      	bx	lr

000094a2 <gpio_add_callback>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    94a2:	6883      	ldr	r3, [r0, #8]
    94a4:	69db      	ldr	r3, [r3, #28]
    94a6:	b10b      	cbz	r3, 94ac <gpio_add_callback+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    94a8:	2201      	movs	r2, #1
    94aa:	4718      	bx	r3
}
    94ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
    94b0:	4770      	bx	lr

000094b2 <k_sem_give>:
	z_impl_k_sem_give(sem);
    94b2:	f7fe bceb 	b.w	7e8c <z_impl_k_sem_give>

000094b6 <k_uptime_get>:
{
    94b6:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    94b8:	f000 ff6e 	bl	a398 <z_impl_k_uptime_ticks>
    94bc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    94c0:	fba0 2304 	umull	r2, r3, r0, r4
    94c4:	fb04 3301 	mla	r3, r4, r1, r3
    94c8:	0bd0      	lsrs	r0, r2, #15
}
    94ca:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    94ce:	0bd9      	lsrs	r1, r3, #15
    94d0:	bd10      	pop	{r4, pc}

000094d2 <k_msleep>:
{
    94d2:	b538      	push	{r3, r4, r5, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    94d4:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    94d8:	f240 34e7 	movw	r4, #999	; 0x3e7
    94dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    94e0:	2500      	movs	r5, #0
    94e2:	fbc0 4501 	smlal	r4, r5, r0, r1
    94e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    94ea:	2300      	movs	r3, #0
    94ec:	4620      	mov	r0, r4
    94ee:	4629      	mov	r1, r5
    94f0:	f7f7 fa44 	bl	97c <__aeabi_uldivmod>
}
    94f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    94f8:	f7fe bb5c 	b.w	7bb4 <z_impl_k_sleep>

000094fc <k_sem_take.constprop.0>:
	return z_impl_k_sem_take(sem, timeout);
    94fc:	f7fe bd0a 	b.w	7f14 <z_impl_k_sem_take>

00009500 <k_sem_init.constprop.0>:
	return z_impl_k_sem_init(sem, initial_count, limit);
    9500:	2201      	movs	r2, #1
    9502:	2100      	movs	r1, #0
    9504:	f000 bf29 	b.w	a35a <z_impl_k_sem_init>

00009508 <char2int>:
	switch(ch){
    9508:	3830      	subs	r0, #48	; 0x30
}
    950a:	4770      	bx	lr

0000950c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    950c:	4040      	eors	r0, r0
    950e:	f380 8811 	msr	BASEPRI, r0
    9512:	f04f 0004 	mov.w	r0, #4
    9516:	df02      	svc	2
}
    9518:	4770      	bx	lr

0000951a <encode_uint>:
{
    951a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    951e:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    9520:	78d3      	ldrb	r3, [r2, #3]
{
    9522:	4614      	mov	r4, r2
	switch (specifier) {
    9524:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    9526:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    952a:	4606      	mov	r6, r0
    952c:	460f      	mov	r7, r1
    952e:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    9530:	d02d      	beq.n	958e <encode_uint+0x74>
    9532:	d828      	bhi.n	9586 <encode_uint+0x6c>
		return 16;
    9534:	2b58      	cmp	r3, #88	; 0x58
    9536:	bf14      	ite	ne
    9538:	250a      	movne	r5, #10
    953a:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    953c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    9540:	46aa      	mov	sl, r5
    9542:	f04f 0b00 	mov.w	fp, #0
    9546:	4652      	mov	r2, sl
    9548:	465b      	mov	r3, fp
    954a:	4630      	mov	r0, r6
    954c:	4639      	mov	r1, r7
    954e:	f7f7 fa15 	bl	97c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9552:	2a09      	cmp	r2, #9
    9554:	b2d3      	uxtb	r3, r2
    9556:	d81f      	bhi.n	9598 <encode_uint+0x7e>
    9558:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    955a:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    955c:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    955e:	bf08      	it	eq
    9560:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9562:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    9566:	d301      	bcc.n	956c <encode_uint+0x52>
    9568:	45c8      	cmp	r8, r9
    956a:	d812      	bhi.n	9592 <encode_uint+0x78>
	if (conv->flag_hash) {
    956c:	7823      	ldrb	r3, [r4, #0]
    956e:	069b      	lsls	r3, r3, #26
    9570:	d505      	bpl.n	957e <encode_uint+0x64>
		if (radix == 8) {
    9572:	2d08      	cmp	r5, #8
    9574:	d116      	bne.n	95a4 <encode_uint+0x8a>
			conv->altform_0 = true;
    9576:	78a3      	ldrb	r3, [r4, #2]
    9578:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    957c:	70a3      	strb	r3, [r4, #2]
}
    957e:	4640      	mov	r0, r8
    9580:	b003      	add	sp, #12
    9582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    9586:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    958a:	2b70      	cmp	r3, #112	; 0x70
    958c:	e7d3      	b.n	9536 <encode_uint+0x1c>
	switch (specifier) {
    958e:	2508      	movs	r5, #8
    9590:	e7d4      	b.n	953c <encode_uint+0x22>
		value /= radix;
    9592:	4606      	mov	r6, r0
    9594:	460f      	mov	r7, r1
    9596:	e7d6      	b.n	9546 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9598:	9a01      	ldr	r2, [sp, #4]
    959a:	2a19      	cmp	r2, #25
    959c:	bf94      	ite	ls
    959e:	3337      	addls	r3, #55	; 0x37
    95a0:	3357      	addhi	r3, #87	; 0x57
    95a2:	e7da      	b.n	955a <encode_uint+0x40>
		} else if (radix == 16) {
    95a4:	2d10      	cmp	r5, #16
    95a6:	d1ea      	bne.n	957e <encode_uint+0x64>
			conv->altform_0c = true;
    95a8:	78a3      	ldrb	r3, [r4, #2]
    95aa:	f043 0310 	orr.w	r3, r3, #16
    95ae:	e7e5      	b.n	957c <encode_uint+0x62>

000095b0 <outs>:
{
    95b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95b4:	4607      	mov	r7, r0
    95b6:	4688      	mov	r8, r1
    95b8:	4615      	mov	r5, r2
    95ba:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    95bc:	4614      	mov	r4, r2
    95be:	42b4      	cmp	r4, r6
    95c0:	eba4 0005 	sub.w	r0, r4, r5
    95c4:	d302      	bcc.n	95cc <outs+0x1c>
    95c6:	b93e      	cbnz	r6, 95d8 <outs+0x28>
    95c8:	7823      	ldrb	r3, [r4, #0]
    95ca:	b12b      	cbz	r3, 95d8 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    95cc:	f814 0b01 	ldrb.w	r0, [r4], #1
    95d0:	4641      	mov	r1, r8
    95d2:	47b8      	blx	r7
		if (rc < 0) {
    95d4:	2800      	cmp	r0, #0
    95d6:	daf2      	bge.n	95be <outs+0xe>
}
    95d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000095dc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    95dc:	4770      	bx	lr

000095de <chunk_size>:
		return ((uint16_t *)cmem)[f];
    95de:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    95e2:	8840      	ldrh	r0, [r0, #2]
}
    95e4:	0840      	lsrs	r0, r0, #1
    95e6:	4770      	bx	lr

000095e8 <free_list_add>:
{
    95e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    95ea:	4603      	mov	r3, r0
    95ec:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
    95ee:	f7ff fff6 	bl	95de <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    95f2:	fab0 f080 	clz	r0, r0
    95f6:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    95fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
    95fe:	00ca      	lsls	r2, r1, #3
    9600:	f8dc 6010 	ldr.w	r6, [ip, #16]
    9604:	1d17      	adds	r7, r2, #4
    9606:	b28d      	uxth	r5, r1
    9608:	3206      	adds	r2, #6
    960a:	b956      	cbnz	r6, 9622 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    960c:	2101      	movs	r1, #1
    960e:	fa01 f000 	lsl.w	r0, r1, r0
    9612:	68d9      	ldr	r1, [r3, #12]
    9614:	4301      	orrs	r1, r0
    9616:	60d9      	str	r1, [r3, #12]
		b->next = c;
    9618:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    961c:	53dd      	strh	r5, [r3, r7]
    961e:	529d      	strh	r5, [r3, r2]
}
    9620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    9622:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    9624:	3104      	adds	r1, #4
    9626:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    9628:	53d8      	strh	r0, [r3, r7]
    962a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    962e:	529e      	strh	r6, [r3, r2]
    9630:	80c5      	strh	r5, [r0, #6]
    9632:	525d      	strh	r5, [r3, r1]
    9634:	e7f4      	b.n	9620 <free_list_add+0x38>

00009636 <sys_notify_validate>:
	if (notify == NULL) {
    9636:	4603      	mov	r3, r0
    9638:	b140      	cbz	r0, 964c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    963a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    963c:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    9640:	2a02      	cmp	r2, #2
    9642:	d006      	beq.n	9652 <sys_notify_validate+0x1c>
    9644:	2a03      	cmp	r2, #3
    9646:	d004      	beq.n	9652 <sys_notify_validate+0x1c>
    9648:	2a01      	cmp	r2, #1
    964a:	d005      	beq.n	9658 <sys_notify_validate+0x22>
		return -EINVAL;
    964c:	f06f 0015 	mvn.w	r0, #21
}
    9650:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    9652:	681a      	ldr	r2, [r3, #0]
    9654:	2a00      	cmp	r2, #0
    9656:	d0f9      	beq.n	964c <sys_notify_validate+0x16>
		notify->result = 0;
    9658:	2000      	movs	r0, #0
    965a:	6098      	str	r0, [r3, #8]
    965c:	4770      	bx	lr

0000965e <abort_function>:
{
    965e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    9660:	2000      	movs	r0, #0
    9662:	f7f9 fba9 	bl	2db8 <sys_reboot>

00009666 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9666:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    9668:	f013 0307 	ands.w	r3, r3, #7
    966c:	d105      	bne.n	967a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    966e:	6803      	ldr	r3, [r0, #0]
    9670:	2b00      	cmp	r3, #0
		evt = EVT_START;
    9672:	bf0c      	ite	eq
    9674:	2000      	moveq	r0, #0
    9676:	2003      	movne	r0, #3
    9678:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    967a:	2b02      	cmp	r3, #2
    967c:	d105      	bne.n	968a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    967e:	8bc3      	ldrh	r3, [r0, #30]
    9680:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    9682:	bf14      	ite	ne
    9684:	2000      	movne	r0, #0
    9686:	2004      	moveq	r0, #4
    9688:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    968a:	2b01      	cmp	r3, #1
    968c:	d105      	bne.n	969a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    968e:	6803      	ldr	r3, [r0, #0]
    9690:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    9692:	bf0c      	ite	eq
    9694:	2000      	moveq	r0, #0
    9696:	2005      	movne	r0, #5
    9698:	4770      	bx	lr
	int evt = EVT_NOP;
    969a:	2000      	movs	r0, #0
}
    969c:	4770      	bx	lr

0000969e <notify_one>:
{
    969e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96a2:	460d      	mov	r5, r1
    96a4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    96a6:	4619      	mov	r1, r3
    96a8:	1d28      	adds	r0, r5, #4
{
    96aa:	4690      	mov	r8, r2
    96ac:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    96ae:	f7f8 fe63 	bl	2378 <sys_notify_finalize>
	if (cb) {
    96b2:	4604      	mov	r4, r0
    96b4:	b138      	cbz	r0, 96c6 <notify_one+0x28>
		cb(mgr, cli, state, res);
    96b6:	4633      	mov	r3, r6
    96b8:	4642      	mov	r2, r8
    96ba:	4629      	mov	r1, r5
    96bc:	4638      	mov	r0, r7
    96be:	46a4      	mov	ip, r4
}
    96c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    96c4:	4760      	bx	ip
}
    96c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000096ca <validate_args>:
{
    96ca:	b510      	push	{r4, lr}
    96cc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    96ce:	b140      	cbz	r0, 96e2 <validate_args+0x18>
    96d0:	b139      	cbz	r1, 96e2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    96d2:	1d08      	adds	r0, r1, #4
    96d4:	f7ff ffaf 	bl	9636 <sys_notify_validate>
	if ((rv == 0)
    96d8:	b928      	cbnz	r0, 96e6 <validate_args+0x1c>
	    && ((cli->notify.flags
    96da:	68a3      	ldr	r3, [r4, #8]
    96dc:	f033 0303 	bics.w	r3, r3, #3
    96e0:	d001      	beq.n	96e6 <validate_args+0x1c>
		rv = -EINVAL;
    96e2:	f06f 0015 	mvn.w	r0, #21
}
    96e6:	bd10      	pop	{r4, pc}

000096e8 <onoff_manager_init>:
{
    96e8:	b538      	push	{r3, r4, r5, lr}
    96ea:	460c      	mov	r4, r1
	if ((mgr == NULL)
    96ec:	4605      	mov	r5, r0
    96ee:	b158      	cbz	r0, 9708 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    96f0:	b151      	cbz	r1, 9708 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    96f2:	680b      	ldr	r3, [r1, #0]
    96f4:	b143      	cbz	r3, 9708 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    96f6:	684b      	ldr	r3, [r1, #4]
    96f8:	b133      	cbz	r3, 9708 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    96fa:	2220      	movs	r2, #32
    96fc:	2100      	movs	r1, #0
    96fe:	f000 f9fa 	bl	9af6 <memset>
    9702:	612c      	str	r4, [r5, #16]
	return 0;
    9704:	2000      	movs	r0, #0
}
    9706:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9708:	f06f 0015 	mvn.w	r0, #21
    970c:	e7fb      	b.n	9706 <onoff_manager_init+0x1e>

0000970e <arch_printk_char_out>:
}
    970e:	2000      	movs	r0, #0
    9710:	4770      	bx	lr

00009712 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    9712:	b40f      	push	{r0, r1, r2, r3}
    9714:	b507      	push	{r0, r1, r2, lr}
    9716:	a904      	add	r1, sp, #16
    9718:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    971c:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    971e:	f7f9 fb3d 	bl	2d9c <vprintk>
	}
	va_end(ap);
}
    9722:	b003      	add	sp, #12
    9724:	f85d eb04 	ldr.w	lr, [sp], #4
    9728:	b004      	add	sp, #16
    972a:	4770      	bx	lr

0000972c <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    972c:	2200      	movs	r2, #0
    972e:	e9c0 2200 	strd	r2, r2, [r0]
    9732:	6082      	str	r2, [r0, #8]
}
    9734:	4770      	bx	lr

00009736 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9736:	4604      	mov	r4, r0
    9738:	b508      	push	{r3, lr}
    973a:	4608      	mov	r0, r1
    973c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    973e:	461a      	mov	r2, r3
    9740:	47a0      	blx	r4
	return z_impl_z_current_get();
    9742:	f7fe fa6f 	bl	7c24 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9746:	f7f9 fe93 	bl	3470 <z_impl_k_thread_abort>

0000974a <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
    974a:	6883      	ldr	r3, [r0, #8]
    974c:	6a1b      	ldr	r3, [r3, #32]
    974e:	b103      	cbz	r3, 9752 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    9750:	4718      	bx	r3
}
    9752:	4770      	bx	lr

00009754 <tty_putchar>:
{
    9754:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    9758:	4604      	mov	r4, r0
    975a:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
    975c:	f100 062c 	add.w	r6, r0, #44	; 0x2c
			 k_is_in_isr() ? K_NO_WAIT :
    9760:	f000 fe0b 	bl	a37a <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
    9764:	bba8      	cbnz	r0, 97d2 <tty_putchar+0x7e>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
    9766:	6d21      	ldr	r1, [r4, #80]	; 0x50
	res = k_sem_take(&tty->tx_sem,
    9768:	1c4b      	adds	r3, r1, #1
    976a:	d035      	beq.n	97d8 <tty_putchar+0x84>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
    976c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    9770:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9774:	f240 38e7 	movw	r8, #999	; 0x3e7
    9778:	f04f 0900 	mov.w	r9, #0
    977c:	fbc0 8901 	smlal	r8, r9, r0, r1
    9780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9784:	2300      	movs	r3, #0
    9786:	4640      	mov	r0, r8
    9788:	4649      	mov	r1, r9
    978a:	f7f7 f8f7 	bl	97c <__aeabi_uldivmod>
    978e:	4602      	mov	r2, r0
    9790:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    9792:	4630      	mov	r0, r6
    9794:	f7fe fbbe 	bl	7f14 <z_impl_k_sem_take>
	if (res < 0) {
    9798:	2800      	cmp	r0, #0
    979a:	db18      	blt.n	97ce <tty_putchar+0x7a>
	__asm__ volatile(
    979c:	f04f 0320 	mov.w	r3, #32
    97a0:	f3ef 8211 	mrs	r2, BASEPRI
    97a4:	f383 8812 	msr	BASEPRI_MAX, r3
    97a8:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
    97ac:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
	if (tx_next >= tty->tx_ringbuf_sz) {
    97b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	tx_next = tty->tx_put + 1;
    97b2:	1c4b      	adds	r3, r1, #1
		tx_next = 0;
    97b4:	4298      	cmp	r0, r3
    97b6:	bf98      	it	ls
    97b8:	2300      	movls	r3, #0
	if (tx_next == tty->tx_get) {
    97ba:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
    97be:	4298      	cmp	r0, r3
    97c0:	d10d      	bne.n	97de <tty_putchar+0x8a>
	__asm__ volatile(
    97c2:	f382 8811 	msr	BASEPRI, r2
    97c6:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
    97ca:	f06f 001b 	mvn.w	r0, #27
}
    97ce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	res = k_sem_take(&tty->tx_sem,
    97d2:	2200      	movs	r2, #0
    97d4:	4613      	mov	r3, r2
    97d6:	e7dc      	b.n	9792 <tty_putchar+0x3e>
    97d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    97dc:	e7fa      	b.n	97d4 <tty_putchar+0x80>
	tty->tx_ringbuf[tty->tx_put] = c;
    97de:	6c60      	ldr	r0, [r4, #68]	; 0x44
    97e0:	5445      	strb	r5, [r0, r1]
	tty->tx_put = tx_next;
    97e2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    97e6:	f382 8811 	msr	BASEPRI, r2
    97ea:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
    97ee:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_enable != NULL) {
    97f0:	6883      	ldr	r3, [r0, #8]
    97f2:	69db      	ldr	r3, [r3, #28]
    97f4:	b113      	cbz	r3, 97fc <tty_putchar+0xa8>
		api->irq_tx_enable(dev);
    97f6:	4798      	blx	r3
	return 0;
    97f8:	2000      	movs	r0, #0
    97fa:	e7e8      	b.n	97ce <tty_putchar+0x7a>
    97fc:	4618      	mov	r0, r3
    97fe:	e7e6      	b.n	97ce <tty_putchar+0x7a>

00009800 <tty_uart_isr>:
{
    9800:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9802:	4605      	mov	r5, r0
    9804:	460c      	mov	r4, r1
	if (api->irq_update == NULL) {
    9806:	6883      	ldr	r3, [r0, #8]
    9808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    980a:	b103      	cbz	r3, 980e <tty_uart_isr+0xe>
	return api->irq_update(dev);
    980c:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    980e:	68ab      	ldr	r3, [r5, #8]
    9810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9812:	b98b      	cbnz	r3, 9838 <tty_uart_isr+0x38>
	k_sem_give(&tty->rx_sem);
    9814:	1d26      	adds	r6, r4, #4
	if (api->fifo_read == NULL) {
    9816:	68ab      	ldr	r3, [r5, #8]
    9818:	699b      	ldr	r3, [r3, #24]
    981a:	b9f3      	cbnz	r3, 985a <tty_uart_isr+0x5a>
	int rx_next = tty->rx_put + 1;
    981c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
	if (rx_next >= tty->rx_ringbuf_sz) {
    981e:	6a21      	ldr	r1, [r4, #32]
	int rx_next = tty->rx_put + 1;
    9820:	1c53      	adds	r3, r2, #1
		rx_next = 0;
    9822:	4299      	cmp	r1, r3
    9824:	bf98      	it	ls
    9826:	2300      	movls	r3, #0
	if (rx_next == tty->rx_get) {
    9828:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    982a:	4299      	cmp	r1, r3
    982c:	d11d      	bne.n	986a <tty_uart_isr+0x6a>
		tty_putchar(tty, '~');
    982e:	217e      	movs	r1, #126	; 0x7e
    9830:	4620      	mov	r0, r4
    9832:	f7ff ff8f 	bl	9754 <tty_putchar>
		return 1;
    9836:	e7ee      	b.n	9816 <tty_uart_isr+0x16>
	return api->irq_rx_ready(dev);
    9838:	4628      	mov	r0, r5
    983a:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    983c:	2800      	cmp	r0, #0
    983e:	d1e9      	bne.n	9814 <tty_uart_isr+0x14>
	if (api->irq_tx_ready == NULL) {
    9840:	68ab      	ldr	r3, [r5, #8]
    9842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9844:	b9d3      	cbnz	r3, 987c <tty_uart_isr+0x7c>
		if (tty->tx_get == tty->tx_put) {
    9846:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    984a:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
    984e:	429a      	cmp	r2, r3
    9850:	d11a      	bne.n	9888 <tty_uart_isr+0x88>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
    9852:	4628      	mov	r0, r5
    9854:	f7ff ff79 	bl	974a <z_impl_uart_irq_tx_disable>
}
    9858:	e014      	b.n	9884 <tty_uart_isr+0x84>
	return api->fifo_read(dev, rx_data, size);
    985a:	2201      	movs	r2, #1
    985c:	f10d 0107 	add.w	r1, sp, #7
    9860:	4628      	mov	r0, r5
    9862:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
    9864:	2800      	cmp	r0, #0
    9866:	d1d9      	bne.n	981c <tty_uart_isr+0x1c>
    9868:	e7ea      	b.n	9840 <tty_uart_isr+0x40>
	tty->rx_ringbuf[tty->rx_put] = c;
    986a:	69e1      	ldr	r1, [r4, #28]
			tty_irq_input_hook(tty, c);
    986c:	f89d 0007 	ldrb.w	r0, [sp, #7]
	tty->rx_ringbuf[tty->rx_put] = c;
    9870:	5488      	strb	r0, [r1, r2]
	tty->rx_put = rx_next;
    9872:	84e3      	strh	r3, [r4, #38]	; 0x26
	z_impl_k_sem_give(sem);
    9874:	4630      	mov	r0, r6
    9876:	f7fe fb09 	bl	7e8c <z_impl_k_sem_give>
}
    987a:	e7cc      	b.n	9816 <tty_uart_isr+0x16>
	return api->irq_tx_ready(dev);
    987c:	4628      	mov	r0, r5
    987e:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    9880:	2800      	cmp	r0, #0
    9882:	d1e0      	bne.n	9846 <tty_uart_isr+0x46>
}
    9884:	b002      	add	sp, #8
    9886:	bd70      	pop	{r4, r5, r6, pc}
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
    9888:	6c61      	ldr	r1, [r4, #68]	; 0x44
    988a:	1c5a      	adds	r2, r3, #1
    988c:	4419      	add	r1, r3
	if (api->fifo_fill == NULL) {
    988e:	68ab      	ldr	r3, [r5, #8]
    9890:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
    9894:	695b      	ldr	r3, [r3, #20]
    9896:	b113      	cbz	r3, 989e <tty_uart_isr+0x9e>
	return api->fifo_fill(dev, tx_data, size);
    9898:	2201      	movs	r2, #1
    989a:	4628      	mov	r0, r5
    989c:	4798      	blx	r3
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
    989e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    98a0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    98a4:	429a      	cmp	r2, r3
				tty->tx_get = 0U;
    98a6:	bf24      	itt	cs
    98a8:	2300      	movcs	r3, #0
    98aa:	f8a4 304c 	strhcs.w	r3, [r4, #76]	; 0x4c
	z_impl_k_sem_give(sem);
    98ae:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    98b2:	f7fe faeb 	bl	7e8c <z_impl_k_sem_give>
}
    98b6:	e7e5      	b.n	9884 <tty_uart_isr+0x84>

000098b8 <tty_write>:
	if (tty->tx_ringbuf_sz == 0U) {
    98b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
    98ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98be:	4680      	mov	r8, r0
    98c0:	460e      	mov	r6, r1
    98c2:	4617      	mov	r7, r2
	if (tty->tx_ringbuf_sz == 0U) {
    98c4:	b9fb      	cbnz	r3, 9906 <tty_write+0x4e>
    98c6:	188c      	adds	r4, r1, r2
		while (size--) {
    98c8:	42b4      	cmp	r4, r6
    98ca:	d103      	bne.n	98d4 <tty_write+0x1c>
		return out_size;
    98cc:	463c      	mov	r4, r7
}
    98ce:	4620      	mov	r0, r4
    98d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(tty->uart_dev, *p++);
    98d4:	f8d8 0000 	ldr.w	r0, [r8]
    98d8:	f816 1b01 	ldrb.w	r1, [r6], #1
	api->poll_out(dev, out_char);
    98dc:	6883      	ldr	r3, [r0, #8]
    98de:	685b      	ldr	r3, [r3, #4]
    98e0:	4798      	blx	r3
}
    98e2:	e7f1      	b.n	98c8 <tty_write+0x10>
		res = tty_putchar(tty, *p++);
    98e4:	5d71      	ldrb	r1, [r6, r5]
    98e6:	4640      	mov	r0, r8
    98e8:	f7ff ff34 	bl	9754 <tty_putchar>
		if (res < 0) {
    98ec:	1e04      	subs	r4, r0, #0
    98ee:	da05      	bge.n	98fc <tty_write+0x44>
			if (out_size == 0) {
    98f0:	b93d      	cbnz	r5, 9902 <tty_write+0x4a>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    98f2:	f7fc fbd1 	bl	6098 <z_impl_z_errno>
				errno = -res;
    98f6:	4263      	negs	r3, r4
    98f8:	6003      	str	r3, [r0, #0]
				return res;
    98fa:	e7e8      	b.n	98ce <tty_write+0x16>
		out_size++;
    98fc:	3501      	adds	r5, #1
	while (size--) {
    98fe:	42bd      	cmp	r5, r7
    9900:	d1f0      	bne.n	98e4 <tty_write+0x2c>
	return out_size;
    9902:	462c      	mov	r4, r5
    9904:	e7e3      	b.n	98ce <tty_write+0x16>
	size_t out_size = 0;
    9906:	2500      	movs	r5, #0
    9908:	e7f9      	b.n	98fe <tty_write+0x46>

0000990a <tty_read>:
{
    990a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (tty->rx_ringbuf_sz == 0U) {
    990e:	6a04      	ldr	r4, [r0, #32]
{
    9910:	b085      	sub	sp, #20
    9912:	4605      	mov	r5, r0
    9914:	460e      	mov	r6, r1
    9916:	4617      	mov	r7, r2
	if (tty->rx_ringbuf_sz == 0U) {
    9918:	2c00      	cmp	r4, #0
    991a:	d175      	bne.n	9a08 <tty_read+0xfe>
	uint32_t timeout = tty->rx_timeout;
    991c:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
	while (size) {
    9920:	b18f      	cbz	r7, 9946 <tty_read+0x3c>
		res = uart_poll_in(tty->uart_dev, &c);
    9922:	6828      	ldr	r0, [r5, #0]
	if (api->poll_in == NULL) {
    9924:	6883      	ldr	r3, [r0, #8]
    9926:	681b      	ldr	r3, [r3, #0]
    9928:	b18b      	cbz	r3, 994e <tty_read+0x44>
	return api->poll_in(dev, p_char);
    992a:	f10d 010f 	add.w	r1, sp, #15
    992e:	4798      	blx	r3
		if (res <= -2) {
    9930:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9934:	4680      	mov	r8, r0
    9936:	da0d      	bge.n	9954 <tty_read+0x4a>
			if (out_size == 0) {
    9938:	b92c      	cbnz	r4, 9946 <tty_read+0x3c>
    993a:	f7fc fbad 	bl	6098 <z_impl_z_errno>
				return -1;
    993e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
				errno = res;
    9942:	f8c0 8000 	str.w	r8, [r0]
}
    9946:	4620      	mov	r0, r4
    9948:	b005      	add	sp, #20
    994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOSYS;
    994e:	f06f 0857 	mvn.w	r8, #87	; 0x57
    9952:	e7f1      	b.n	9938 <tty_read+0x2e>
		if (res == 0) {
    9954:	b958      	cbnz	r0, 996e <tty_read+0x64>
			*p++ = c;
    9956:	f89d 300f 	ldrb.w	r3, [sp, #15]
    995a:	f806 3b01 	strb.w	r3, [r6], #1
		if (size == 0 ||
    995e:	3f01      	subs	r7, #1
			out_size++;
    9960:	f104 0401 	add.w	r4, r4, #1
		if (size == 0 ||
    9964:	d0ef      	beq.n	9946 <tty_read+0x3c>
    9966:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    996a:	d103      	bne.n	9974 <tty_read+0x6a>
    996c:	e7d8      	b.n	9920 <tty_read+0x16>
    996e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    9972:	d005      	beq.n	9980 <tty_read+0x76>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
    9974:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    9978:	f1b9 0f00 	cmp.w	r9, #0
    997c:	d0e3      	beq.n	9946 <tty_read+0x3c>
    997e:	4699      	mov	r9, r3
		if (res == -1) {
    9980:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    9984:	d1cc      	bne.n	9920 <tty_read+0x16>
	return z_impl_k_sleep(timeout);
    9986:	2100      	movs	r1, #0
    9988:	2021      	movs	r0, #33	; 0x21
    998a:	f7fe f913 	bl	7bb4 <z_impl_k_sleep>
    998e:	e7c7      	b.n	9920 <tty_read+0x16>
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
    9990:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    9992:	1c4b      	adds	r3, r1, #1
    9994:	d034      	beq.n	9a00 <tty_read+0xf6>
    9996:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    999a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    999e:	46c3      	mov	fp, r8
    99a0:	46cc      	mov	ip, r9
    99a2:	fbc0 bc01 	smlal	fp, ip, r0, r1
    99a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    99aa:	2300      	movs	r3, #0
    99ac:	4658      	mov	r0, fp
    99ae:	4661      	mov	r1, ip
    99b0:	f7f6 ffe4 	bl	97c <__aeabi_uldivmod>
    99b4:	4602      	mov	r2, r0
    99b6:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    99b8:	9801      	ldr	r0, [sp, #4]
    99ba:	f7fe faab 	bl	7f14 <z_impl_k_sem_take>
	if (res < 0) {
    99be:	1e04      	subs	r4, r0, #0
    99c0:	db2b      	blt.n	9a1a <tty_read+0x110>
	__asm__ volatile(
    99c2:	f04f 0320 	mov.w	r3, #32
    99c6:	f3ef 8011 	mrs	r0, BASEPRI
    99ca:	f383 8812 	msr	BASEPRI_MAX, r3
    99ce:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
    99d2:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    99d4:	69e9      	ldr	r1, [r5, #28]
    99d6:	1c53      	adds	r3, r2, #1
    99d8:	b29b      	uxth	r3, r3
    99da:	84ab      	strh	r3, [r5, #36]	; 0x24
    99dc:	5c8a      	ldrb	r2, [r1, r2]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
    99de:	6a29      	ldr	r1, [r5, #32]
    99e0:	428b      	cmp	r3, r1
		tty->rx_get = 0U;
    99e2:	bf24      	itt	cs
    99e4:	2300      	movcs	r3, #0
    99e6:	84ab      	strhcs	r3, [r5, #36]	; 0x24
	__asm__ volatile(
    99e8:	f380 8811 	msr	BASEPRI, r0
    99ec:	f3bf 8f6f 	isb	sy
		*p++ = (uint8_t)res;
    99f0:	f806 200a 	strb.w	r2, [r6, sl]
		out_size++;
    99f4:	f10a 0a01 	add.w	sl, sl, #1
	while (size--) {
    99f8:	45ba      	cmp	sl, r7
    99fa:	d1c9      	bne.n	9990 <tty_read+0x86>
	return out_size;
    99fc:	4654      	mov	r4, sl
    99fe:	e7a2      	b.n	9946 <tty_read+0x3c>
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
    9a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9a04:	4613      	mov	r3, r2
    9a06:	e7d7      	b.n	99b8 <tty_read+0xae>
    9a08:	1d03      	adds	r3, r0, #4
	size_t out_size = 0;
    9a0a:	f04f 0a00 	mov.w	sl, #0
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
    9a0e:	9301      	str	r3, [sp, #4]
    9a10:	f240 38e7 	movw	r8, #999	; 0x3e7
    9a14:	f04f 0900 	mov.w	r9, #0
    9a18:	e7ee      	b.n	99f8 <tty_read+0xee>
			if (out_size == 0) {
    9a1a:	f1ba 0f00 	cmp.w	sl, #0
    9a1e:	d1ed      	bne.n	99fc <tty_read+0xf2>
    9a20:	f7fc fb3a 	bl	6098 <z_impl_z_errno>
				errno = -res;
    9a24:	4263      	negs	r3, r4
    9a26:	6003      	str	r3, [r0, #0]
				return res;
    9a28:	e78d      	b.n	9946 <tty_read+0x3c>

00009a2a <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
    9a2a:	b570      	push	{r4, r5, r6, lr}
    9a2c:	4604      	mov	r4, r0
    9a2e:	460e      	mov	r6, r1
	uart_irq_rx_disable(tty->uart_dev);
    9a30:	6800      	ldr	r0, [r0, #0]
{
    9a32:	4615      	mov	r5, r2
	if (api->irq_rx_disable != NULL) {
    9a34:	6883      	ldr	r3, [r0, #8]
    9a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9a38:	b103      	cbz	r3, 9a3c <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
    9a3a:	4798      	blx	r3

	tty->rx_ringbuf = buf;
	tty->rx_ringbuf_sz = size;
    9a3c:	e9c4 6507 	strd	r6, r5, [r4, #28]

	if (size > 0) {
    9a40:	b155      	cbz	r5, 9a58 <tty_set_rx_buf+0x2e>
	return z_impl_k_sem_init(sem, initial_count, limit);
    9a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9a46:	2100      	movs	r1, #0
    9a48:	1d20      	adds	r0, r4, #4
    9a4a:	f000 fc86 	bl	a35a <z_impl_k_sem_init>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
    9a4e:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable != NULL) {
    9a50:	6883      	ldr	r3, [r0, #8]
    9a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9a54:	b103      	cbz	r3, 9a58 <tty_set_rx_buf+0x2e>
		api->irq_rx_enable(dev);
    9a56:	4798      	blx	r3
	}

	return 0;
}
    9a58:	2000      	movs	r0, #0
    9a5a:	bd70      	pop	{r4, r5, r6, pc}

00009a5c <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
    9a5c:	b570      	push	{r4, r5, r6, lr}
    9a5e:	4604      	mov	r4, r0
    9a60:	460e      	mov	r6, r1
    9a62:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
    9a64:	6800      	ldr	r0, [r0, #0]
	z_impl_uart_irq_tx_disable(dev);
    9a66:	f7ff fe70 	bl	974a <z_impl_uart_irq_tx_disable>

	tty->tx_ringbuf = buf;
	tty->tx_ringbuf_sz = size;
    9a6a:	e9c4 6511 	strd	r6, r5, [r4, #68]	; 0x44
    9a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9a72:	18a9      	adds	r1, r5, r2
    9a74:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9a78:	f000 fc6f 	bl	a35a <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
    9a7c:	2000      	movs	r0, #0
    9a7e:	bd70      	pop	{r4, r5, r6, pc}

00009a80 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    9a80:	f7fc bb10 	b.w	60a4 <z_fatal_error>

00009a84 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    9a84:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    9a86:	6800      	ldr	r0, [r0, #0]
    9a88:	f7fc bb0c 	b.w	60a4 <z_fatal_error>

00009a8c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    9a8c:	2100      	movs	r1, #0
    9a8e:	2001      	movs	r0, #1
    9a90:	f7ff bff6 	b.w	9a80 <z_arm_fatal_error>

00009a94 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    9a94:	b508      	push	{r3, lr}
	handler();
    9a96:	f7f9 fa01 	bl	2e9c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    9a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    9a9e:	f7f9 bb0f 	b.w	30c0 <z_arm_exc_exit>

00009aa2 <_stdout_hook_default>:
}
    9aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9aa6:	4770      	bx	lr

00009aa8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    9aa8:	4603      	mov	r3, r0
	size_t n = 0;
    9aaa:	2000      	movs	r0, #0

	while (*s != '\0') {
    9aac:	5c1a      	ldrb	r2, [r3, r0]
    9aae:	b902      	cbnz	r2, 9ab2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    9ab0:	4770      	bx	lr
		n++;
    9ab2:	3001      	adds	r0, #1
    9ab4:	e7fa      	b.n	9aac <strlen+0x4>

00009ab6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    9ab6:	4603      	mov	r3, r0
	size_t n = 0;
    9ab8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    9aba:	5c1a      	ldrb	r2, [r3, r0]
    9abc:	b10a      	cbz	r2, 9ac2 <strnlen+0xc>
    9abe:	4288      	cmp	r0, r1
    9ac0:	d100      	bne.n	9ac4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    9ac2:	4770      	bx	lr
		n++;
    9ac4:	3001      	adds	r0, #1
    9ac6:	e7f8      	b.n	9aba <strnlen+0x4>

00009ac8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    9ac8:	1e43      	subs	r3, r0, #1
    9aca:	3901      	subs	r1, #1
    9acc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9ad0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    9ad4:	4282      	cmp	r2, r0
    9ad6:	d101      	bne.n	9adc <strcmp+0x14>
    9ad8:	2a00      	cmp	r2, #0
    9ada:	d1f7      	bne.n	9acc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    9adc:	1a10      	subs	r0, r2, r0
    9ade:	4770      	bx	lr

00009ae0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    9ae0:	b510      	push	{r4, lr}
    9ae2:	1e43      	subs	r3, r0, #1
    9ae4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    9ae6:	4291      	cmp	r1, r2
    9ae8:	d100      	bne.n	9aec <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    9aea:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    9aec:	f811 4b01 	ldrb.w	r4, [r1], #1
    9af0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    9af4:	e7f7      	b.n	9ae6 <memcpy+0x6>

00009af6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    9af6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    9af8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    9afa:	4603      	mov	r3, r0
	while (n > 0) {
    9afc:	4293      	cmp	r3, r2
    9afe:	d100      	bne.n	9b02 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    9b00:	4770      	bx	lr
		*(d_byte++) = c_byte;
    9b02:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9b06:	e7f9      	b.n	9afc <memset+0x6>

00009b08 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    9b08:	b084      	sub	sp, #16
    9b0a:	ab04      	add	r3, sp, #16
    9b0c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    9b10:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9b14:	2b06      	cmp	r3, #6
    9b16:	d108      	bne.n	9b2a <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9b1c:	2201      	movs	r2, #1
    9b1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9b22:	f3bf 8f4f 	dsb	sy
        __WFE();
    9b26:	bf20      	wfe
    while (true)
    9b28:	e7fd      	b.n	9b26 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    9b2a:	b004      	add	sp, #16
    9b2c:	4770      	bx	lr

00009b2e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    9b2e:	b084      	sub	sp, #16
    9b30:	ab04      	add	r3, sp, #16
    9b32:	e903 0007 	stmdb	r3, {r0, r1, r2}
    9b36:	2300      	movs	r3, #0
    9b38:	f383 8811 	msr	BASEPRI, r3
    9b3c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    9b40:	b004      	add	sp, #16
    9b42:	4770      	bx	lr

00009b44 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9b44:	f1a0 0308 	sub.w	r3, r0, #8
    9b48:	f3bf 8f5b 	dmb	ish
    9b4c:	e853 2f00 	ldrex	r2, [r3]
    9b50:	1c51      	adds	r1, r2, #1
    9b52:	e843 1c00 	strex	ip, r1, [r3]
    9b56:	f1bc 0f00 	cmp.w	ip, #0
    9b5a:	d1f7      	bne.n	9b4c <adc_context_on_timer_expired+0x8>
    9b5c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    9b60:	b91a      	cbnz	r2, 9b6a <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    9b62:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9b66:	f7f9 be13 	b.w	3790 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    9b6a:	f06f 030f 	mvn.w	r3, #15
    9b6e:	6683      	str	r3, [r0, #104]	; 0x68
}
    9b70:	4770      	bx	lr

00009b72 <set_starting_state>:
{
    9b72:	b510      	push	{r4, lr}
	__asm__ volatile(
    9b74:	f04f 0320 	mov.w	r3, #32
    9b78:	f3ef 8211 	mrs	r2, BASEPRI
    9b7c:	f383 8812 	msr	BASEPRI_MAX, r3
    9b80:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9b84:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    9b86:	f003 0407 	and.w	r4, r3, #7
    9b8a:	2c01      	cmp	r4, #1
    9b8c:	d106      	bne.n	9b9c <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    9b8e:	6001      	str	r1, [r0, #0]
	int err = 0;
    9b90:	2000      	movs	r0, #0
	__asm__ volatile(
    9b92:	f382 8811 	msr	BASEPRI, r2
    9b96:	f3bf 8f6f 	isb	sy
}
    9b9a:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    9b9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    9ba0:	428b      	cmp	r3, r1
		err = -EALREADY;
    9ba2:	bf14      	ite	ne
    9ba4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9ba8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    9bac:	e7f1      	b.n	9b92 <set_starting_state+0x20>

00009bae <set_on_state>:
	__asm__ volatile(
    9bae:	f04f 0320 	mov.w	r3, #32
    9bb2:	f3ef 8211 	mrs	r2, BASEPRI
    9bb6:	f383 8812 	msr	BASEPRI_MAX, r3
    9bba:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9bbe:	6803      	ldr	r3, [r0, #0]
    9bc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9bc4:	f043 0302 	orr.w	r3, r3, #2
    9bc8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    9bca:	f382 8811 	msr	BASEPRI, r2
    9bce:	f3bf 8f6f 	isb	sy
}
    9bd2:	4770      	bx	lr

00009bd4 <onoff_started_callback>:
	return &data->mgr[type];
    9bd4:	6900      	ldr	r0, [r0, #16]
    9bd6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    9bd8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    9bdc:	2100      	movs	r1, #0
    9bde:	4710      	bx	r2

00009be0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9be0:	2000      	movs	r0, #0
    9be2:	f7fb b98f 	b.w	4f04 <nrfx_clock_start>

00009be6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9be6:	2000      	movs	r0, #0
    9be8:	f7fb b9e0 	b.w	4fac <nrfx_clock_stop>

00009bec <api_stop>:
	return stop(dev, subsys, CTX_API);
    9bec:	2280      	movs	r2, #128	; 0x80
    9bee:	f7fa b835 	b.w	3c5c <stop>

00009bf2 <blocking_start_callback>:
{
    9bf2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9bf4:	f7fe b94a 	b.w	7e8c <z_impl_k_sem_give>

00009bf8 <api_start>:
{
    9bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9bfc:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    9bfe:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    9c00:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    9c02:	436f      	muls	r7, r5
{
    9c04:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    9c06:	f107 0048 	add.w	r0, r7, #72	; 0x48
    9c0a:	2180      	movs	r1, #128	; 0x80
    9c0c:	4420      	add	r0, r4
{
    9c0e:	4690      	mov	r8, r2
    9c10:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    9c12:	f7ff ffae 	bl	9b72 <set_starting_state>
	if (err < 0) {
    9c16:	2800      	cmp	r0, #0
    9c18:	db07      	blt.n	9c2a <api_start+0x32>
	subdata->cb = cb;
    9c1a:	443c      	add	r4, r7
	subdata->user_data = user_data;
    9c1c:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    9c20:	6873      	ldr	r3, [r6, #4]
    9c22:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    9c26:	4798      	blx	r3
	return 0;
    9c28:	2000      	movs	r0, #0
}
    9c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009c2e <uart_poll_out>:
	api->poll_out(dev, out_char);
    9c2e:	6883      	ldr	r3, [r0, #8]
    9c30:	685b      	ldr	r3, [r3, #4]
    9c32:	4718      	bx	r3

00009c34 <debug_hook_out_nop>:
}
    9c34:	2000      	movs	r0, #0
    9c36:	4770      	bx	lr

00009c38 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9c38:	6843      	ldr	r3, [r0, #4]
    9c3a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9c3c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9c40:	600b      	str	r3, [r1, #0]
}
    9c42:	2000      	movs	r0, #0
    9c44:	4770      	bx	lr

00009c46 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9c46:	6843      	ldr	r3, [r0, #4]
    9c48:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    9c4a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    9c4e:	4042      	eors	r2, r0
    9c50:	400a      	ands	r2, r1
    9c52:	4042      	eors	r2, r0
    p_reg->OUT = value;
    9c54:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    9c58:	2000      	movs	r0, #0
    9c5a:	4770      	bx	lr

00009c5c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9c5c:	6843      	ldr	r3, [r0, #4]
    9c5e:	685b      	ldr	r3, [r3, #4]
}
    9c60:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    9c62:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    9c66:	4770      	bx	lr

00009c68 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9c68:	6843      	ldr	r3, [r0, #4]
    9c6a:	685b      	ldr	r3, [r3, #4]
}
    9c6c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    9c6e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    9c72:	4770      	bx	lr

00009c74 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9c74:	6843      	ldr	r3, [r0, #4]
    9c76:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    9c78:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    9c7c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    9c7e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    9c82:	2000      	movs	r0, #0
    9c84:	4770      	bx	lr

00009c86 <any_other_channel_is_active>:
{
    9c86:	b530      	push	{r4, r5, lr}
    9c88:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    9c8a:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    9c8c:	b2da      	uxtb	r2, r3
    9c8e:	4282      	cmp	r2, r0
    9c90:	d007      	beq.n	9ca2 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    9c92:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    9c96:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    9c9a:	b112      	cbz	r2, 9ca2 <any_other_channel_is_active+0x1c>
    9c9c:	898d      	ldrh	r5, [r1, #12]
    9c9e:	4295      	cmp	r5, r2
    9ca0:	d804      	bhi.n	9cac <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    9ca2:	3301      	adds	r3, #1
    9ca4:	2b04      	cmp	r3, #4
    9ca6:	d1f1      	bne.n	9c8c <any_other_channel_is_active+0x6>
	return false;
    9ca8:	2000      	movs	r0, #0
}
    9caa:	bd30      	pop	{r4, r5, pc}
			return true;
    9cac:	2001      	movs	r0, #1
    9cae:	e7fc      	b.n	9caa <any_other_channel_is_active+0x24>

00009cb0 <pwm_nrfx_pin_set>:
{
    9cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cb4:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	const struct pwm_nrfx_config *config = dev->config;
    9cb8:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    9cba:	6904      	ldr	r4, [r0, #16]
{
    9cbc:	4688      	mov	r8, r1
    9cbe:	4616      	mov	r6, r2
    9cc0:	4699      	mov	r9, r3
	if (flags) {
    9cc2:	2d00      	cmp	r5, #0
    9cc4:	d140      	bne.n	9d48 <pwm_nrfx_pin_set+0x98>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    9cc6:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    9cc8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    9ccc:	2bff      	cmp	r3, #255	; 0xff
    9cce:	d003      	beq.n	9cd8 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    9cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9cd4:	4598      	cmp	r8, r3
    9cd6:	d03a      	beq.n	9d4e <pwm_nrfx_pin_set+0x9e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    9cd8:	3501      	adds	r5, #1
    9cda:	b2ed      	uxtb	r5, r5
    9cdc:	2d04      	cmp	r5, #4
    9cde:	d1f3      	bne.n	9cc8 <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    9ce0:	f06f 0015 	mvn.w	r0, #21
    9ce4:	e009      	b.n	9cfa <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    9ce6:	2000      	movs	r0, #0
    9ce8:	e042      	b.n	9d70 <pwm_nrfx_pin_set+0xc0>
		countertop >>= 1;
    9cea:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    9cec:	2b08      	cmp	r3, #8
		countertop >>= 1;
    9cee:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    9cf2:	d158      	bne.n	9da6 <pwm_nrfx_pin_set+0xf6>
    9cf4:	e7f4      	b.n	9ce0 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    9cf6:	b9d0      	cbnz	r0, 9d2e <pwm_nrfx_pin_set+0x7e>
	return 0;
    9cf8:	2000      	movs	r0, #0
}
    9cfa:	b003      	add	sp, #12
    9cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
    9d00:	454e      	cmp	r6, r9
    9d02:	d87f      	bhi.n	9e04 <pwm_nrfx_pin_set+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9d04:	a801      	add	r0, sp, #4
    9d06:	f8cd 8004 	str.w	r8, [sp, #4]
    9d0a:	f7fa fbe5 	bl	44d8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9d0e:	9a01      	ldr	r2, [sp, #4]
    9d10:	2301      	movs	r3, #1
    9d12:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    9d14:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    9d18:	4621      	mov	r1, r4
    9d1a:	4628      	mov	r0, r5
    9d1c:	f7ff ffb3 	bl	9c86 <any_other_channel_is_active>
    9d20:	2800      	cmp	r0, #0
    9d22:	d1e9      	bne.n	9cf8 <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    9d24:	4601      	mov	r1, r0
    9d26:	4638      	mov	r0, r7
    9d28:	f7fc f82a 	bl	5d80 <nrfx_pwm_stop>
    9d2c:	e7e4      	b.n	9cf8 <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    9d2e:	4638      	mov	r0, r7
    9d30:	f7fb fff8 	bl	5d24 <nrfx_pwm_is_stopped>
    9d34:	2800      	cmp	r0, #0
    9d36:	d0fa      	beq.n	9d2e <pwm_nrfx_pin_set+0x7e>
			nrfx_pwm_simple_playback(&config->pwm,
    9d38:	2302      	movs	r3, #2
    9d3a:	2201      	movs	r2, #1
    9d3c:	f107 0118 	add.w	r1, r7, #24
    9d40:	4638      	mov	r0, r7
    9d42:	f7fb ff7b 	bl	5c3c <nrfx_pwm_simple_playback>
    9d46:	e7d7      	b.n	9cf8 <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    9d48:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9d4c:	e7d5      	b.n	9cfa <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    9d4e:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    9d52:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
    9d56:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    9d5a:	b113      	cbz	r3, 9d62 <pwm_nrfx_pin_set+0xb2>
    9d5c:	89a2      	ldrh	r2, [r4, #12]
    9d5e:	429a      	cmp	r2, r3
    9d60:	d8c1      	bhi.n	9ce6 <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    9d62:	4621      	mov	r1, r4
    9d64:	4628      	mov	r0, r5
    9d66:	f7ff ff8e 	bl	9c86 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    9d6a:	f080 0001 	eor.w	r0, r0, #1
    9d6e:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    9d70:	7bb9      	ldrb	r1, [r7, #14]
    9d72:	2901      	cmp	r1, #1
		period_cycles /= 2;
    9d74:	bf04      	itt	eq
    9d76:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    9d78:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    9d7c:	b326      	cbz	r6, 9dc8 <pwm_nrfx_pin_set+0x118>
    9d7e:	6823      	ldr	r3, [r4, #0]
    9d80:	42b3      	cmp	r3, r6
    9d82:	d021      	beq.n	9dc8 <pwm_nrfx_pin_set+0x118>
    9d84:	2300      	movs	r3, #0
				data->current[i]
    9d86:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
    9d8a:	b2da      	uxtb	r2, r3
    9d8c:	42aa      	cmp	r2, r5
    9d8e:	d005      	beq.n	9d9c <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    9d90:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    9d94:	f3c2 020e 	ubfx	r2, r2, #0, #15
    9d98:	2a00      	cmp	r2, #0
    9d9a:	d1a1      	bne.n	9ce0 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    9d9c:	3301      	adds	r3, #1
    9d9e:	2b04      	cmp	r3, #4
    9da0:	d1f3      	bne.n	9d8a <pwm_nrfx_pin_set+0xda>
    9da2:	4632      	mov	r2, r6
    9da4:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    9da6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    9daa:	fa5f fc83 	uxtb.w	ip, r3
    9dae:	d29c      	bcs.n	9cea <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    9db0:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    9db4:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
    9db8:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
    9dba:	81a2      	strh	r2, [r4, #12]
    p_reg->PRESCALER  = base_clock;
    9dbc:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
    9dc0:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    9dc4:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    9dc8:	7ba2      	ldrb	r2, [r4, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    9dca:	454e      	cmp	r6, r9
    9dcc:	4633      	mov	r3, r6
    9dce:	bf28      	it	cs
    9dd0:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
    9dd2:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    9dd6:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    9dda:	ea42 020b 	orr.w	r2, r2, fp
    9dde:	b292      	uxth	r2, r2
	data->current[channel] = (
    9de0:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
    9de4:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    9de8:	b112      	cbz	r2, 9df0 <pwm_nrfx_pin_set+0x140>
    9dea:	89a1      	ldrh	r1, [r4, #12]
    9dec:	4291      	cmp	r1, r2
    9dee:	d882      	bhi.n	9cf6 <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    9df0:	197a      	adds	r2, r7, r5
    9df2:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    9df6:	2b00      	cmp	r3, #0
    9df8:	d082      	beq.n	9d00 <pwm_nrfx_pin_set+0x50>
			&& channel_inverted_state;
    9dfa:	454e      	cmp	r6, r9
    9dfc:	d805      	bhi.n	9e0a <pwm_nrfx_pin_set+0x15a>
    9dfe:	2a00      	cmp	r2, #0
    9e00:	db80      	blt.n	9d04 <pwm_nrfx_pin_set+0x54>
    9e02:	e002      	b.n	9e0a <pwm_nrfx_pin_set+0x15a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    9e04:	2a00      	cmp	r2, #0
    9e06:	f6bf af7d 	bge.w	9d04 <pwm_nrfx_pin_set+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9e0a:	a801      	add	r0, sp, #4
    9e0c:	f8cd 8004 	str.w	r8, [sp, #4]
    9e10:	f7fa fb62 	bl	44d8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9e14:	9a01      	ldr	r2, [sp, #4]
    9e16:	2301      	movs	r3, #1
    9e18:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    9e1a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    9e1e:	e77b      	b.n	9d18 <pwm_nrfx_pin_set+0x68>

00009e20 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    9e20:	6843      	ldr	r3, [r0, #4]
    9e22:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    9e24:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9e28:	05d1      	lsls	r1, r2, #23
{
    9e2a:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9e2c:	d518      	bpl.n	9e60 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9e2e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    9e32:	b1aa      	cbz	r2, 9e60 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    9e34:	f04f 0120 	mov.w	r1, #32
    9e38:	f3ef 8211 	mrs	r2, BASEPRI
    9e3c:	f381 8812 	msr	BASEPRI_MAX, r1
    9e40:	f3bf 8f6f 	isb	sy
    9e44:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    9e48:	b131      	cbz	r1, 9e58 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e4a:	2100      	movs	r1, #0
    9e4c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    9e50:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e54:	2101      	movs	r1, #1
    9e56:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    9e58:	f382 8811 	msr	BASEPRI, r2
    9e5c:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9e60:	6842      	ldr	r2, [r0, #4]
    9e62:	6852      	ldr	r2, [r2, #4]
    9e64:	06d2      	lsls	r2, r2, #27
    9e66:	d51a      	bpl.n	9e9e <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    9e68:	f04f 0220 	mov.w	r2, #32
    9e6c:	f3ef 8111 	mrs	r1, BASEPRI
    9e70:	f382 8812 	msr	BASEPRI_MAX, r2
    9e74:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9e78:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    9e7c:	b112      	cbz	r2, 9e84 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9e7e:	2200      	movs	r2, #0
    9e80:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    9e84:	6902      	ldr	r2, [r0, #16]
    9e86:	68d2      	ldr	r2, [r2, #12]
    9e88:	b10a      	cbz	r2, 9e8e <uarte_nrfx_isr_int+0x6e>
    9e8a:	6912      	ldr	r2, [r2, #16]
    9e8c:	b91a      	cbnz	r2, 9e96 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    9e8e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    9e92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    9e96:	f381 8811 	msr	BASEPRI, r1
    9e9a:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    9e9e:	6902      	ldr	r2, [r0, #16]
    9ea0:	68d2      	ldr	r2, [r2, #12]
    9ea2:	b15a      	cbz	r2, 9ebc <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9ea4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    9ea8:	b151      	cbz	r1, 9ec0 <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
    9eaa:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    9eac:	2100      	movs	r1, #0
    9eae:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    9eb0:	b134      	cbz	r4, 9ec0 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
    9eb2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    9eb6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    9eba:	7391      	strb	r1, [r2, #14]
}
    9ebc:	bc10      	pop	{r4}
    9ebe:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9ec0:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    9ec4:	b121      	cbz	r1, 9ed0 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9ec6:	2100      	movs	r1, #0
    9ec8:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    9ecc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    9ed0:	6813      	ldr	r3, [r2, #0]
    9ed2:	2b00      	cmp	r3, #0
    9ed4:	d0f2      	beq.n	9ebc <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    9ed6:	6851      	ldr	r1, [r2, #4]
}
    9ed8:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    9eda:	4718      	bx	r3

00009edc <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    9edc:	6902      	ldr	r2, [r0, #16]
{
    9ede:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    9ee0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    9ee4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    9ee8:	2000      	movs	r0, #0
    9eea:	4770      	bx	lr

00009eec <uarte_nrfx_err_check>:
	return config->uarte_regs;
    9eec:	6843      	ldr	r3, [r0, #4]
    9eee:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    9ef0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    9ef4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    9ef8:	4770      	bx	lr

00009efa <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    9efa:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    9efc:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9efe:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    9f02:	b940      	cbnz	r0, 9f16 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    9f04:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    9f06:	0792      	lsls	r2, r2, #30
    9f08:	d406      	bmi.n	9f18 <is_tx_ready+0x1e>
    9f0a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    9f0e:	3800      	subs	r0, #0
    9f10:	bf18      	it	ne
    9f12:	2001      	movne	r0, #1
    9f14:	4770      	bx	lr
    9f16:	2001      	movs	r0, #1
}
    9f18:	4770      	bx	lr

00009f1a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    9f1a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    9f1c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    9f1e:	681b      	ldr	r3, [r3, #0]
    9f20:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9f24:	b148      	cbz	r0, 9f3a <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    9f26:	7d52      	ldrb	r2, [r2, #21]
    9f28:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f2a:	2000      	movs	r0, #0
    9f2c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9f30:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f34:	2201      	movs	r2, #1
    9f36:	601a      	str	r2, [r3, #0]
	return 0;
    9f38:	4770      	bx	lr
		return -1;
    9f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9f3e:	4770      	bx	lr

00009f40 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9f40:	2a00      	cmp	r2, #0
{
    9f42:	b510      	push	{r4, lr}
    9f44:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9f46:	dd0f      	ble.n	9f68 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    9f48:	6843      	ldr	r3, [r0, #4]
    9f4a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9f4c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9f50:	b148      	cbz	r0, 9f66 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    9f52:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f54:	2000      	movs	r0, #0
    9f56:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9f5a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    9f5e:	7d52      	ldrb	r2, [r2, #21]
    9f60:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f62:	2001      	movs	r0, #1
    9f64:	6018      	str	r0, [r3, #0]
}
    9f66:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    9f68:	2000      	movs	r0, #0
    9f6a:	e7fc      	b.n	9f66 <uarte_nrfx_fifo_read+0x26>

00009f6c <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    9f6c:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    9f6e:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    9f70:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    9f72:	f04f 0020 	mov.w	r0, #32
    9f76:	f3ef 8311 	mrs	r3, BASEPRI
    9f7a:	f380 8812 	msr	BASEPRI_MAX, r0
    9f7e:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    9f82:	68c9      	ldr	r1, [r1, #12]
    9f84:	2000      	movs	r0, #0
    9f86:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    9f88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    9f8c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    9f90:	f383 8811 	msr	BASEPRI, r3
    9f94:	f3bf 8f6f 	isb	sy
}
    9f98:	4770      	bx	lr

00009f9a <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    9f9a:	6903      	ldr	r3, [r0, #16]
    9f9c:	68db      	ldr	r3, [r3, #12]
    9f9e:	2201      	movs	r2, #1
    9fa0:	739a      	strb	r2, [r3, #14]
}
    9fa2:	4770      	bx	lr

00009fa4 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    9fa4:	6903      	ldr	r3, [r0, #16]
    9fa6:	68db      	ldr	r3, [r3, #12]
    9fa8:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    9faa:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    9fae:	b962      	cbnz	r2, 9fca <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    9fb0:	6842      	ldr	r2, [r0, #4]
    9fb2:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9fb4:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    9fb8:	b140      	cbz	r0, 9fcc <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    9fba:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    9fbe:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    9fc2:	d003      	beq.n	9fcc <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    9fc4:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    9fc6:	2001      	movs	r0, #1
    9fc8:	4770      	bx	lr
    9fca:	2000      	movs	r0, #0
}
    9fcc:	4770      	bx	lr

00009fce <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    9fce:	6843      	ldr	r3, [r0, #4]
    9fd0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9fd2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    9fd6:	3800      	subs	r0, #0
    9fd8:	bf18      	it	ne
    9fda:	2001      	movne	r0, #1
    9fdc:	4770      	bx	lr

00009fde <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    9fde:	6843      	ldr	r3, [r0, #4]
    9fe0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    9fe2:	2210      	movs	r2, #16
    9fe4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9fe8:	4770      	bx	lr

00009fea <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    9fea:	6843      	ldr	r3, [r0, #4]
    9fec:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    9fee:	2210      	movs	r2, #16
    9ff0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    9ff4:	4770      	bx	lr

00009ff6 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    9ff6:	6843      	ldr	r3, [r0, #4]
    9ff8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    9ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
    9ffe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    a002:	4770      	bx	lr

0000a004 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    a004:	6843      	ldr	r3, [r0, #4]
    a006:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    a008:	f44f 7200 	mov.w	r2, #512	; 0x200
    a00c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    a010:	4770      	bx	lr

0000a012 <uarte_nrfx_irq_update>:
}
    a012:	2001      	movs	r0, #1
    a014:	4770      	bx	lr

0000a016 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    a016:	6903      	ldr	r3, [r0, #16]
    a018:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    a01a:	e9c3 1200 	strd	r1, r2, [r3]
}
    a01e:	4770      	bx	lr

0000a020 <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    a020:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
    a022:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a024:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a028:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a02c:	2200      	movs	r2, #0
    a02e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    a032:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    a036:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    a03a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a03e:	6842      	ldr	r2, [r0, #4]
    a040:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a042:	bf41      	itttt	mi
    a044:	2208      	movmi	r2, #8
    a046:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    a04a:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    a04e:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a052:	2201      	movs	r2, #1
    a054:	609a      	str	r2, [r3, #8]
}
    a056:	4770      	bx	lr

0000a058 <uarte_nrfx_fifo_fill>:
{
    a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    a05a:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    a05c:	68f3      	ldr	r3, [r6, #12]
    a05e:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a060:	f3bf 8f5b 	dmb	ish
    a064:	4294      	cmp	r4, r2
    a066:	bfa8      	it	ge
    a068:	4614      	movge	r4, r2
{
    a06a:	4605      	mov	r5, r0
    a06c:	3310      	adds	r3, #16
    a06e:	2201      	movs	r2, #1
    a070:	e853 0f00 	ldrex	r0, [r3]
    a074:	2800      	cmp	r0, #0
    a076:	d103      	bne.n	a080 <uarte_nrfx_fifo_fill+0x28>
    a078:	e843 2700 	strex	r7, r2, [r3]
    a07c:	2f00      	cmp	r7, #0
    a07e:	d1f7      	bne.n	a070 <uarte_nrfx_fifo_fill+0x18>
    a080:	f3bf 8f5b 	dmb	ish
    a084:	bf0c      	ite	eq
    a086:	4613      	moveq	r3, r2
    a088:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    a08a:	d01d      	beq.n	a0c8 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    a08c:	461c      	mov	r4, r3
}
    a08e:	4620      	mov	r0, r4
    a090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    a092:	68f2      	ldr	r2, [r6, #12]
    a094:	5cc8      	ldrb	r0, [r1, r3]
    a096:	6892      	ldr	r2, [r2, #8]
    a098:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    a09a:	3301      	adds	r3, #1
    a09c:	42a3      	cmp	r3, r4
    a09e:	dbf8      	blt.n	a092 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    a0a0:	f04f 0320 	mov.w	r3, #32
    a0a4:	f3ef 8711 	mrs	r7, BASEPRI
    a0a8:	f383 8812 	msr	BASEPRI_MAX, r3
    a0ac:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    a0b0:	4628      	mov	r0, r5
    a0b2:	f7ff ff22 	bl	9efa <is_tx_ready>
    a0b6:	68f3      	ldr	r3, [r6, #12]
    a0b8:	b940      	cbnz	r0, a0cc <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    a0ba:	6118      	str	r0, [r3, #16]
		len = 0;
    a0bc:	4604      	mov	r4, r0
	__asm__ volatile(
    a0be:	f387 8811 	msr	BASEPRI, r7
    a0c2:	f3bf 8f6f 	isb	sy
	return len;
    a0c6:	e7e2      	b.n	a08e <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    a0c8:	2300      	movs	r3, #0
    a0ca:	e7e7      	b.n	a09c <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    a0cc:	6899      	ldr	r1, [r3, #8]
    a0ce:	4622      	mov	r2, r4
    a0d0:	4628      	mov	r0, r5
    a0d2:	f7ff ffa5 	bl	a020 <tx_start>
    a0d6:	e7f2      	b.n	a0be <uarte_nrfx_fifo_fill+0x66>

0000a0d8 <uarte_nrfx_irq_is_pending>:
{
    a0d8:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    a0da:	6843      	ldr	r3, [r0, #4]
    a0dc:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    a0de:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    a0e2:	025b      	lsls	r3, r3, #9
{
    a0e4:	4604      	mov	r4, r0
		||
    a0e6:	d405      	bmi.n	a0f4 <uarte_nrfx_irq_is_pending+0x1c>
    a0e8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    a0ec:	f010 0010 	ands.w	r0, r0, #16
    a0f0:	d106      	bne.n	a100 <uarte_nrfx_irq_is_pending+0x28>
}
    a0f2:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    a0f4:	f7ff ff56 	bl	9fa4 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    a0f8:	2800      	cmp	r0, #0
    a0fa:	d0f5      	beq.n	a0e8 <uarte_nrfx_irq_is_pending+0x10>
		||
    a0fc:	2001      	movs	r0, #1
    a0fe:	e7f8      	b.n	a0f2 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    a100:	4620      	mov	r0, r4
    a102:	f7ff ff64 	bl	9fce <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    a106:	3800      	subs	r0, #0
    a108:	bf18      	it	ne
    a10a:	2001      	movne	r0, #1
    a10c:	e7f1      	b.n	a0f2 <uarte_nrfx_irq_is_pending+0x1a>

0000a10e <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    a10e:	b510      	push	{r4, lr}
    a110:	2200      	movs	r2, #0
    a112:	4604      	mov	r4, r0
    a114:	2101      	movs	r1, #1
    a116:	2002      	movs	r0, #2
    a118:	f7f8 ff1c 	bl	2f54 <z_arm_irq_priority_set>
    a11c:	2002      	movs	r0, #2
    a11e:	f7f8 fefb 	bl	2f18 <arch_irq_enable>
    a122:	4620      	mov	r0, r4
    a124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a128:	f7fa bb56 	b.w	47d8 <uarte_instance_init.isra.0>

0000a12c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    a12c:	b510      	push	{r4, lr}
    a12e:	2200      	movs	r2, #0
    a130:	4604      	mov	r4, r0
    a132:	2101      	movs	r1, #1
    a134:	2028      	movs	r0, #40	; 0x28
    a136:	f7f8 ff0d 	bl	2f54 <z_arm_irq_priority_set>
    a13a:	2028      	movs	r0, #40	; 0x28
    a13c:	f7f8 feec 	bl	2f18 <arch_irq_enable>
    a140:	4620      	mov	r0, r4
    a142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a146:	f7fa bb47 	b.w	47d8 <uarte_instance_init.isra.0>

0000a14a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    a14a:	4770      	bx	lr

0000a14c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    a14c:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    a14e:	2000      	movs	r0, #0
    a150:	f7f9 fafe 	bl	3750 <sys_arch_reboot>

0000a154 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    a154:	f7fe bfc4 	b.w	90e0 <nrf_cc3xx_platform_init_no_rng>

0000a158 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    a158:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    a15a:	f7f8 f93d 	bl	23d8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    a15e:	f7f8 f9ef 	bl	2540 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    a162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    a166:	f7fe bfbb 	b.w	90e0 <nrf_cc3xx_platform_init_no_rng>

0000a16a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    a16a:	4700      	bx	r0

0000a16c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    a16c:	f000 b916 	b.w	a39c <z_impl_k_busy_wait>

0000a170 <nrf_gpio_pin_present_check>:
    switch (port)
    a170:	0943      	lsrs	r3, r0, #5
    a172:	d00b      	beq.n	a18c <nrf_gpio_pin_present_check+0x1c>
    a174:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    a176:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a17a:	bf18      	it	ne
    a17c:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    a17e:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    a182:	fa23 f000 	lsr.w	r0, r3, r0
}
    a186:	f000 0001 	and.w	r0, r0, #1
    a18a:	4770      	bx	lr
    switch (port)
    a18c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a190:	e7f5      	b.n	a17e <nrf_gpio_pin_present_check+0xe>

0000a192 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    a192:	0080      	lsls	r0, r0, #2
}
    a194:	f500 7080 	add.w	r0, r0, #256	; 0x100
    a198:	4770      	bx	lr

0000a19a <nrf_gpio_reconfigure>:
{
    a19a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a19e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a1a0:	a801      	add	r0, sp, #4
{
    a1a2:	460e      	mov	r6, r1
    a1a4:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    a1a8:	4690      	mov	r8, r2
    a1aa:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a1ac:	f7fb f86c 	bl	5288 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a1b0:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    a1b2:	f1b8 0f00 	cmp.w	r8, #0
    a1b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    a1ba:	bf14      	ite	ne
    a1bc:	2302      	movne	r3, #2
    a1be:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    a1c0:	2e00      	cmp	r6, #0
    a1c2:	bf18      	it	ne
    a1c4:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    a1c8:	2d00      	cmp	r5, #0
    a1ca:	bf14      	ite	ne
    a1cc:	210c      	movne	r1, #12
    a1ce:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    a1d0:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    a1d2:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    a1d6:	bf14      	ite	ne
    a1d8:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    a1dc:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    a1de:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    a1e0:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a1e4:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    a1e8:	bf14      	ite	ne
    a1ea:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    a1ee:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    a1f0:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    a1f2:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    a1f6:	b106      	cbz	r6, a1fa <nrf_gpio_reconfigure+0x60>
    a1f8:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    a1fa:	f1b8 0f00 	cmp.w	r8, #0
    a1fe:	d003      	beq.n	a208 <nrf_gpio_reconfigure+0x6e>
    a200:	f898 8000 	ldrb.w	r8, [r8]
    a204:	ea4f 0848 	mov.w	r8, r8, lsl #1
    a208:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    a20a:	b10d      	cbz	r5, a210 <nrf_gpio_reconfigure+0x76>
    a20c:	782d      	ldrb	r5, [r5, #0]
    a20e:	00ad      	lsls	r5, r5, #2
    a210:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    a214:	b10c      	cbz	r4, a21a <nrf_gpio_reconfigure+0x80>
    a216:	7822      	ldrb	r2, [r4, #0]
    a218:	0214      	lsls	r4, r2, #8
    a21a:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    a21c:	b10f      	cbz	r7, a222 <nrf_gpio_reconfigure+0x88>
    a21e:	783f      	ldrb	r7, [r7, #0]
    a220:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    a222:	432c      	orrs	r4, r5
    a224:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    a226:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    a22a:	b002      	add	sp, #8
    a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a230 <nrf_gpio_cfg_sense_set>:
{
    a230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    a232:	f10d 030f 	add.w	r3, sp, #15
    a236:	9301      	str	r3, [sp, #4]
    a238:	2300      	movs	r3, #0
{
    a23a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    a23e:	9300      	str	r3, [sp, #0]
    a240:	461a      	mov	r2, r3
    a242:	4619      	mov	r1, r3
    a244:	f7ff ffa9 	bl	a19a <nrf_gpio_reconfigure>
}
    a248:	b005      	add	sp, #20
    a24a:	f85d fb04 	ldr.w	pc, [sp], #4

0000a24e <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    a24e:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    a250:	2402      	movs	r4, #2
    a252:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    a254:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    a256:	6809      	ldr	r1, [r1, #0]
    a258:	b171      	cbz	r1, a278 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    a25a:	f012 0f04 	tst.w	r2, #4
    a25e:	bf0c      	ite	eq
    a260:	2182      	moveq	r1, #130	; 0x82
    a262:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    a264:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    a266:	bf48      	it	mi
    a268:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    a26c:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    a26e:	bf48      	it	mi
    a270:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    a274:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    a278:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a27a:	f04f 0100 	mov.w	r1, #0
    a27e:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a282:	bf58      	it	pl
    a284:	2201      	movpl	r2, #1
    a286:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    a28a:	bf56      	itet	pl
    a28c:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    a28e:	18c0      	addmi	r0, r0, r3
    return 0;
    a290:	4608      	movpl	r0, r1
}
    a292:	bd10      	pop	{r4, pc}

0000a294 <z_device_state_init>:
}
    a294:	4770      	bx	lr

0000a296 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    a296:	b138      	cbz	r0, a2a8 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    a298:	68c3      	ldr	r3, [r0, #12]
    a29a:	8818      	ldrh	r0, [r3, #0]
    a29c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    a2a0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    a2a4:	4258      	negs	r0, r3
    a2a6:	4158      	adcs	r0, r3
}
    a2a8:	4770      	bx	lr

0000a2aa <z_pm_save_idle_exit>:
{
    a2aa:	b508      	push	{r3, lr}
	pm_system_resume();
    a2ac:	f7f8 fca4 	bl	2bf8 <pm_system_resume>
}
    a2b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    a2b4:	f7ff bf49 	b.w	a14a <sys_clock_idle_exit>

0000a2b8 <k_mem_slab_init>:
{
    a2b8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    a2ba:	2400      	movs	r4, #0
    a2bc:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    a2be:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a2c0:	ea41 0402 	orr.w	r4, r1, r2
    a2c4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    a2c8:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    a2cc:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a2ce:	d10c      	bne.n	a2ea <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    a2d0:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    a2d2:	42a3      	cmp	r3, r4
    a2d4:	d103      	bne.n	a2de <k_mem_slab_init+0x26>
    a2d6:	e9c0 0000 	strd	r0, r0, [r0]
}
    a2da:	2000      	movs	r0, #0
}
    a2dc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    a2de:	6985      	ldr	r5, [r0, #24]
    a2e0:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    a2e2:	3401      	adds	r4, #1
		slab->free_list = p;
    a2e4:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    a2e6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    a2e8:	e7f3      	b.n	a2d2 <k_mem_slab_init+0x1a>
		return -EINVAL;
    a2ea:	f06f 0015 	mvn.w	r0, #21
	return rc;
    a2ee:	e7f5      	b.n	a2dc <k_mem_slab_init+0x24>

0000a2f0 <z_impl_k_mutex_init>:
{
    a2f0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    a2f2:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    a2f4:	e9c3 0002 	strd	r0, r0, [r3, #8]
    a2f8:	e9c3 3300 	strd	r3, r3, [r3]
}
    a2fc:	4770      	bx	lr

0000a2fe <z_handle_obj_poll_events>:
{
    a2fe:	4603      	mov	r3, r0
	return list->head == list;
    a300:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    a302:	4283      	cmp	r3, r0
    a304:	d008      	beq.n	a318 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    a306:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    a30a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a30c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a30e:	2300      	movs	r3, #0
	node->prev = NULL;
    a310:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    a314:	f7fc baba 	b.w	688c <signal_poll_event>
}
    a318:	4770      	bx	lr

0000a31a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a31a:	4603      	mov	r3, r0
    a31c:	b920      	cbnz	r0, a328 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a31e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    a322:	b90a      	cbnz	r2, a328 <z_reschedule_irqlock+0xe>
    a324:	f7f8 be66 	b.w	2ff4 <arch_swap>
    a328:	f383 8811 	msr	BASEPRI, r3
    a32c:	f3bf 8f6f 	isb	sy
}
    a330:	4770      	bx	lr

0000a332 <z_reschedule_unlocked>:
	__asm__ volatile(
    a332:	f04f 0320 	mov.w	r3, #32
    a336:	f3ef 8011 	mrs	r0, BASEPRI
    a33a:	f383 8812 	msr	BASEPRI_MAX, r3
    a33e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a342:	f7ff bfea 	b.w	a31a <z_reschedule_irqlock>

0000a346 <z_priq_dumb_best>:
{
    a346:	4603      	mov	r3, r0
	return list->head == list;
    a348:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a34a:	4283      	cmp	r3, r0
    a34c:	d003      	beq.n	a356 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    a34e:	2800      	cmp	r0, #0
    a350:	bf38      	it	cc
    a352:	2000      	movcc	r0, #0
    a354:	4770      	bx	lr
	struct k_thread *thread = NULL;
    a356:	2000      	movs	r0, #0
}
    a358:	4770      	bx	lr

0000a35a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    a35a:	b15a      	cbz	r2, a374 <z_impl_k_sem_init+0x1a>
    a35c:	428a      	cmp	r2, r1
    a35e:	d309      	bcc.n	a374 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    a360:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    a364:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    a368:	e9c0 0000 	strd	r0, r0, [r0]
    a36c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    a370:	2000      	movs	r0, #0
    a372:	4770      	bx	lr
		return -EINVAL;
    a374:	f06f 0015 	mvn.w	r0, #21
}
    a378:	4770      	bx	lr

0000a37a <k_is_in_isr>:
    a37a:	f3ef 8005 	mrs	r0, IPSR
}
    a37e:	3800      	subs	r0, #0
    a380:	bf18      	it	ne
    a382:	2001      	movne	r0, #1
    a384:	4770      	bx	lr

0000a386 <z_impl_k_thread_name_set>:
}
    a386:	f06f 0057 	mvn.w	r0, #87	; 0x57
    a38a:	4770      	bx	lr

0000a38c <z_impl_k_thread_start>:
	z_sched_start(thread);
    a38c:	f7fc befc 	b.w	7188 <z_sched_start>

0000a390 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    a390:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    a392:	f7fe faa1 	bl	88d8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    a396:	bd08      	pop	{r3, pc}

0000a398 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    a398:	f7fe ba9e 	b.w	88d8 <sys_clock_tick_get>

0000a39c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    a39c:	b108      	cbz	r0, a3a2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    a39e:	f7f9 b9ed 	b.w	377c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    a3a2:	4770      	bx	lr

0000a3a4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    a3a4:	b510      	push	{r4, lr}
    a3a6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    a3a8:	f7fe f8e4 	bl	8574 <z_abort_timeout>

	if (inactive) {
    a3ac:	b9b0      	cbnz	r0, a3dc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    a3ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a3b0:	b10b      	cbz	r3, a3b6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    a3b2:	4620      	mov	r0, r4
    a3b4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    a3b6:	f104 0018 	add.w	r0, r4, #24
    a3ba:	f7fd fa01 	bl	77c0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    a3be:	b168      	cbz	r0, a3dc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    a3c0:	f7fc fe9a 	bl	70f8 <z_ready_thread>
    a3c4:	f04f 0320 	mov.w	r3, #32
    a3c8:	f3ef 8011 	mrs	r0, BASEPRI
    a3cc:	f383 8812 	msr	BASEPRI_MAX, r3
    a3d0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    a3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3d8:	f7ff bf9f 	b.w	a31a <z_reschedule_irqlock>
    a3dc:	bd10      	pop	{r4, pc}

0000a3de <notify_queue_locked>:
	if (queue != NULL) {
    a3de:	b120      	cbz	r0, a3ea <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    a3e0:	2200      	movs	r2, #0
    a3e2:	4611      	mov	r1, r2
    a3e4:	3088      	adds	r0, #136	; 0x88
    a3e6:	f7fd bce7 	b.w	7db8 <z_sched_wake>
}
    a3ea:	4770      	bx	lr

0000a3ec <k_heap_init>:
{
    a3ec:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    a3ee:	f100 040c 	add.w	r4, r0, #12
    a3f2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    a3f6:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    a3f8:	f7f7 bf2a 	b.w	2250 <sys_heap_init>

0000a3fc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    a3fc:	f7fb bd18 	b.w	5e30 <SystemInit>
